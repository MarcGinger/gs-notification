{
	"tables": {
		"cd5f87d5-b86c-47eb-8bd6-6699ed90dc28": {
			"id": "cd5f87d5-b86c-47eb-8bd6-6699ed90dc28",
			"visible": true,
			"name": "message_request",
			"desc": "## üß† SlackWorkspace\n\n### **Purpose**\n\nThe `SlackWorkspace` aggregate represents the tenant‚Äôs connection to their Slack workspace. It acts as the foundational configuration point that defines the link between the system and the tenant‚Äôs Slack organization.\n\nThis aggregate holds sensitive integration credentials ‚Äî including OAuth tokens, signing secrets, and app identifiers ‚Äî and ensures they are securely managed and rotated when necessary. It also tracks which workspace belongs to which tenant and whether the connection is currently active.\n\n### **Responsibilities**\n\n* Maintain the tenant-to-Slack workspace mapping.\n* Securely store and reference OAuth credentials (e.g., `botToken`, `signingSecret`).\n* Enable or disable the Slack integration per tenant.\n* Manage the default posting channel for system notifications.\n* Emit events that notify other services when configuration changes occur.\n\n### **Why It Matters**\n\nWithout the `SlackWorkspace` aggregate, the platform wouldn‚Äôt know **where** to send Slack messages or which tokens to use for authentication. It ensures tenant isolation and provides a secure boundary for Slack API interactions.\n",
			"estimatedSize": "",
			"cols": [
				{
					"id": "da5d4788-4185-4bb4-9b78-dee1102fd58b",
					"name": "id",
					"datatype": "UUID",
					"param": "35",
					"pk": true,
					"nn": true,
					"fk": false,
					"comment": "Unique ID for the message request (UUID).",
					"defaultvalue": "",
					"data": "",
					"after": "",
					"autoinc": true,
					"collation": "",
					"charset": "",
					"binary": false,
					"zerofill": false,
					"unsigned": false,
					"enum": "",
					"estimatedSize": ""
				},
				{
					"id": "f1a2b3c4-d5e6-7f8g-9h0i-1j2k3l4m5n6o",
					"name": "workspaceId",
					"datatype": "VARCHAR",
					"param": "64",
					"pk": false,
					"nn": true,
					"fk": false,
					"comment": "Slack workspace to post to.",
					"defaultvalue": "",
					"data": "",
					"after": "",
					"autoinc": false,
					"collation": "",
					"charset": "",
					"binary": false,
					"zerofill": false,
					"unsigned": false,
					"enum": "",
					"estimatedSize": ""
				},
				{
					"id": "g2h3i4j5-k6l7-8m9n-0o1p-2q3r4s5t6u7v",
					"name": "templateCode",
					"datatype": "VARCHAR",
					"param": "64",
					"pk": false,
					"nn": false,
					"fk": false,
					"comment": "Template to render.",
					"defaultvalue": "",
					"data": "",
					"after": "",
					"autoinc": false,
					"collation": "",
					"charset": "",
					"binary": false,
					"zerofill": false,
					"unsigned": false,
					"enum": "",
					"estimatedSize": ""
				},
				{
					"id": "h3i4j5k6-l7m8-9n0o-1p2q-3r4s5t6u7v8w",
					"name": "recipient",
					"datatype": "VARCHAR",
					"param": "10",
					"pk": false,
					"nn": false,
					"fk": false,
					"comment": "Channel ID or user ID.",
					"defaultvalue": "",
					"data": "",
					"after": "",
					"autoinc": false,
					"collation": "",
					"charset": "",
					"binary": false,
					"zerofill": false,
					"unsigned": false,
					"enum": "",
					"estimatedSize": ""
				},
				{
					"id": "i4j5k6l7-m8n9-0o1p-2q3r-4s5t6u7v8w9x",
					"name": "data",
					"datatype": "JSON",
					"param": "",
					"pk": false,
					"nn": false,
					"fk": false,
					"comment": "Key-value data payload for template variables.",
					"defaultvalue": "",
					"data": "",
					"after": "",
					"autoinc": false,
					"collation": "",
					"charset": "",
					"binary": false,
					"zerofill": false,
					"unsigned": false,
					"enum": "",
					"estimatedSize": ""
				},
				{
					"id": "j5k6l7m8-n9o0-1p2q-3r4s-5t6u7v8w9x0y",
					"name": "status",
					"datatype": "ENUM",
					"param": "",
					"pk": false,
					"nn": false,
					"fk": false,
					"comment": "Current message lifecycle status.",
					"defaultvalue": "",
					"data": "",
					"after": "",
					"autoinc": false,
					"collation": "",
					"charset": "",
					"binary": false,
					"zerofill": false,
					"unsigned": false,
					"enum": "requested,validated,queued,failed",
					"estimatedSize": ""
				}
			],
			"relations": [],
			"lines": [],
			"keys": [
				{
					"id": "9ad06bbc-a718-4190-8cd9-8ed68a449145",
					"name": "PRIMARY",
					"isPk": true,
					"cols": [
						{
							"id": "7dd784d0-b700-4f2d-901e-beabeaac4f1a",
							"colid": "da5d4788-4185-4bb4-9b78-dee1102fd58b"
						}
					]
				}
			],
			"indexes": [],
			"embeddable": false,
			"generate": true,
			"generateCustomCode": true,
			"customCode": "write('kurrentdb')\nread('redis')\nquery('redis')\nprojector('redis')\nsoftDelete(false)",
			"tabletype": "InnoDB",
			"collation": "utf8mb4_general_ci",
			"charset": "utf8mb4",
			"rowformat": "",
			"database": "service",
			"initautoinc": "",
			"temporary": false,
			"ifnotexists": false
		}
	},
	"relations": {},
	"notes": {},
	"lines": {},
	"model": {
		"color": "transparent",
		"activeDiagram": "914a25f8-2e60-46c0-a2cf-907835861077",
		"caseConvention": "under",
		"def_charset": "utf8mb4",
		"def_collation": "utf8mb4_general_ci",
		"def_coltopk": true,
		"def_rowformat": "",
		"def_tabletype": "InnoDB",
		"def_database": "service",
		"desc": "# üß© Core Slack Config ‚Äî General Overview\n\nThe **Core Slack Config** service is part of the broader **Notification Bounded Context**, responsible for managing all configuration aspects required to send Slack notifications within the platform. It provides the infrastructure and domain logic that connects a tenant‚Äôs Slack workspace to the notification ecosystem, ensuring secure, structured, and compliant communication between services and Slack.\n\n---\n\n## üéØ Purpose\n\nThe primary purpose of **Core Slack Config** is to manage the lifecycle of Slack-related configuration for each tenant. It defines *how*, *where*, and *under what conditions* Slack messages are sent. By maintaining configurations in a domain-driven, event-sourced model, the service guarantees auditability, tenant isolation, and consistency across all Slack-related operations.\n\n---\n\n## üß± Architectural Role\n\n**Core Slack Config** acts as the **configuration source of truth** for all Slack integrations in the system. It is not responsible for sending messages (that‚Äôs handled by the **Core Slack Execute** service), but instead manages the metadata, tokens, templates, and operational policies that determine how Slack notifications are constructed and authorized.\n\n### Key Roles:\n\n* Acts as the *control plane* for Slack notification configuration.\n* Provides secure storage and rotation for OAuth tokens and signing secrets.\n* Defines approved channels and message templates per workspace.\n* Publishes events consumed by other services (e.g., executors, auditors, or workflow engines).\n* Ensures compliance with security and audit policies via event sourcing.\n\n---\n\n## ‚öôÔ∏è Core Components\n\n| Aggregate          | Description                                                                                                           |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------- |\n| **SlackWorkspace** | Represents a tenant‚Äôs Slack workspace connection, holding OAuth credentials, signing secrets, and workspace metadata. |\n| **SlackChannel**   | Defines the list of authorized channels and direct message endpoints available for message delivery.                  |\n| **SlackTemplate**  | Manages reusable message templates (text, block layouts, and variables) for structured notifications.                 |\n| **SlackAppConfig** | Contains global settings, retry/backoff parameters, logging preferences, and audit configurations.                    |\n\nEach aggregate is event-sourced and projected into Redis for fast reads. The system follows a **CQRS pattern**, separating command writes (EventStoreDB) from queries (Redis projections).\n\n---\n\n## üß© Data Flow Summary\n\n```\n[API Command] ‚Üí [Use Case] ‚Üí [ESDB Writer Repository] ‚Üí [EventStoreDB]\n       ‚Üì\n[Central Projection Service] ‚Üí [Redis Snapshot] + [Redis Query Index]\n       ‚Üì\n[Query API] ‚Üí [Consumer Services / UI]\n```\n\nThis architecture provides full event auditability in **EventStoreDB**, real-time read performance in **Redis**, and flexible event-driven synchronization via **BullMQ** projectors.\n\n---\n\n## üõ°Ô∏è Security and Compliance\n\n* **Authentication:** Managed via Keycloak (OAuth2 / OpenID Connect).\n* **Authorization:** Governed by Open Policy Agent (OPA) Rego policies.\n* **Secret Storage:** Slack tokens and signing secrets are stored securely using Doppler or another approved secret manager.\n* **Auditability:** Every configuration change emits domain events stored in EventStoreDB, ensuring immutable history and traceability.\n\n---\n\n## üöÄ Example Use Cases\n\n| Use Case                | Description                                                                                                                        |\n| ----------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| **Tenant Onboarding**   | When a new tenant connects their Slack workspace, `SlackWorkspaceConfigured.v1` and `SlackAppConfigUpdated.v1` events are emitted. |\n| **Channel Management**  | Admins can link or disable channels for specific event types (e.g., approvals, alerts).                                            |\n| **Template Management** | Teams can create reusable message templates with placeholders for workflow data.                                                   |\n| **Policy Updates**      | Changing retry or logging settings emits `SlackAppConfigUpdated.v1`, allowing other services to adjust behavior dynamically.       |\n\n---\n\n## ‚úÖ Benefits\n\n* **Event-Sourced Reliability:** Every change is versioned, replayable, and fully auditable.\n* **Tenant Isolation:** Each Slack workspace and channel configuration is scoped to a tenant.\n* **High Performance:** Read models are served from Redis with millisecond-level latency.\n* **Extensible Design:** Supports additional configuration layers (e.g., threads, attachments, Slack workflows) in future iterations.\n* **Integration Friendly:** Easily integrates with other notification channels (email, SMS, webhook) through consistent event naming and structure.\n\n---\n\n## üß© Summary\n\nThe **Core Slack Config** service provides the configuration backbone for all Slack-based notifications. It ensures that every message sent through Slack is:\n\n* Securely authenticated.\n* Delivered through approved channels.\n* Formatted using consistent templates.\n* Managed under auditable, tenant-aware policies.\n\nThis service is a critical component of the Notification Bounded Context, enabling robust, enterprise-grade Slack integration within a modern, event-driven architecture.\n",
		"id": "6645c9b2-33b9-4cef-bcf6-5f382e5ff3a6",
		"isDirty": true,
		"name": "Core Slack Configuration",
		"parentTableInFkCols": true,
		"path": "",
		"replaceSpace": "_",
		"sideSelections": true,
		"storedin": {
			"major": 4,
			"minor": 6,
			"extra": 6
		},
		"type": "MARIADB",
		"version": 1,
		"lastSaved": 1761467849889,
		"beforeScript": "",
		"afterScript": "",
		"sqlSettings": {
			"wrapLines": true,
			"wrapOffset": 80,
			"indent": true,
			"indentationString": "spaces",
			"indentationSize": 2,
			"limitItemsOnLine": true,
			"maxListItemsOnLine": 3,
			"statementDelimiter": ";",
			"routineDelimiter": "//",
			"keywordCase": "upper",
			"identiferCase": "original",
			"includeSchema": "always",
			"quotationExistance": "if_needed"
		},
		"writeFileParam": false,
		"modelHTMLReportDir": "D:\\gs\\cqrs-builder\\tools\\domain\\report",
		"modelPdfReportPath": "D:\\gs\\banking\\gs\\mdt\\gsmdm-person\\tools\\domain\\data\\Masterdata person management.pdf",
		"connectionVersion": "",
		"authorName": "",
		"companyDetails": "",
		"companyUrl": "",
		"synchronizationSettings": {
			"preserveData": "use_temporary_tables",
			"ignoreSystemDefaults": "yes",
			"includeWarnings": "yes",
			"includeCreationSql": "no"
		},
		"laststoredin": {
			"major": 11,
			"minor": 0,
			"extra": 0
		}
	},
	"otherObjects": {},
	"diagrams": {
		"914a25f8-2e60-46c0-a2cf-907835861077": {
			"id": "914a25f8-2e60-46c0-a2cf-907835861077",
			"lineColor": "transparent",
			"description": "this is the main diagram",
			"diagramItems": {
				"cd5f87d5-b86c-47eb-8bd6-6699ed90dc28": {
					"referencedItemId": "cd5f87d5-b86c-47eb-8bd6-6699ed90dc28",
					"x": 45,
					"y": 281,
					"gHeight": 135,
					"gWidth": 243,
					"color": "#ffffff",
					"background": "#03a9f4",
					"resized": false,
					"autoExpand": true,
					"backgroundOpacity": "10",
					"collapsed": false
				}
			},
			"isOpen": true,
			"main": true,
			"name": "Template details",
			"keysgraphics": true,
			"linegraphics": "detailed",
			"zoom": 1,
			"background": "transparent",
			"scroll": {
				"x": 0,
				"y": 0
			},
			"type": "erd",
			"showColumns": true,
			"showColumnDataTypes": true,
			"showSampleData": false,
			"showTableIndexes": true,
			"showTableDescriptions": false,
			"showEstimatedSize": false,
			"showSchemaContainer": true,
			"showEmbeddedInParents": true,
			"showCardinalityCaptions": true,
			"showRelations": true,
			"backgroundImage": "na",
			"descriptionsColor": "transparent",
			"showHorizontal": true,
			"showDescriptions": false,
			"showIndicators": true,
			"showProgress": true,
			"lineWidth": "2",
			"boxSize": "0",
			"showIndicatorCaptions": true,
			"embeddedSpacing": "2",
			"showMainIcon": true,
			"showLabels": true,
			"boxSpacing": "2",
			"boxAlign": "center",
			"showRelationshipNames": false,
			"showLineCaptions": false,
			"showCustomizations": true,
			"showExportDimensions": false,
			"showCompleted": true
		}
	},
	"diagramsOrder": [],
	"order": [
		"cd5f87d5-b86c-47eb-8bd6-6699ed90dc28"
	],
	"collapsedTreeItems": [],
	"reverseStats": {}
}