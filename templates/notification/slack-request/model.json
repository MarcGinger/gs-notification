{
  "service": {
    "name": "notification-slack-request",
    "boundedContext": "notification",
    "application": "slack-request",
    "version": "1",
    "hasRedis": true,
    "hasSql": true,
    "hasEventStream": true
  },
  "tables": [
    {
      "name": "message_request",
      "description": "## 🧠 SlackWorkspace\n\n### **Purpose**\n\nThe \\`SlackWorkspace\\` aggregate represents the tenant’s connection to their Slack workspace. It acts as the foundational configuration point that defines the link between the system and the tenant’s Slack organization.\n\nThis aggregate holds sensitive integration credentials — including OAuth tokens, signing secrets, and app identifiers — and ensures they are securely managed and rotated when necessary. It also tracks which workspace belongs to which tenant and whether the connection is currently active.\n\n### **Responsibilities**\n\n* Maintain the tenant-to-Slack workspace mapping.\n* Securely store and reference OAuth credentials (e.g., \\`botToken\\`, \\`signingSecret\\`).\n* Enable or disable the Slack integration per tenant.\n* Manage the default posting channel for system notifications.\n* Emit events that notify other services when configuration changes occur.\n\n### **Why It Matters**\n\nWithout the \\`SlackWorkspace\\` aggregate, the platform wouldn’t know **where** to send Slack messages or which tokens to use for authentication. It ensures tenant isolation and provides a secure boundary for Slack API interactions.\n",
      "columns": [
        {
          "name": "id",
          "type": "string",
          "childRelationshipType": "",
          "parentRelationshipType": "",
          "datatype": "UUID",
          "primaryKey": true,
          "required": true,
          "description": "Unique ID for the message request (UUID).",
          "defaultvalue": "",
          "example": "",
          "autoIncrement": true,
          "maxLength": "36",
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "",
          "meta": {
            "kind": "uuid",
            "allowNil": false
          }
        },
        {
          "name": "workspace_id",
          "type": "string",
          "childRelationshipType": "",
          "parentRelationshipType": "Workspace",
          "datatype": "VARCHAR",
          "primaryKey": false,
          "required": true,
          "description": "Unique identifier for the Slack workspace/team, provided by Slack API during OAuth installation. This is the primary key linking all workspace-specific configurations.",
          "defaultvalue": "",
          "example": "T01EXAMPLE123",
          "autoIncrement": false,
          "maxLength": "64",
          "array": false,
          "isPII": "",
          "relationship": "one",
          "parentRelationship": "workspace_message_request",
          "childRelationship": "",
          "meta": {
            "kind": "string",
            "maxLength": 64
          }
        },
        {
          "name": "template_code",
          "type": "string",
          "childRelationshipType": "",
          "parentRelationshipType": "Template",
          "datatype": "VARCHAR",
          "primaryKey": false,
          "required": true,
          "description": "Unique template identifier used for programmatic template selection. Must follow snake_case naming convention for consistency with application code.",
          "defaultvalue": "",
          "example": "payment_failure_alert",
          "autoIncrement": false,
          "maxLength": "64",
          "array": false,
          "isPII": "",
          "relationship": "one",
          "parentRelationship": "code_message_request",
          "childRelationship": "",
          "meta": {
            "kind": "string",
            "maxLength": 64
          }
        },
        {
          "name": "recipient",
          "type": "string",
          "childRelationshipType": "",
          "parentRelationshipType": "",
          "datatype": "VARCHAR",
          "primaryKey": false,
          "required": false,
          "description": "Channel ID or user ID.",
          "defaultvalue": "",
          "example": "",
          "autoIncrement": false,
          "maxLength": "10",
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "",
          "meta": {
            "kind": "string",
            "maxLength": 10
          }
        },
        {
          "name": "data",
          "type": "Record<string, unknown>",
          "childRelationshipType": "",
          "parentRelationshipType": "",
          "datatype": "JSON",
          "primaryKey": false,
          "required": false,
          "description": "Key-value data payload for template variables.",
          "defaultvalue": "",
          "example": "",
          "autoIncrement": false,
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "",
          "meta": {
            "kind": "json",
            "jsonShape": "object"
          }
        },
        {
          "name": "status",
          "type": "MessageRequestStatusEnum",
          "childRelationshipType": "",
          "parentRelationshipType": "",
          "datatype": "ENUM",
          "primaryKey": false,
          "required": false,
          "description": "Current message lifecycle status.",
          "defaultvalue": "",
          "example": "",
          "autoIncrement": false,
          "enum": [
            {
              "key": "requested"
            },
            {
              "key": "validated"
            },
            {
              "key": "queued"
            },
            {
              "key": "failed"
            }
          ],
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "",
          "meta": {
            "kind": "enum",
            "enumValues": [
              "requested",
              "validated",
              "queued",
              "failed"
            ],
            "enumName": "status"
          }
        }
      ],
      "relationships": [
        {
          "name": "code_message_request",
          "parentTable": "template",
          "parentColumn": {
            "name": "code",
            "type": "string",
            "childRelationshipType": "MessageRequest",
            "parentRelationshipType": "",
            "datatype": "VARCHAR",
            "primaryKey": true,
            "required": true,
            "description": "Unique template identifier used for programmatic template selection. Must follow snake_case naming convention for consistency with application code.",
            "defaultvalue": "",
            "example": "payment_failure_alert",
            "autoIncrement": false,
            "maxLength": "64",
            "array": false,
            "isPII": "",
            "parentRelationship": "",
            "childRelationship": "code_message_request",
            "meta": {
              "kind": "string",
              "maxLength": 64
            }
          },
          "childTable": "message_request",
          "childColumn": {
            "name": "template_code",
            "type": "string",
            "childRelationshipType": "",
            "parentRelationshipType": "Template",
            "datatype": "VARCHAR",
            "primaryKey": false,
            "required": true,
            "description": "Unique template identifier used for programmatic template selection. Must follow snake_case naming convention for consistency with application code.",
            "defaultvalue": "",
            "example": "payment_failure_alert",
            "autoIncrement": false,
            "maxLength": "64",
            "array": false,
            "isPII": "",
            "relationship": "one",
            "parentRelationship": "code_message_request",
            "childRelationship": "",
            "meta": {
              "kind": "string",
              "maxLength": 64
            }
          },
          "type": "one",
          "complex": true
        },
        {
          "name": "workspace_message_request",
          "parentTable": "workspace",
          "parentColumn": {
            "name": "id",
            "type": "string",
            "childRelationshipType": "MessageRequest",
            "parentRelationshipType": "",
            "datatype": "VARCHAR",
            "primaryKey": true,
            "required": true,
            "description": "Unique identifier for the Slack workspace/team, provided by Slack API during OAuth installation. This is the primary key linking all workspace-specific configurations.",
            "defaultvalue": "",
            "example": "T01EXAMPLE123",
            "autoIncrement": false,
            "maxLength": "64",
            "array": false,
            "isPII": "",
            "parentRelationship": "",
            "childRelationship": "workspace_message_request",
            "meta": {
              "kind": "string",
              "maxLength": 64
            }
          },
          "childTable": "message_request",
          "childColumn": {
            "name": "workspace_id",
            "type": "string",
            "childRelationshipType": "",
            "parentRelationshipType": "Workspace",
            "datatype": "VARCHAR",
            "primaryKey": false,
            "required": true,
            "description": "Unique identifier for the Slack workspace/team, provided by Slack API during OAuth installation. This is the primary key linking all workspace-specific configurations.",
            "defaultvalue": "",
            "example": "T01EXAMPLE123",
            "autoIncrement": false,
            "maxLength": "64",
            "array": false,
            "isPII": "",
            "relationship": "one",
            "parentRelationship": "workspace_message_request",
            "childRelationship": "",
            "meta": {
              "kind": "string",
              "maxLength": 64
            }
          },
          "type": "one",
          "complex": true
        }
      ],
      "lines": [],
      "keys": [
        {
          "name": "id",
          "type": "string",
          "childRelationshipType": "",
          "parentRelationshipType": "",
          "datatype": "UUID",
          "primaryKey": true,
          "required": true,
          "description": "Unique ID for the message request (UUID).",
          "defaultvalue": "",
          "example": "",
          "autoIncrement": true,
          "maxLength": "36",
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "",
          "meta": {
            "kind": "uuid",
            "allowNil": false
          }
        }
      ],
      "indexes": [],
      "docs": {
        "name": "Message_request",
        "summary": "Configuration for message_request table",
        "version": "1.0.0"
      },
      "apis": {},
      "store": {
        "read": "redis",
        "write": "kurrentdb",
        "query": "redis",
        "projector": "redis"
      },
      "options": {
        "command": true,
        "read": "redis",
        "write": "kurrentdb",
        "query": "redis",
        "projector": "redis",
        "softDelete": false,
        "timestamps": true,
        "versioning": true,
        "logging": true,
        "auditing": true,
        "caching": true,
        "eventStreaming": false
      },
      "cancel": {
        "create": false,
        "update": false,
        "delete": false,
        "batch": false,
        "get": false
      },
      "redis": {
        "prefix": "",
        "version": "1.0",
        "category": "notification:slack-request.message.request.v1",
        "ttl": 3600,
        "hash": true,
        "aggregate": "message_request"
      },
      "eventstream": {
        "boundedContext": "notification",
        "aggregate": "message_request",
        "version": "v1",
        "stream": "notification.slackRequest.messageRequest",
        "createdEvent": "NotificationSlackRequestMessageRequestCreated.v1",
        "updatedEvent": "NotificationSlackRequestMessageRequestUpdated.v1",
        "deletedEvent": "NotificationSlackRequestMessageRequestDeleted.v1"
      },
      "permissions": {
        "bulk": [
          "update",
          "delete",
          "import"
        ],
        "adminOverride": true,
        "auditView": true,
        "custom": []
      },
      "domainName": "",
      "parentPath": []
    },
    {
      "name": "workspace",
      "description": "## 🧠 SlackWorkspace\n\n### **Purpose**\n\nThe \\`SlackWorkspace\\` aggregate represents the tenant’s connection to their Slack workspace. It acts as the foundational configuration point that defines the link between the system and the tenant’s Slack organization.\n\nThis aggregate holds sensitive integration credentials — including OAuth tokens, signing secrets, and app identifiers — and ensures they are securely managed and rotated when necessary. It also tracks which workspace belongs to which tenant and whether the connection is currently active.\n\n### **Responsibilities**\n\n* Maintain the tenant-to-Slack workspace mapping.\n* Securely store and reference OAuth credentials (e.g., \\`botToken\\`, \\`signingSecret\\`).\n* Enable or disable the Slack integration per tenant.\n* Manage the default posting channel for system notifications.\n* Emit events that notify other services when configuration changes occur.\n\n### **Why It Matters**\n\nWithout the \\`SlackWorkspace\\` aggregate, the platform wouldn’t know **where** to send Slack messages or which tokens to use for authentication. It ensures tenant isolation and provides a secure boundary for Slack API interactions.\n",
      "columns": [
        {
          "name": "id",
          "type": "string",
          "childRelationshipType": "MessageRequest",
          "parentRelationshipType": "",
          "datatype": "VARCHAR",
          "primaryKey": true,
          "required": true,
          "description": "Unique identifier for the Slack workspace/team, provided by Slack API during OAuth installation. This is the primary key linking all workspace-specific configurations.",
          "defaultvalue": "",
          "example": "T01EXAMPLE123",
          "autoIncrement": false,
          "maxLength": "64",
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "workspace_message_request",
          "meta": {
            "kind": "string",
            "maxLength": 64
          }
        },
        {
          "name": "name",
          "type": "string",
          "childRelationshipType": "",
          "parentRelationshipType": "",
          "datatype": "VARCHAR",
          "primaryKey": false,
          "required": true,
          "description": "Human-readable display name of the Slack workspace as configured by workspace administrators. Used for identification and logging purposes.",
          "defaultvalue": "",
          "example": "Acme Corp Engineering",
          "autoIncrement": false,
          "maxLength": "255",
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "",
          "meta": {
            "kind": "string",
            "maxLength": 255
          }
        },
        {
          "name": "app_id",
          "type": "string",
          "childRelationshipType": "",
          "parentRelationshipType": "",
          "datatype": "VARCHAR",
          "primaryKey": false,
          "required": false,
          "description": "Unique identifier for the Slack application as registered in the Slack App Directory. Used for app-specific API calls and identifying the source of bot interactions.",
          "defaultvalue": "",
          "example": "A01EXAMPLE456",
          "autoIncrement": false,
          "maxLength": "64",
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "",
          "meta": {
            "kind": "string",
            "maxLength": 64
          }
        },
        {
          "name": "default_channel_id",
          "type": "string",
          "childRelationshipType": "",
          "parentRelationshipType": "",
          "datatype": "VARCHAR",
          "primaryKey": false,
          "required": false,
          "description": "Fallback channel ID for notifications when no specific channel is configured or available. Must be a channel where the bot has posting permissions.",
          "defaultvalue": "",
          "example": "C01EXAMPLE000",
          "autoIncrement": false,
          "maxLength": "64",
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "",
          "meta": {
            "kind": "string",
            "maxLength": 64
          }
        },
        {
          "name": "enabled",
          "type": "boolean",
          "childRelationshipType": "",
          "parentRelationshipType": "",
          "datatype": "BOOLEAN",
          "primaryKey": false,
          "required": true,
          "description": "Global toggle for Slack integration functionality. When false, all notifications to this workspace are disabled, useful for maintenance or temporary suspension.",
          "defaultvalue": "true",
          "example": "true",
          "autoIncrement": false,
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "",
          "meta": {
            "kind": "boolean"
          }
        }
      ],
      "relationships": [
        {
          "name": "workspace_message_request",
          "parentTable": "workspace",
          "parentColumn": {
            "name": "id",
            "type": "string",
            "childRelationshipType": "MessageRequest",
            "parentRelationshipType": "",
            "datatype": "VARCHAR",
            "primaryKey": true,
            "required": true,
            "description": "Unique identifier for the Slack workspace/team, provided by Slack API during OAuth installation. This is the primary key linking all workspace-specific configurations.",
            "defaultvalue": "",
            "example": "T01EXAMPLE123",
            "autoIncrement": false,
            "maxLength": "64",
            "array": false,
            "isPII": "",
            "parentRelationship": "",
            "childRelationship": "workspace_message_request",
            "meta": {
              "kind": "string",
              "maxLength": 64
            }
          },
          "childTable": "message_request",
          "childColumn": {
            "name": "workspace_id",
            "type": "string",
            "childRelationshipType": "",
            "parentRelationshipType": "Workspace",
            "datatype": "VARCHAR",
            "primaryKey": false,
            "required": true,
            "description": "Unique identifier for the Slack workspace/team, provided by Slack API during OAuth installation. This is the primary key linking all workspace-specific configurations.",
            "defaultvalue": "",
            "example": "T01EXAMPLE123",
            "autoIncrement": false,
            "maxLength": "64",
            "array": false,
            "isPII": "",
            "relationship": "one",
            "parentRelationship": "workspace_message_request",
            "childRelationship": "",
            "meta": {
              "kind": "string",
              "maxLength": 64
            }
          },
          "type": "one",
          "complex": true
        }
      ],
      "lines": [],
      "keys": [
        {
          "name": "id",
          "type": "string",
          "childRelationshipType": "MessageRequest",
          "parentRelationshipType": "",
          "datatype": "VARCHAR",
          "primaryKey": true,
          "required": true,
          "description": "Unique identifier for the Slack workspace/team, provided by Slack API during OAuth installation. This is the primary key linking all workspace-specific configurations.",
          "defaultvalue": "",
          "example": "T01EXAMPLE123",
          "autoIncrement": false,
          "maxLength": "64",
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "workspace_message_request",
          "meta": {
            "kind": "string",
            "maxLength": 64
          }
        }
      ],
      "indexes": [
        {
          "name": "id",
          "type": "string",
          "childRelationshipType": "MessageRequest",
          "parentRelationshipType": "",
          "datatype": "VARCHAR",
          "primaryKey": true,
          "required": true,
          "description": "Unique identifier for the Slack workspace/team, provided by Slack API during OAuth installation. This is the primary key linking all workspace-specific configurations.",
          "defaultvalue": "",
          "example": "T01EXAMPLE123",
          "autoIncrement": false,
          "maxLength": "64",
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "workspace_message_request",
          "meta": {
            "kind": "string",
            "maxLength": 64
          }
        },
        {
          "name": "name",
          "type": "string",
          "childRelationshipType": "",
          "parentRelationshipType": "",
          "datatype": "VARCHAR",
          "primaryKey": false,
          "required": true,
          "description": "Human-readable display name of the Slack workspace as configured by workspace administrators. Used for identification and logging purposes.",
          "defaultvalue": "",
          "example": "Acme Corp Engineering",
          "autoIncrement": false,
          "maxLength": "255",
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "",
          "meta": {
            "kind": "string",
            "maxLength": 255
          }
        }
      ],
      "docs": {
        "name": "Workspace",
        "summary": "Configuration for workspace table",
        "version": "1.0.0"
      },
      "apis": {},
      "store": {
        "read": "redis",
        "write": "memory",
        "query": "redis",
        "projector": "redis"
      },
      "options": {
        "command": false,
        "read": "redis",
        "write": "memory",
        "query": "redis",
        "projector": "redis",
        "softDelete": true,
        "timestamps": true,
        "versioning": true,
        "logging": true,
        "auditing": true,
        "caching": true,
        "eventStreaming": false
      },
      "cancel": {
        "create": false,
        "update": false,
        "delete": false,
        "batch": false,
        "get": false
      },
      "redis": {
        "prefix": "",
        "version": "1.0",
        "category": "notification:slack-request.workspace.v1",
        "ttl": 3600,
        "hash": true,
        "aggregate": "workspace"
      },
      "eventstream": {
        "boundedContext": "notification",
        "aggregate": "workspace",
        "version": "v1",
        "stream": "notification.slackRequest.workspace",
        "createdEvent": "NotificationSlackRequestWorkspaceCreated.v1",
        "updatedEvent": "NotificationSlackRequestWorkspaceUpdated.v1",
        "deletedEvent": "NotificationSlackRequestWorkspaceDeleted.v1"
      },
      "permissions": {
        "bulk": [
          "update",
          "delete",
          "import"
        ],
        "adminOverride": true,
        "auditView": true,
        "custom": []
      },
      "domainName": "",
      "parentPath": []
    },
    {
      "name": "template",
      "description": "## 🧩 SlackTemplate\n\n### **Purpose**\n\nThe \\`SlackTemplate\\` aggregate defines reusable message templates that standardize the look and feel of Slack notifications. Templates are typically built using **Slack Block Kit** — Slack’s rich formatting system for interactive and visually appealing messages.\n\nThese templates can include placeholders (variables) for dynamic data, making them ideal for structured messages like approvals, alerts, and workflow completions.\n\n### **Responsibilities**\n\n* Define message layouts and content using Block Kit JSON.\n* Manage template metadata (e.g., name, description, version, and tenant).\n* Store variable definitions and validation rules.\n* Enable/disable templates per tenant for staged rollouts.\n* Emit events when templates are created, updated, or retired.\n\n### **Why It Matters**\n\n\\`SlackTemplate\\` enables **message consistency** and branding. Instead of ad-hoc message construction, all Slack notifications use predefined, validated templates — ensuring compliance, clarity, and maintainability.\n\n",
      "columns": [
        {
          "name": "code",
          "type": "string",
          "childRelationshipType": "MessageRequest",
          "parentRelationshipType": "",
          "datatype": "VARCHAR",
          "primaryKey": true,
          "required": true,
          "description": "Unique template identifier used for programmatic template selection. Must follow snake_case naming convention for consistency with application code.",
          "defaultvalue": "",
          "example": "payment_failure_alert",
          "autoIncrement": false,
          "maxLength": "64",
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "code_message_request",
          "meta": {
            "kind": "string",
            "maxLength": 64
          }
        },
        {
          "name": "workspace_id",
          "type": "string",
          "childRelationshipType": "",
          "parentRelationshipType": "",
          "datatype": "VARCHAR",
          "primaryKey": false,
          "required": true,
          "description": "Foreign key linking template to its workspace. Enables workspace-specific template customization and multi-tenant template isolation.",
          "defaultvalue": "",
          "example": "T01EXAMPLE123",
          "autoIncrement": false,
          "maxLength": "64",
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "",
          "meta": {
            "kind": "string",
            "maxLength": 64
          }
        },
        {
          "name": "name",
          "type": "string",
          "childRelationshipType": "",
          "parentRelationshipType": "",
          "datatype": "VARCHAR",
          "primaryKey": false,
          "required": true,
          "description": "User-friendly template name displayed in admin interfaces and template selection menus. Should clearly describe the template's purpose and usage context.",
          "defaultvalue": "",
          "example": "Payment Failure Alert",
          "autoIncrement": false,
          "maxLength": "255",
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "",
          "meta": {
            "kind": "string",
            "maxLength": 255
          }
        },
        {
          "name": "description",
          "type": "string",
          "childRelationshipType": "",
          "parentRelationshipType": "",
          "datatype": "TEXT",
          "primaryKey": false,
          "required": false,
          "description": "Detailed description of the template's purpose, when to use it, and any special considerations. Helps administrators choose appropriate templates for specific notification scenarios.",
          "defaultvalue": "",
          "example": "Alert template for payment processing failures requiring immediate attention",
          "autoIncrement": false,
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "",
          "meta": {
            "kind": "string",
            "maxLength": 65535
          }
        },
        {
          "name": "content_blocks",
          "type": "string",
          "childRelationshipType": "",
          "parentRelationshipType": "",
          "datatype": "TEXT",
          "primaryKey": false,
          "required": true,
          "description": "Slack Block Kit JSON structure defining the visual layout and interactive elements of the message. Supports rich formatting, buttons, and dynamic content replacement.",
          "defaultvalue": "",
          "example": "{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Payment Failed* \\n Transaction {{transactionId}} failed\"}}",
          "autoIncrement": false,
          "array": true,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "",
          "meta": {
            "kind": "string",
            "maxLength": 65535
          }
        },
        {
          "name": "variables",
          "type": "string",
          "childRelationshipType": "",
          "parentRelationshipType": "",
          "datatype": "TEXT",
          "primaryKey": false,
          "required": false,
          "description": "Array of variable names that can be dynamically replaced in the template content. Each variable corresponds to a placeholder in content_blocks using {{variableName}} syntax.",
          "defaultvalue": "",
          "example": "\"transactionId\", \"amount\", \"customerEmail\", \"errorCode\"",
          "autoIncrement": false,
          "array": true,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "",
          "meta": {
            "kind": "string",
            "maxLength": 65535
          }
        },
        {
          "name": "sample_payload",
          "type": "Record<string, unknown>",
          "childRelationshipType": "",
          "parentRelationshipType": "",
          "datatype": "JSON",
          "primaryKey": false,
          "required": false,
          "description": "Example data structure showing realistic values for all template variables. Used for template testing, preview generation, and developer documentation.",
          "defaultvalue": "",
          "example": "{\"transactionId\":\"TXN-EXAMPLE123\",\"amount\":\"$99.99\",\"customerEmail\":\"example@domain.com\",\"errorCode\":\"CARD_DECLINED\"}",
          "autoIncrement": false,
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "",
          "meta": {
            "kind": "json",
            "jsonShape": "object"
          }
        },
        {
          "name": "enabled",
          "type": "boolean",
          "childRelationshipType": "",
          "parentRelationshipType": "",
          "datatype": "BOOLEAN",
          "primaryKey": false,
          "required": true,
          "description": "Template availability toggle. Disabled templates cannot be used for new notifications but existing scheduled notifications will continue to use them.",
          "defaultvalue": "true",
          "example": "true",
          "autoIncrement": false,
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "",
          "meta": {
            "kind": "boolean"
          }
        }
      ],
      "relationships": [
        {
          "name": "code_message_request",
          "parentTable": "template",
          "parentColumn": {
            "name": "code",
            "type": "string",
            "childRelationshipType": "MessageRequest",
            "parentRelationshipType": "",
            "datatype": "VARCHAR",
            "primaryKey": true,
            "required": true,
            "description": "Unique template identifier used for programmatic template selection. Must follow snake_case naming convention for consistency with application code.",
            "defaultvalue": "",
            "example": "payment_failure_alert",
            "autoIncrement": false,
            "maxLength": "64",
            "array": false,
            "isPII": "",
            "parentRelationship": "",
            "childRelationship": "code_message_request",
            "meta": {
              "kind": "string",
              "maxLength": 64
            }
          },
          "childTable": "message_request",
          "childColumn": {
            "name": "template_code",
            "type": "string",
            "childRelationshipType": "",
            "parentRelationshipType": "Template",
            "datatype": "VARCHAR",
            "primaryKey": false,
            "required": true,
            "description": "Unique template identifier used for programmatic template selection. Must follow snake_case naming convention for consistency with application code.",
            "defaultvalue": "",
            "example": "payment_failure_alert",
            "autoIncrement": false,
            "maxLength": "64",
            "array": false,
            "isPII": "",
            "relationship": "one",
            "parentRelationship": "code_message_request",
            "childRelationship": "",
            "meta": {
              "kind": "string",
              "maxLength": 64
            }
          },
          "type": "one",
          "complex": true
        }
      ],
      "lines": [],
      "keys": [
        {
          "name": "code",
          "type": "string",
          "childRelationshipType": "MessageRequest",
          "parentRelationshipType": "",
          "datatype": "VARCHAR",
          "primaryKey": true,
          "required": true,
          "description": "Unique template identifier used for programmatic template selection. Must follow snake_case naming convention for consistency with application code.",
          "defaultvalue": "",
          "example": "payment_failure_alert",
          "autoIncrement": false,
          "maxLength": "64",
          "array": false,
          "isPII": "",
          "parentRelationship": "",
          "childRelationship": "code_message_request",
          "meta": {
            "kind": "string",
            "maxLength": 64
          }
        }
      ],
      "indexes": [],
      "docs": {
        "name": "Template",
        "summary": "Configuration for template table",
        "version": "1.0.0"
      },
      "apis": {},
      "store": {
        "read": "redis",
        "write": "memory",
        "query": "redis",
        "projector": "redis"
      },
      "options": {
        "command": false,
        "read": "redis",
        "write": "memory",
        "query": "redis",
        "projector": "redis",
        "softDelete": true,
        "timestamps": true,
        "versioning": true,
        "logging": true,
        "auditing": true,
        "caching": true,
        "eventStreaming": false
      },
      "cancel": {
        "create": false,
        "update": false,
        "delete": false,
        "batch": false,
        "get": false
      },
      "redis": {
        "prefix": "",
        "version": "1.0",
        "category": "notification:slack-request.template.v1",
        "ttl": 3600,
        "hash": true,
        "aggregate": "template"
      },
      "eventstream": {
        "boundedContext": "notification",
        "aggregate": "template",
        "version": "v1",
        "stream": "notification.slackRequest.template",
        "createdEvent": "NotificationSlackRequestTemplateCreated.v1",
        "updatedEvent": "NotificationSlackRequestTemplateUpdated.v1",
        "deletedEvent": "NotificationSlackRequestTemplateDeleted.v1"
      },
      "permissions": {
        "bulk": [
          "update",
          "delete",
          "import"
        ],
        "adminOverride": true,
        "auditView": true,
        "custom": []
      },
      "domainName": "",
      "parentPath": []
    }
  ],
  "relationships": [
    {
      "name": "code_message_request",
      "parentTable": "template",
      "parentColumn": {
        "name": "code",
        "type": "string",
        "childRelationshipType": "MessageRequest",
        "parentRelationshipType": "",
        "datatype": "VARCHAR",
        "primaryKey": true,
        "required": true,
        "description": "Unique template identifier used for programmatic template selection. Must follow snake_case naming convention for consistency with application code.",
        "defaultvalue": "",
        "example": "payment_failure_alert",
        "autoIncrement": false,
        "maxLength": "64",
        "array": false,
        "isPII": "",
        "parentRelationship": "",
        "childRelationship": "code_message_request",
        "meta": {
          "kind": "string",
          "maxLength": 64
        }
      },
      "childTable": "message_request",
      "childColumn": {
        "name": "template_code",
        "type": "string",
        "childRelationshipType": "",
        "parentRelationshipType": "Template",
        "datatype": "VARCHAR",
        "primaryKey": false,
        "required": true,
        "description": "Unique template identifier used for programmatic template selection. Must follow snake_case naming convention for consistency with application code.",
        "defaultvalue": "",
        "example": "payment_failure_alert",
        "autoIncrement": false,
        "maxLength": "64",
        "array": false,
        "isPII": "",
        "relationship": "one",
        "parentRelationship": "code_message_request",
        "childRelationship": "",
        "meta": {
          "kind": "string",
          "maxLength": 64
        }
      },
      "type": "one",
      "complex": true
    },
    {
      "name": "workspace_message_request",
      "parentTable": "workspace",
      "parentColumn": {
        "name": "id",
        "type": "string",
        "childRelationshipType": "MessageRequest",
        "parentRelationshipType": "",
        "datatype": "VARCHAR",
        "primaryKey": true,
        "required": true,
        "description": "Unique identifier for the Slack workspace/team, provided by Slack API during OAuth installation. This is the primary key linking all workspace-specific configurations.",
        "defaultvalue": "",
        "example": "T01EXAMPLE123",
        "autoIncrement": false,
        "maxLength": "64",
        "array": false,
        "isPII": "",
        "parentRelationship": "",
        "childRelationship": "workspace_message_request",
        "meta": {
          "kind": "string",
          "maxLength": 64
        }
      },
      "childTable": "message_request",
      "childColumn": {
        "name": "workspace_id",
        "type": "string",
        "childRelationshipType": "",
        "parentRelationshipType": "Workspace",
        "datatype": "VARCHAR",
        "primaryKey": false,
        "required": true,
        "description": "Unique identifier for the Slack workspace/team, provided by Slack API during OAuth installation. This is the primary key linking all workspace-specific configurations.",
        "defaultvalue": "",
        "example": "T01EXAMPLE123",
        "autoIncrement": false,
        "maxLength": "64",
        "array": false,
        "isPII": "",
        "relationship": "one",
        "parentRelationship": "workspace_message_request",
        "childRelationship": "",
        "meta": {
          "kind": "string",
          "maxLength": 64
        }
      },
      "type": "one",
      "complex": true
    }
  ],
  "documentation": {
    "name": "Core Slack Configuration",
    "description": "# 🧩 Core Slack Config — General Overview\n\nThe **Core Slack Config** service is part of the broader **Notification Bounded Context**, responsible for managing all configuration aspects required to send Slack notifications within the platform. It provides the infrastructure and domain logic that connects a tenant’s Slack workspace to the notification ecosystem, ensuring secure, structured, and compliant communication between services and Slack.\n\n---\n\n## 🎯 Purpose\n\nThe primary purpose of **Core Slack Config** is to manage the lifecycle of Slack-related configuration for each tenant. It defines *how*, *where*, and *under what conditions* Slack messages are sent. By maintaining configurations in a domain-driven, event-sourced model, the service guarantees auditability, tenant isolation, and consistency across all Slack-related operations.\n\n---\n\n## 🧱 Architectural Role\n\n**Core Slack Config** acts as the **configuration source of truth** for all Slack integrations in the system. It is not responsible for sending messages (that’s handled by the **Core Slack Execute** service), but instead manages the metadata, tokens, templates, and operational policies that determine how Slack notifications are constructed and authorized.\n\n### Key Roles:\n\n* Acts as the *control plane* for Slack notification configuration.\n* Provides secure storage and rotation for OAuth tokens and signing secrets.\n* Defines approved channels and message templates per workspace.\n* Publishes events consumed by other services (e.g., executors, auditors, or workflow engines).\n* Ensures compliance with security and audit policies via event sourcing.\n\n---\n\n## ⚙️ Core Components\n\n| Aggregate          | Description                                                                                                           |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------- |\n| **SlackWorkspace** | Represents a tenant’s Slack workspace connection, holding OAuth credentials, signing secrets, and workspace metadata. |\n| **SlackChannel**   | Defines the list of authorized channels and direct message endpoints available for message delivery.                  |\n| **SlackTemplate**  | Manages reusable message templates (text, block layouts, and variables) for structured notifications.                 |\n| **SlackAppConfig** | Contains global settings, retry/backoff parameters, logging preferences, and audit configurations.                    |\n\nEach aggregate is event-sourced and projected into Redis for fast reads. The system follows a **CQRS pattern**, separating command writes (EventStoreDB) from queries (Redis projections).\n\n---\n\n## 🧩 Data Flow Summary\n\n```\n[API Command] → [Use Case] → [ESDB Writer Repository] → [EventStoreDB]\n       ↓\n[Central Projection Service] → [Redis Snapshot] + [Redis Query Index]\n       ↓\n[Query API] → [Consumer Services / UI]\n```\n\nThis architecture provides full event auditability in **EventStoreDB**, real-time read performance in **Redis**, and flexible event-driven synchronization via **BullMQ** projectors.\n\n---\n\n## 🛡️ Security and Compliance\n\n* **Authentication:** Managed via Keycloak (OAuth2 / OpenID Connect).\n* **Authorization:** Governed by Open Policy Agent (OPA) Rego policies.\n* **Secret Storage:** Slack tokens and signing secrets are stored securely using Doppler or another approved secret manager.\n* **Auditability:** Every configuration change emits domain events stored in EventStoreDB, ensuring immutable history and traceability.\n\n---\n\n## 🚀 Example Use Cases\n\n| Use Case                | Description                                                                                                                        |\n| ----------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| **Tenant Onboarding**   | When a new tenant connects their Slack workspace, `SlackWorkspaceConfigured.v1` and `SlackAppConfigUpdated.v1` events are emitted. |\n| **Channel Management**  | Admins can link or disable channels for specific event types (e.g., approvals, alerts).                                            |\n| **Template Management** | Teams can create reusable message templates with placeholders for workflow data.                                                   |\n| **Policy Updates**      | Changing retry or logging settings emits `SlackAppConfigUpdated.v1`, allowing other services to adjust behavior dynamically.       |\n\n---\n\n## ✅ Benefits\n\n* **Event-Sourced Reliability:** Every change is versioned, replayable, and fully auditable.\n* **Tenant Isolation:** Each Slack workspace and channel configuration is scoped to a tenant.\n* **High Performance:** Read models are served from Redis with millisecond-level latency.\n* **Extensible Design:** Supports additional configuration layers (e.g., threads, attachments, Slack workflows) in future iterations.\n* **Integration Friendly:** Easily integrates with other notification channels (email, SMS, webhook) through consistent event naming and structure.\n\n---\n\n## 🧩 Summary\n\nThe **Core Slack Config** service provides the configuration backbone for all Slack-based notifications. It ensures that every message sent through Slack is:\n\n* Securely authenticated.\n* Delivered through approved channels.\n* Formatted using consistent templates.\n* Managed under auditable, tenant-aware policies.\n\nThis service is a critical component of the Notification Bounded Context, enabling robust, enterprise-grade Slack integration within a modern, event-driven architecture.\n"
  }
}