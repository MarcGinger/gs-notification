// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { SlackExecuteServiceConstants } from '../service-constants';
/**
 * Domain value object for Execute projection keys
 * Centralizes all key patterns to prevent duplication and ensure consistency
 * Follows DDD principle of explicit domain concepts
 */
export class ExecuteProjectionKeys {
  // EventStore DB patterns
  static readonly ESDB_BOUNDED_CONTEXT =
    SlackExecuteServiceConstants.BOUNDED_CONTEXT;
  static readonly ESDB_AGGREGATE_NAME = 'execute';
  static readonly ESDB_VERSION = 'v1';

  /**
   * Get EventStore stream prefix for individual streams
   * Format: <boundedContext>.<aggregate>.<version>
   * Example: slack-execute.execute.v1
   */
  static getEventStoreStreamPrefix(): string {
    return `${this.ESDB_BOUNDED_CONTEXT}.${this.ESDB_AGGREGATE_NAME}.${this.ESDB_VERSION}`;
  }

  /**
   * Get EventStore category projection pattern for catchup
   * Format: $ce-<boundedContext>.<aggregate>.<version>
   * Example: $ce-slack-execute.execute.v1
   */
  static getEventStoreCategoryPattern(): string {
    return `$ce-${this.getEventStoreStreamPrefix()}`;
  }

  /**
   * Get individual EventStore stream name for specific tenant and code
   * Format: <boundedContext>.<aggregate>.<version>-{tenant}-{code}
   * Example: slack-execute.execute.v1-tenant-12345
   */
  static getEventStoreStreamName(tenant: string, code: string): string {
    return `${this.getEventStoreStreamPrefix()}-${tenant}-${code}`;
  }

  /**
   * Extract tenant and code from EventStore stream name
   * Validates format: <boundedContext>.<aggregate>.<version>-{tenant}-{code}
   */
  static extractFromStreamName(
    streamName: string,
  ): { tenant: string; code: string } | null {
    const prefix = this.getEventStoreStreamPrefix();
    const pattern = new RegExp(
      `^${prefix.replace(/\./g, '\\.')}-([^-]+)-(.+)$`,
    );
    const match = streamName.match(pattern);
    if (!match) return null;

    const [, tenant, code] = match;
    return { tenant, code };
  }

  /**
   * Validate if stream name matches execute pattern
   */
  static isExecuteStream(streamName: string): boolean {
    return this.extractFromStreamName(streamName) !== null;
  }

  /**
   * Get stream pattern for tenant-specific catchup
   * Format: <boundedContext>.<aggregate>.<version>-{tenant}-*
   */
  static getTenantStreamPattern(tenant: string): string {
    return `${this.getEventStoreStreamPrefix()}-${tenant}-*`;
  }

  /**
   * Get global stream pattern for all tenants
   * Format: <boundedContext>.<aggregate>.<version>-*
   */
  static getGlobalStreamPattern(): string {
    return `${this.getEventStoreStreamPrefix()}-*`;
  }

  // Redis projection key patterns
  static readonly REDIS_KEY_PREFIX = 'notification:execute-projector';
  static readonly REDIS_INDEX_PREFIX = 'notification:execute-index';
  static readonly PROJECTOR_NAME = 'execute-projector';
  static readonly SUBSCRIPTION_GROUP = 'execute-projection';

  /**
   * Get Redis key for execute projection with cluster-safe hash tags
   * Format: notification:execute-projector:{tenantId}:execute:{code}
   */
  static getRedisExecuteKey(tenantId: string, code: string): string {
    return `${this.REDIS_KEY_PREFIX}:{${tenantId}}:execute:${code}`;
  }

  /**
   * Get Redis key for tenant-based execute index with cluster-safe hash tags
   * Format: notification:execute-projector:{tenantId}:execute-index
   */
  static getRedisTenantIndexKey(tenantId: string): string {
    return `${this.REDIS_KEY_PREFIX}:{${tenantId}}:execute-index`;
  }

  /**
   * Get Redis key for category-based execute index with cluster-safe hash tags
   * Format: notification:execute-index:{tenantId}:by_category:{category}
   */
  static getRedisCategoryIndexKey(tenantId: string, category: string): string {
    return `${this.REDIS_INDEX_PREFIX}:{${tenantId}}:by_category:${category}`;
  }

  /**
   * Get Redis key pattern for all executes in a tenant
   * Format: notification:execute-projector:{tenantId}:execute:*
   */
  static getRedisTenantExecutePattern(tenantId: string): string {
    return `${this.REDIS_KEY_PREFIX}:{${tenantId}}:execute:*`;
  }

  /**
   * Get Redis key pattern for all execute projections
   * Format: notification:execute-projector:*
   */
  static getRedisAllExecutesPattern(): string {
    return `${this.REDIS_KEY_PREFIX}:*`;
  }
}
