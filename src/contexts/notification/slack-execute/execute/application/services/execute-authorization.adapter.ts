// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Injectable } from '@nestjs/common';
import { ExecuteAuthorizationService } from './execute-authorization.service';
import { AuthorizationService } from 'src/shared/application/utils/use-case.runner';
import { Result, DomainError, err } from 'src/shared/errors';
import {
  ExecuteAuthContext,
  CrudOperation,
  BatchOperation,
} from '../types/execute-auth-context';
import { ExecuteErrors } from '../../domain/errors/execute.errors';

/**
 * Adapter that makes ExecuteAuthorizationService compatible with the generic AuthorizationService interface.
 * This allows execute use-cases to work with the runUseCaseWithSecurity function.
 *
 * Improvements:
 * - Type-safe operations with proper validation
 * - Structured ExecuteAuthContext instead of Record<string, any>
 * - Clear error handling for invalid operations
 */
@Injectable()
export class ExecuteAuthorizationAdapter
  implements AuthorizationService<ExecuteAuthContext>
{
  constructor(
    private readonly executeAuthorizationService: ExecuteAuthorizationService,
  ) {}

  async canCreateResource(
    userId: string,
    correlationId: string,
    context: ExecuteAuthContext,
  ): Promise<Result<boolean, DomainError>> {
    return this.executeAuthorizationService.canCreateExecute(
      userId,
      correlationId,
      context,
    );
  }

  async canReadResource(
    userId: string,
    resourceId: string,
    correlationId: string,
    context: ExecuteAuthContext,
  ): Promise<Result<boolean, DomainError>> {
    return this.executeAuthorizationService.canReadExecute(
      userId,
      resourceId,
      correlationId,
      context,
    );
  }

  async authorizeResourceOperation(
    userId: string,
    operation: string,
    correlationId: string,
    resourceId: string,
    fields?: string[],
    context?: ExecuteAuthContext,
  ): Promise<
    Result<
      {
        authorized: boolean;
        allowedFields?: string[];
        deniedFields?: string[];
      },
      DomainError
    >
  > {
    // Type-safe operation validation
    const allowedOperations = new Set<string>([
      'read',
      'create',
      'update',
      'delete',
    ]);
    if (!allowedOperations.has(operation)) {
      return err({
        ...ExecuteErrors.NOT_IMPLEMENTED,
        context: {
          ids: resourceId,
          userId,
          correlationId,
          operation,
          ...context,
        },
      });
    }

    const validOperation = operation as CrudOperation;
    return this.executeAuthorizationService.authorizeExecuteOperation(
      userId,
      validOperation,
      correlationId,
      resourceId,
      fields,
      context,
    );
  }

  /**
   * Batch authorization check for multiple executes.
   * Useful for list operations where you need to filter results.
   *
   * @param userId - User identifier
   * @param ids - Array of execute ids to authorize
   * @param correlationId - Request correlation ID
   * @param operation - Operation type (read, update, delete)
   * @param context - Execute authorization context
   * @returns Result containing authorized and denied execute ids
   */
  async authorizeExecuteList(
    userId: string,
    ids: string[],
    correlationId: string,
    operation: BatchOperation = 'read',
    context?: ExecuteAuthContext,
  ): Promise<Result<{ authorized: string[]; denied: string[] }, DomainError>> {
    return this.executeAuthorizationService.authorizeExecuteList(
      userId,
      ids,
      correlationId,
      operation,
      context,
    );
  }
}
