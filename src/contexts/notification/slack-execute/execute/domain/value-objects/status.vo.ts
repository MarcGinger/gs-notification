// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import {
  EnumVOInstance,
  createDisplayNameHelper,
  createEnumTypeGuards,
  createEnumVO,
  createEnumVOErrors,
  createStateTransitions,
} from 'src/shared/domain/value-objects';
import { Result, DomainError } from 'src/shared/errors';
import { ExecuteErrors } from '../errors/execute.errors';

// ============================================================================
// SINGLE SOURCE OF TRUTH
// ============================================================================

/**
 * ExecuteStatus allowed values
 * Canonical definition used across all layers (API, Domain, DB)
 */
export const ExecuteStatusValues = [
  'requested',
  'validated',
  'queued',
  'failed',
] as const;
export type ExecuteStatusValue = (typeof ExecuteStatusValues)[number];

// ============================================================================
// VALUE OBJECT - Domain Layer
// ============================================================================

/**
 * ExecuteStatus Value Object
 *
 * Provides validation, business rules, and rich domain behavior
 * for execute status enumerated values.
 *
 * @example
 * ```typescript
 * const status = ExecuteStatus.create('requested');
 * if (status.ok) {
 *   console.log(status.value.canTransitionTo('validated'));
 * }
 * ```
 */
export const ExecuteStatus = createEnumVO({
  name: 'ExecuteStatus',
  values: ExecuteStatusValues,

  errors: createEnumVOErrors(ExecuteErrors.INVALID_STATUS, 'ExecuteStatus'),
});

export type ExecuteStatus = EnumVOInstance<ExecuteStatusValue>;

// ============================================================================
// CONVENIENCE FACTORIES
// ============================================================================

export const createExecuteStatus = (value: ExecuteStatusValue | undefined) =>
  ExecuteStatus.create(value) as Result<ExecuteStatus, DomainError>;
export const executeStatusFrom = (value: unknown) =>
  ExecuteStatus.from(value) as Result<ExecuteStatus, DomainError>;

// ============================================================================
// BUSINESS LOGIC HELPERS - Domain Behavior
// ============================================================================

/**
 * Valid state transitions for execute status
 */
const EXECUTE_STATUS_TRANSITIONS = {
  requested: ['validated', 'queued', 'failed'] as const,
  validated: ['requested', 'queued', 'failed'] as const,
  queued: ['requested', 'validated', 'failed'] as const,
  failed: ['requested', 'validated', 'queued'] as const,
} as const;

/**
 * Display names for execute status values
 */
const EXECUTE_STATUS_DISPLAY_NAMES = {
  requested: 'Requested',
  validated: 'Validated',
  queued: 'Queued',
  failed: 'Failed',
} as const;

/**
 * State machine helpers for ExecuteStatus transitions
 */
const ExecuteStatusTransitions = createStateTransitions(
  EXECUTE_STATUS_TRANSITIONS,
);

/**
 * Type guards for ExecuteStatus values
 */
const ExecuteStatusGuards = createEnumTypeGuards(
  ExecuteStatusValues,
  'ExecuteStatus',
  (value, validValues) => ({
    ...ExecuteErrors.INVALID_STATUS,
    detail: `ExecuteStatus must be one of: ${validValues.join(', ')}, received: ${String(value)}`,
    context: { value, validValues },
  }),
);

/**
 * Display name helpers for ExecuteStatus
 */
const ExecuteStatusDisplay = createDisplayNameHelper(
  EXECUTE_STATUS_DISPLAY_NAMES,
);

/**
 * Business logic functions for ExecuteStatus
 */
export const ExecuteStatusLogic = {
  /**
   * Check if transition from one state to another is valid
   */
  canTransition: (from: ExecuteStatusValue, to: ExecuteStatusValue): boolean =>
    ExecuteStatusTransitions.canTransition(from, to),

  /**
   * Get all valid next states from current state
   */
  getValidTransitions: (
    from: ExecuteStatusValue,
  ): readonly ExecuteStatusValue[] =>
    ExecuteStatusTransitions.getValidTransitions(from),

  /**
   * Get human-readable display name
   */
  getDisplayName: (value: ExecuteStatusValue): string =>
    ExecuteStatusDisplay.getDisplayName(value),

  /**
   * Get all available values with metadata
   */
  getAllValues(): Array<{
    value: ExecuteStatusValue;
    displayName: string;
    validTransitions: readonly ExecuteStatusValue[];
  }> {
    return ExecuteStatusValues.map((value) => ({
      value,
      displayName: ExecuteStatusLogic.getDisplayName(value),
      validTransitions: ExecuteStatusLogic.getValidTransitions(value),
    }));
  },
} as const;

// ============================================================================
// TYPE GUARDS - Runtime Type Checking
// ============================================================================

/**
 * Type guard to check if value is valid ExecuteStatus
 */
export const isExecuteStatusValue = (
  value: unknown,
): value is ExecuteStatusValue => ExecuteStatusGuards.isValid(value);

/**
 * Assert that value is valid ExecuteStatus (throws if invalid)
 */
export const assertExecuteStatusValue = (
  value: unknown,
): asserts value is ExecuteStatusValue => ExecuteStatusGuards.assert(value);
