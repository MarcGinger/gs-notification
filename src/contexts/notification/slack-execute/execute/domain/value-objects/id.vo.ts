// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import {
  UuidVOInstance,
  createUuidVO,
  createUuidVOErrors,
} from 'src/shared/domain/value-objects';
import { ExecuteErrors } from '../errors/execute.errors';

/**
 * Id UUID Value Object
 * Validates RFC-4122 UUID (version=v4); normalize=lowercase.
 *
 * UUID VO Refinements (commented examples):
 *
 * Version-specific validation:
 * - UUID v4 (random): { version: 4, variant: 'rfc4122' }
 * - UUID v1 (timestamp): { version: 1, acceptTimestamp: true }
 * - UUID v5 (namespace): { version: 5, namespace: 'specific' }
 *
 * Format flexibility:
 * - Strict format: { acceptHyphenless: false, acceptBraced: false }
 * - Accept compact: { acceptHyphenless: true } // 32 chars no hyphens
 * - Accept braced: { acceptBraced: true } // {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}
 *
 * Business rules:
 * - Entity ID: { version: 4, required: true, normalize: 'lower' }
 * - External ref: { acceptHyphenless: true, normalize: 'upper' }
 * - System generated: { version: 4, allowGeneration: true }
 */
export const ExecuteId = createUuidVO({
  name: 'Id',
  required: true,
  version: 4,

  normalize: 'lowercase',

  // Optional: declarative refinements for advanced validation
  // refinements: [
  // ],

  errors: createUuidVOErrors(ExecuteErrors.INVALID_ID, 'Id'),
});

/** Public instance type for Id */
export type ExecuteId = UuidVOInstance;

// Convenience creators
export const createExecuteId = (v: string) => ExecuteId.create(v);
export const executeIdFrom = (v: unknown) => ExecuteId.from(v);
