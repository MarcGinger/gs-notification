// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { EntityIdBase } from 'src/shared/domain/entities';
import { Result, ok, err, DomainError } from 'src/shared/errors';
import { ExecuteSnapshotProps } from '../props';
import { ExecuteDomainState } from '../state';
import { ExecuteErrors } from '../errors/execute.errors';
import {
  ExecuteChannelId,
  ExecuteCreatedAt,
  ExecuteUpdatedAt,
  ExecuteVersion,
  ExecuteData,
  ExecuteId,
  ExecuteRecipient,
  ExecuteStatus,
  ExecuteStatusLogic,
  ExecuteStatusValue,
  ExecuteTemplateCode,
  ExecuteWorkspaceId,
  createExecuteStatus,
} from '../value-objects';

/**
 * Domain Entity: Execute
 *
 * Represents the core Execute entity in the notification domain.
 * Encapsulates execute data, identity, and basic entity behavior.
 *
 * This entity follows DDD principles:
 * - Identity: Id as unique identifier
 * - Immutability: Changes create new instances
 * - Encapsulation: Private state with controlled access
 * - Business validation: Domain rules enforced
 *
 * @domain Notification Context - Execute Entity
 * @layer Domain Entities
 */

/**
 * Execute Entity
 *
 * Core domain entity representing a execute in the notification.
 * Handles execute identity, validation, and state management.
 */
export class ExecuteEntity extends EntityIdBase<ExecuteDomainState, ExecuteId> {
  private static clock: { now: () => Date } = { now: () => new Date() };

  public static setClock(c: { now: () => Date }) {
    this.clock = c;
  }

  /**
   * Helper method to create updatedAt VO from date
   */
  private static createUpdatedAt(
    date?: Date,
  ): Result<ExecuteUpdatedAt, DomainError> {
    const targetDate = date || ExecuteEntity.clock.now();
    const result = ExecuteUpdatedAt.from(targetDate);
    if (!result.ok) {
      return err(result.error);
    }
    return ok(result.value);
  }

  /**
   * Helper method to create version VO from number
   */
  private static createVersion(
    versionNumber?: number,
    currentVersion?: ExecuteVersion,
  ): Result<ExecuteVersion, DomainError> {
    const targetVersion = versionNumber ?? currentVersion?.value ?? 1;
    const result = ExecuteVersion.from(targetVersion);
    if (!result.ok) {
      return err(result.error);
    }
    return ok(result.value);
  }

  /**
   * Helper method to create updated entity with common logic
   */
  private createUpdatedEntity(
    fieldUpdates: Partial<ExecuteDomainState>,
    updatedAt?: Date,
    version?: number,
  ): Result<ExecuteEntity, DomainError> {
    const updatedAtResult = ExecuteEntity.createUpdatedAt(updatedAt);
    if (!updatedAtResult.ok) {
      return err(updatedAtResult.error);
    }

    const versionResult = ExecuteEntity.createVersion(
      version,
      this.props.version,
    );
    if (!versionResult.ok) {
      return err(versionResult.error);
    }

    const updatedProps: ExecuteDomainState = {
      ...this.props,
      ...fieldUpdates,
      updatedAt: updatedAtResult.value,
      version: versionResult.value,
    };

    return ExecuteEntity.create(updatedProps);
  }

  private constructor(props: ExecuteDomainState) {
    super(props, props.id);
  }

  /**
   * Factory method to create a new execute entity
   *
   * @param props - Execute properties
   * @returns Result containing ExecuteEntity or DomainError
   */
  public static create(
    props: ExecuteDomainState,
  ): Result<ExecuteEntity, DomainError> {
    // Validate required properties
    const validationResult = ExecuteEntity.validate(props);
    if (validationResult.ok === false) {
      return err(validationResult.error);
    }

    return ok(new ExecuteEntity(props));
  }

  /**
   * Factory method to reconstitute a execute entity from persistence
   *
   * @param props - Execute properties from database
   * @returns ExecuteEntity instance
   */
  public static reconstitute(props: ExecuteDomainState): ExecuteEntity {
    return new ExecuteEntity(props);
  }

  /**
   * Factory method to reconstitute entity from snapshot
   *
   * @param snapshot - Execute snapshot properties
   * @returns Result containing ExecuteEntity or DomainError
   */
  public static fromSnapshot(
    snapshot: ExecuteSnapshotProps,
  ): Result<ExecuteEntity, DomainError> {
    const idResult = ExecuteId.from(snapshot.id);
    if (!idResult.ok) {
      return err(idResult.error);
    }
    const workspaceIdResult = ExecuteWorkspaceId.from(snapshot.workspaceId);
    if (!workspaceIdResult.ok) {
      return err(workspaceIdResult.error);
    }
    const channelIdResult = ExecuteChannelId.from(snapshot.channelId);
    if (!channelIdResult.ok) {
      return err(channelIdResult.error);
    }
    const templateCodeResult = ExecuteTemplateCode.from(snapshot.templateCode);
    if (!templateCodeResult.ok) {
      return err(templateCodeResult.error);
    }
    const recipientResult = ExecuteRecipient.from(snapshot.recipient);
    if (!recipientResult.ok) {
      return err(recipientResult.error);
    }
    const dataResult = ExecuteData.from(snapshot.data);
    if (!dataResult.ok) {
      return err(dataResult.error);
    }
    const statusResult = createExecuteStatus(snapshot.status);
    if (!statusResult.ok) {
      return err(statusResult.error);
    }
    const createdAtResult = ExecuteCreatedAt.from(snapshot.createdAt);
    if (!createdAtResult.ok) {
      return err(createdAtResult.error);
    }

    const updatedAtResult = ExecuteUpdatedAt.from(snapshot.updatedAt);
    if (!updatedAtResult.ok) {
      return err(updatedAtResult.error);
    }

    const versionResult = ExecuteVersion.from(snapshot.version);
    if (!versionResult.ok) {
      return err(versionResult.error);
    }

    const props: ExecuteDomainState = {
      id: idResult.value,
      workspaceId: workspaceIdResult.value,
      channelId: channelIdResult.value,
      templateCode: templateCodeResult.value,
      recipient: recipientResult.value,
      data: dataResult.value,
      status: statusResult.value,
      createdAt: createdAtResult.value,
      updatedAt: updatedAtResult.value,
      version: versionResult.value,
    };

    return ExecuteEntity.create(props);
  }

  /**
   * Validates execute entity properties
   *
   * @param props - Properties to validate
   * @returns Validation result
   */
  private static validate(
    props: ExecuteDomainState,
  ): Result<void, DomainError> {
    // Basic validation
    if (!props.id) {
      return err(ExecuteErrors.INVALID_ID_DATA);
    }
    if (!props.workspaceId) {
      return err(ExecuteErrors.INVALID_WORKSPACE_ID_DATA);
    }
    if (!props.channelId) {
      return err(ExecuteErrors.INVALID_CHANNEL_ID_DATA);
    }
    if (!props.templateCode) {
      return err(ExecuteErrors.INVALID_TEMPLATE_CODE_DATA);
    }

    return ok(undefined);
  }

  // ======================
  // Getters (Public API)
  // ======================

  public get id(): ExecuteId {
    return this.props.id;
  }

  public get workspaceId(): ExecuteWorkspaceId {
    return this.props.workspaceId;
  }

  public get channelId(): ExecuteChannelId {
    return this.props.channelId;
  }

  public get templateCode(): ExecuteTemplateCode {
    return this.props.templateCode;
  }

  public get recipient(): ExecuteRecipient | undefined {
    return this.props.recipient;
  }

  public get data(): ExecuteData | undefined {
    return this.props.data;
  }

  public get status(): ExecuteStatus | undefined {
    return this.props.status;
  }

  public get createdAt(): ExecuteCreatedAt {
    return this.props.createdAt;
  }

  public get updatedAt(): ExecuteUpdatedAt {
    return this.props.updatedAt;
  }

  public get version(): ExecuteVersion {
    return this.props.version;
  }

  // ======================
  // Simple Update Methods (No Business Logic)
  // ======================

  /**
   * Creates a new entity with updated workspaceId (pure state transition)
   *
   * @param workspaceId - New workspace_id value
   * @param updatedAt - Optional timestamp (uses clock if not provided)
   * @returns Result<ExecuteEntity, DomainError>
   */
  public withWorkspaceId(
    workspaceId: ExecuteWorkspaceId,
    updatedAt?: Date,
    version?: number,
  ): Result<ExecuteEntity, DomainError> {
    return this.createUpdatedEntity({ workspaceId }, updatedAt, version);
  }

  /**
   * Creates a new entity with updated channelId (pure state transition)
   *
   * @param channelId - New channel_id value
   * @param updatedAt - Optional timestamp (uses clock if not provided)
   * @returns Result<ExecuteEntity, DomainError>
   */
  public withChannelId(
    channelId: ExecuteChannelId,
    updatedAt?: Date,
    version?: number,
  ): Result<ExecuteEntity, DomainError> {
    return this.createUpdatedEntity({ channelId }, updatedAt, version);
  }

  /**
   * Creates a new entity with updated templateCode (pure state transition)
   *
   * @param templateCode - New template_code value
   * @param updatedAt - Optional timestamp (uses clock if not provided)
   * @returns Result<ExecuteEntity, DomainError>
   */
  public withTemplateCode(
    templateCode: ExecuteTemplateCode,
    updatedAt?: Date,
    version?: number,
  ): Result<ExecuteEntity, DomainError> {
    return this.createUpdatedEntity({ templateCode }, updatedAt, version);
  }

  /**
   * Creates a new entity with updated recipient (pure state transition)
   *
   * @param recipient - New recipient value
   * @param updatedAt - Optional timestamp (uses clock if not provided)
   * @returns Result<ExecuteEntity, DomainError>
   */
  public withRecipient(
    recipient: ExecuteRecipient,
    updatedAt?: Date,
    version?: number,
  ): Result<ExecuteEntity, DomainError> {
    return this.createUpdatedEntity({ recipient }, updatedAt, version);
  }

  /**
   * Creates a new entity with updated data (pure state transition)
   *
   * @param data - New data value
   * @param updatedAt - Optional timestamp (uses clock if not provided)
   * @returns Result<ExecuteEntity, DomainError>
   */
  public withData(
    data: ExecuteData,
    updatedAt?: Date,
    version?: number,
  ): Result<ExecuteEntity, DomainError> {
    return this.createUpdatedEntity({ data }, updatedAt, version);
  }

  /**
   * Creates a new entity with updated status (with basic transition validation)
   *
   * @param status - New status value
   * @param updatedAt - Optional timestamp (uses clock if not provided)
   * @returns Result<ExecuteEntity, DomainError>
   */
  public withStatus(
    status: ExecuteStatus,
    updatedAt?: Date,
    version?: number,
  ): Result<ExecuteEntity, DomainError> {
    // Basic validation - business rules handled by aggregate
    if (this.props.status) {
      // If current status exists, validate transition
      const currentStatus = this.props.status.value;
      const targetStatus = status.value;

      if (!ExecuteStatusLogic.canTransition(currentStatus, targetStatus)) {
        return err({
          ...ExecuteErrors.INVALID_STATUS_TRANSITION,
          context: {
            currentStatus,
            targetStatus,
            validTransitions:
              ExecuteStatusLogic.getValidTransitions(currentStatus),
          },
        });
      }
    }

    return this.createUpdatedEntity({ status }, updatedAt, version);
  }

  /**
   * Get valid next statuses from current state
   * @returns readonly ExecuteStatusValue[]
   */
  public getValidStatusTransitions(): readonly ExecuteStatusValue[] {
    // Get valid next statuses from current state
    if (!this.props.status) {
      return []; // No transitions possible if no current status
    }
    return ExecuteStatusLogic.getValidTransitions(this.props.status.value);
  }

  // ======================
  // Query Methods
  // ======================

  /**
   * Checks if two executes are the same entity
   *
   * @param other - Other execute to compare
   */
  public sameAs(other: ExecuteEntity): boolean {
    return this.props.id.equals(other.props.id);
  }

  /**
   * Gets a snapshot of current entity state for serialization
   */
  public toSnapshot(): ExecuteSnapshotProps {
    return {
      id: this.props.id.value,
      workspaceId: this.props.workspaceId.value,
      channelId: this.props.channelId.value,
      templateCode: this.props.templateCode.value,
      recipient: this.props.recipient?.value,
      data: this.props.data?.value,
      status: this.props.status?.value,
      createdAt: this.props.createdAt.value,
      updatedAt: this.props.updatedAt.value,
      version: this.props.version.value,
    };
  }

  /**
   * Gets the current domain state with value objects
   *
   * Provides access to the rich domain state for application layer
   * without requiring infrastructure mappers. Maintains clean architecture.
   *
   * @returns Current domain state with value objects
   */
  public getDomainState(): ExecuteDomainState {
    return this.props;
  }
}
