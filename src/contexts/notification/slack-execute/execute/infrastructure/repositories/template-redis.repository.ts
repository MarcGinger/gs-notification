// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Injectable, Inject } from '@nestjs/common';
import { Redis } from 'ioredis';
import { CacheMetricsCollector } from 'src/shared/infrastructure/projections/cache-optimization';
import { APP_LOGGER, Log, componentLogger, Logger } from 'src/shared/logging';
import { CorrelationUtil } from 'src/shared/utilities/correlation.util';
import { Clock, CLOCK } from 'src/shared/infrastructure/time';
import {
  RepositoryLoggingUtil,
  RepositoryLoggingConfig,
  handleRepositoryError,
  RepositoryOptions,
  isString,
  safeParseJSON,
  safeParseJSONArray,
} from 'src/shared/infrastructure/repositories';
import { Result, DomainError, err, ok } from 'src/shared/errors';
import { Option } from 'src/shared/domain/types';
import { ActorContext } from 'src/shared/application/context';
import { RepositoryErrorFactory } from 'src/shared/domain/errors/repository.error';
import { SLACK_EXECUTE_DI_TOKENS } from '../../../slack-execute.constants';
import { ITemplateReader, TemplateReference } from '../../application/ports';

/**
 * Template Reader Repository - Redis Implementation
 *
 * Bounded Context: Notification/Execute
 * Handles template reference data lookups for FK validation in the Execute context using Redis projections
 * as the data source with cluster-safe operations.
 *
 * Benefits:
 * - High-performance Redis backend
 * - Cluster-safe operations with hash tags
 * - Version hint optimization for cache efficiency
 * - Maintains same interface as SQL-based implementation
 * - Comprehensive logging and error handling
 *
 * @domain Notification Context - Execute Template Reader Repository (Redis)
 * @layer Infrastructure
 * @pattern Cross-Context Reference Reader + Redis Projector
 */
@Injectable()
export class TemplateReaderRepository implements ITemplateReader {
  private readonly logger: Logger;
  private readonly loggingConfig: RepositoryLoggingConfig;
  private readonly metricsCollector = new CacheMetricsCollector();

  constructor(
    @Inject(APP_LOGGER) baseLogger: Logger,
    @Inject(CLOCK) private readonly clock: Clock,
    @Inject(SLACK_EXECUTE_DI_TOKENS.IO_REDIS)
    private readonly redis: Redis,
  ) {
    this.loggingConfig = {
      serviceName: 'ExecuteConfigService',
      component: 'TemplateReaderRepository',
    };
    this.logger = componentLogger(baseLogger, this.loggingConfig.component);

    Log.info(
      this.logger,
      'TemplateReaderRepository initialized with Redis backend',
      {
        component: this.loggingConfig.component,
        redisStatus: this.redis.status,
        clusterSafe: true,
        cacheOptimized: true,
      },
    );
  }

  /**
   * Generate cluster-safe Redis keys with hash tags for locality
   * Uses same pattern as TemplateProjector for consistency
   */
  private generateTemplateKey(tenantId: string, code: string): string {
    // âœ… Hash-tags ensure key routes to same Redis Cluster slot as projector
    return `notification:template-projector:{${tenantId}}:template:${code}`;
  }

  /**
   * Parse Redis hash data into TemplateReference
   */
  private parseRedisHashToTemplate(
    hashData: Record<string, string>,
  ): TemplateReference | null {
    try {
      if (!hashData || Object.keys(hashData).length === 0) {
        return null;
      }

      // Check for soft deletion
      if (hashData.deletedAt) {
        return null;
      }

      // Parse JSON fields using safeParseJSON utility
      const samplePayload =
        safeParseJSON<Record<string, unknown>>(
          hashData.samplePayload,
          'samplePayload',
        ) || {};

      // Extract fields directly from hash data
      return {
        code: hashData.code,
        workspaceId: hashData.workspaceId,
        name: hashData.name,
        description: hashData.description || undefined,
        contentBlocks: safeParseJSONArray(
          hashData.contentBlocks,
          'contentBlocks',
          isString,
        ),
        variables: safeParseJSONArray(
          hashData.variables,
          'variables',
          isString,
        ),
        samplePayload,
        enabled: hashData.enabled === 'true',
      };
    } catch (error) {
      Log.error(
        this.logger,
        'Failed to parse Redis hash data to TemplateReference',
        {
          method: 'parseRedisHashToTemplate',
          error: (error as Error).message,
          code: hashData?.code,
        },
      );
      return null;
    }
  }

  /**
   * Helper to create consistent logging context using shared utilities
   */
  private createLogContext(
    operation: string,
    correlationId: string,
    actor: ActorContext,
    additionalContext?: Record<string, unknown>,
  ): Record<string, unknown> {
    return RepositoryLoggingUtil.createLogContext(
      this.loggingConfig,
      this.clock,
      operation,
      correlationId,
      actor,
      additionalContext,
    );
  }

  /**
   * Helper to assess operation risk level using shared utilities
   */
  private assessOperationRisk(operation: string): 'LOW' | 'MEDIUM' | 'HIGH' {
    return RepositoryLoggingUtil.assessOperationRisk(operation);
  }

  /**
   * Find valid Template Codes for Template configuration
   * @param actor - The authenticated user context
   * @param options - Optional repository options (correlation ID, timeout, etc.)
   * @returns Result containing available Template Codes
   */
  async findValidTemplateCodes(
    actor: ActorContext,
    options?: RepositoryOptions,
  ): Promise<Result<string[], DomainError>> {
    const operation = 'findValidTemplateCodes';
    const riskLevel = this.assessOperationRisk(operation);
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('template-list-codes');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      riskLevel,
      customCorrelationId: !!options?.correlationId,
      source: options?.source,
      requestId: options?.requestId,
      dataSource: 'redis-projector',
    });

    // Validate actor context with enhanced security logging
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) return err(validation.error);

    // Guard tenant explicitly
    if (!actor.tenantId) {
      return err(
        RepositoryErrorFactory.validationError('tenantId', 'Missing tenant id'),
      );
    }

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      { queryType: 'reference_lookup', scope: 'redis_projection' },
    );

    try {
      Log.debug(this.logger, 'Finding valid template codes in Redis', {
        ...logContext,
        queryDetails: {
          scope: 'redis_keys',
          method: 'redis.scan',
          pattern: `template-projector:{${actor.tenantId}}:template:*`,
          clusterSafe: true,
        },
      });

      // Use Redis SCAN to find all template keys for the tenant
      const pattern = `template-projector:{${actor.tenantId}}:template:*`;
      const codes: string[] = [];
      const scanIterator = this.redis.scanStream({
        match: pattern,
        count: 100,
      });

      for await (const keys of scanIterator) {
        for (const key of keys as string[]) {
          // Extract code from key pattern: template-projector:{tenantId}:template:{ code }
          const keyParts = key.split(':');
          if (keyParts.length === 4) {
            const code = keyParts[3];
            // Check if channel is not soft-deleted
            const deletedAt = await this.redis.hget(key, 'deletedAt');
            if (!deletedAt) {
              codes.push(code);
            }
          }
        }
      }

      // Sort the codes for consistent ordering
      codes.sort((a, b) => a.localeCompare(b));
      // Log query metrics using shared utility
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: codes.length,
          dataQuality: codes.length > 0 ? 'good' : 'empty',
          sampleData: codes.slice(0, 5),
        },
      );

      return ok(codes);
    } catch (error) {
      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'HIGH',
      );

      // Handle and return the classified error using shared utility
      return handleRepositoryError(error);
    }
  }

  /**
   * Find Template configuration by Template code
   * @param actor - The authenticated user context
   * @param code - The Template code to lookup
   * @param options - Optional repository options (correlation ID, timeout, caching, etc.)
   * @returns Result containing Template configuration or null if not found
   */
  async findTemplateByCode(
    actor: ActorContext,
    code: string,
    options?: RepositoryOptions,
  ): Promise<Result<Option<TemplateReference>, DomainError>> {
    const operation = 'findTemplateByCode';
    const riskLevel = this.assessOperationRisk(operation);
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('template-find-by-code');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      riskLevel,
      targetCode: code,
      customCorrelationId: !!options?.correlationId,
      source: options?.source,
      requestId: options?.requestId,
      dataSource: 'redis-projector',
    });

    try {
      // Enhanced validation with security logging using shared utilities
      const actorValidation = RepositoryLoggingUtil.validateActorContext(
        this.logger,
        actor,
        logContext,
      );

      if (!actorValidation.ok) return err(actorValidation.error);

      // Guard tenant explicitly
      if (!actor.tenantId) {
        return err(
          RepositoryErrorFactory.validationError(
            'tenantId',
            'Missing tenant id',
          ),
        );
      }

      // Enhanced input validation
      if (!code) {
        Log.warn(this.logger, 'Invalid template code provided', {
          ...logContext,
          validationError: 'INVALID_TEMPLATE_CODE',
          inputValidation: 'failed',
        });
        return err(
          RepositoryErrorFactory.validationError(
            'Template code is required',
            'INVALID_TEMPLATE_CODE',
          ),
        );
      }

      RepositoryLoggingUtil.logAuthorizationSuccess(
        this.logger,
        'Template lookup',
        logContext,
        {
          dataAccess: 'read',
          targetCode: code,
        },
      );

      // Fetch from Redis using cluster-safe key
      const redisKey = this.generateTemplateKey(actor.tenantId, code);
      const hashData = await this.redis.hgetall(redisKey);

      if (!hashData || Object.keys(hashData).length === 0) {
        RepositoryLoggingUtil.logQueryMetrics(
          this.logger,
          'Template lookup',
          logContext,
          {
            resultCount: 0,
            dataQuality: 'empty',
          },
        );
        return ok(Option.none());
      }

      const template = this.parseRedisHashToTemplate(hashData);
      if (!template) {
        return ok(Option.none());
      }

      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        'Template lookup',
        logContext,
        {
          resultCount: 1,
          dataQuality: 'good',
          sampleData: {
            code: template.code,
            name: template.name,
            enabled: template.enabled,
          },
        },
      );

      return ok(Option.some(template));
    } catch (error) {
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        'Template lookup',
        logContext,
        error as Error,
        'HIGH',
      );

      // Handle and return the classified error using shared utility
      return handleRepositoryError(error);
    }
  }
}
