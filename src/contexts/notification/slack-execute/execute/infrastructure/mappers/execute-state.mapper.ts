// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * Execute State Infrastructure Mappers
 *
 * Bidirectional mapping between pure VO domain state and primitive persistence snapshot.
 * Handles conversion between rich domain objects and raw database data.
 */

import {
  ExecuteCreatedAt,
  ExecuteUpdatedAt,
  ExecuteVersion,
  ExecuteId,
  ExecuteWorkspaceId,
  ExecuteChannelId,
  ExecuteTemplateCode,
  ExecuteRecipient,
  ExecuteData,
  createExecuteStatus,
} from '../../domain/value-objects';
import { Result, ok, err, DomainError } from 'src/shared/errors';
import { ExecuteDomainState } from '../../domain/state/execute.state';
import { ExecuteSnapshotProps } from '../../domain/props';

/**
 * Infrastructure State Mapper
 *
 * Handles conversion between domain VOs and persistence primitives.
 * This is where primitive obsession is eliminated - converting between
 * rich domain objects and raw database data.
 */
export class ExecuteStateMapper {
  /**
   * Convert primitive persistence snapshot to rich domain state
   *
   * @param snapshot - Raw database/persistence data
   * @returns Rich domain state with VOs or error
   */
  static toDomain(
    snapshot: ExecuteSnapshotProps,
  ): Result<ExecuteDomainState, DomainError> {
    const errors: Array<{ field: string; error: DomainError }> = [];

    // Helper function to validate and collect errors
    const validateField = <T>(
      fieldName: string,
      result: Result<T, DomainError>,
    ): T | null => {
      if (!result.ok) {
        errors.push({ field: fieldName, error: result.error });
        return null;
      }
      return result.value;
    };

    // Convert each primitive to its corresponding VO with error collection
    const id = validateField('id', ExecuteId.from(snapshot.id));
    const workspaceId = validateField(
      'workspaceId',
      ExecuteWorkspaceId.from(snapshot.workspaceId),
    );
    const channelId = validateField(
      'channelId',
      ExecuteChannelId.from(snapshot.channelId),
    );
    const templateCode = validateField(
      'templateCode',
      ExecuteTemplateCode.from(snapshot.templateCode),
    );
    const recipient = snapshot.recipient
      ? validateField('recipient', ExecuteRecipient.from(snapshot.recipient))
      : undefined;
    const data = snapshot.data
      ? validateField('data', ExecuteData.from(snapshot.data))
      : undefined;
    const status = validateField(
      'status',
      createExecuteStatus(snapshot.status),
    );
    const version = validateField(
      'version',
      ExecuteVersion.from(snapshot.version),
    );
    const createdAt = validateField(
      'createdAt',
      ExecuteCreatedAt.from(snapshot.createdAt),
    );
    const updatedAt = validateField(
      'updatedAt',
      ExecuteUpdatedAt.from(snapshot.updatedAt),
    );

    // If any validations failed, return aggregated error
    if (errors.length > 0) {
      return err({
        code: 'EXECUTE.MAPPER_VALIDATION_FAILED',
        title: 'Domain State Mapping Failed',
        detail: `Failed to create domain state from persistence snapshot. ${errors.length} validation error(s) occurred.`,
        category: 'infrastructure',
        retryable: false,
        context: {
          validationErrors: errors.map((e) => ({
            field: e.field,
            errorCode: e.error.code,
            errorMessage: e.error.detail,
          })),
          snapshotCode: snapshot.id,
        },
      });
    }

    // All validations passed, construct the rich domain state
    const domainState: ExecuteDomainState = {
      id: id!,
      workspaceId: workspaceId!,
      channelId: channelId!,
      templateCode: templateCode!,
      recipient: recipient || undefined,
      data: data || undefined,
      status: status || undefined,
      version: version!,
      createdAt: createdAt!,
      updatedAt: updatedAt!,
    };

    return ok(domainState);
  }

  /**
   * Convert rich domain state to primitive persistence snapshot
   *
   * @param domainState - Rich domain state with VOs
   * @returns Raw persistence data for database storage
   */
  static toSnapshot(domainState: ExecuteDomainState): ExecuteSnapshotProps {
    return {
      // Extract primitive values from VOs
      id: domainState.id.value,
      workspaceId: domainState.workspaceId.value,
      channelId: domainState.channelId.value,
      templateCode: domainState.templateCode.value,
      recipient: domainState.recipient?.value,
      data: domainState.data?.value,
      status: domainState.status?.value,
      version: domainState.version.value,
      createdAt: domainState.createdAt.value,
      updatedAt: domainState.updatedAt.value,
    };
  }
}
