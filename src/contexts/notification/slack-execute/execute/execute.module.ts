// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Module } from '@nestjs/common';
import { SlackExecuteSharedModule } from '../slack-execute-shared.module';
import { ExecuteController } from './interface/http/controllers';
import {
  ExecuteApplicationService,
  ExecuteAuthorizationService,
  ExecuteAuthorizationAdapter,
  ExecuteForeignKeyValidatorService,
} from './application/services';
import {
  ICreateExecuteUseCase,
  CreateExecuteUseCase,
  IUpdateExecuteUseCase,
  UpdateExecuteUseCase,
  IGetExecuteUseCase,
  GetExecuteUseCase,
} from './application/use-cases';

// import { IExecuteRepository } from './application/ports';
import {
  ExecuteQueryRepository,
  ExecuteReaderRepository,
  ExecuteWriterRepository,
  TemplateReaderRepository,
  WorkspaceReaderRepository,
  ChannelReaderRepository,
} from './infrastructure/repositories';

// Tokens for injection - imported directly from port files
import {
  EXECUTE_READER_TOKEN,
  EXECUTE_WRITER_TOKEN,
  TEMPLATE_REFERENCE_READER_TOKEN,
  WORKSPACE_REFERENCE_READER_TOKEN,
  CHANNEL_REFERENCE_READER_TOKEN,
  EXECUTE_QUERY_TOKEN,
} from './application/ports';
@Module({
  imports: [
    SlackExecuteSharedModule, // Provides all common infrastructure and services
  ],
  controllers: [ExecuteController],
  providers: [
    // Repository implementations with tokens (before services that depend on them)
    {
      provide: EXECUTE_READER_TOKEN,
      useClass: ExecuteReaderRepository,
    },
    {
      provide: EXECUTE_WRITER_TOKEN,
      useClass: ExecuteWriterRepository,
    },
    {
      provide: EXECUTE_QUERY_TOKEN,
      useClass: ExecuteQueryRepository,
    },

    // Bounded Context Reader Repositories
    {
      provide: TEMPLATE_REFERENCE_READER_TOKEN,
      useClass: TemplateReaderRepository,
    },
    {
      provide: WORKSPACE_REFERENCE_READER_TOKEN,
      useClass: WorkspaceReaderRepository,
    },
    {
      provide: CHANNEL_REFERENCE_READER_TOKEN,
      useClass: ChannelReaderRepository,
    },

    // Services that depend on repositories
    ExecuteApplicationService,
    ExecuteAuthorizationService,
    ExecuteAuthorizationAdapter,
    ExecuteForeignKeyValidatorService,

    // Use case implementations
    {
      provide: ICreateExecuteUseCase,
      useClass: CreateExecuteUseCase,
    },
    {
      provide: IUpdateExecuteUseCase,
      useClass: UpdateExecuteUseCase,
    },
    {
      provide: IGetExecuteUseCase,
      useClass: GetExecuteUseCase,
    },
  ],
  exports: [
    // Repository tokens for external module consumption
    EXECUTE_READER_TOKEN,
    EXECUTE_WRITER_TOKEN,
    EXECUTE_QUERY_TOKEN,
    // Bounded Context Reader tokens
    TEMPLATE_REFERENCE_READER_TOKEN,
    WORKSPACE_REFERENCE_READER_TOKEN,
    CHANNEL_REFERENCE_READER_TOKEN,
  ],
})
export class ExecuteModule {}
