// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import {
  Controller,
  Get,
  Post,
  Body,
  Put,
  HttpStatus,
  HttpCode,
  Param,
  UseInterceptors,
  UseGuards,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiCreatedResponse,
  ApiBody,
  ApiHeader,
  ApiParam,
  ApiOkResponse,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { IdempotencyKey } from 'src/shared/interfaces/decorators';
import { IdempotencyKeyPipe } from 'src/shared/interfaces/pipes';
import { ExecuteApplicationService } from '../../../application/services';
import { CurrentUser, IUserToken, JwtAuthGuard } from 'src/shared/security';
import {
  DetailExecuteResponse,
  CreateExecuteRequest,
  UpdateExecuteRequest,
} from '../../../application/dtos';
import { Result, ResultInterceptor, DomainError } from 'src/shared/errors';
import {
  ExecuteReadResource,
  ExecuteCreateResource,
  ExecuteUpdateResource,
} from '../../execute.resource';
import { ApiCommonErrors } from 'src/shared/interfaces/http';

@Controller('executes')
@ApiTags('Executes')
@ApiBearerAuth()
@UseGuards(JwtAuthGuard)
@UseInterceptors(ResultInterceptor)
export class ExecuteController {
  constructor(
    private readonly executeApplicationService: ExecuteApplicationService,
  ) {}

  @Get(':id')
  @ExecuteReadResource()
  @ApiOperation({
    summary: 'Get Execute by ID',
    description:
      'Retrieves a single Execute by its unique identifier. Requires READ permission (LOW risk).',
  })
  @ApiParam({
    name: 'id',
    type: 'string',
    description: 'Execute unique identifier (UUID format)',
    format: 'uuid',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  @ApiOkResponse({
    description: 'Execute details retrieved successfully',
    type: DetailExecuteResponse,
  })
  @ApiCommonErrors()
  async get(
    @CurrentUser() user: IUserToken,
    @Param('id') id: string,
  ): Promise<Result<DetailExecuteResponse, DomainError>> {
    const result = await this.executeApplicationService.getExecuteById(
      user,
      id,
    );

    return result;
  }
  // ========================================
  // Core CRUD Operations
  // ========================================

  @Post()
  @ExecuteCreateResource()
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: 'Create a new Execute',
    description:
      'Creates a new Execute in the catalog. Requires CREATE permission (MEDIUM risk).',
  })
  @ApiHeader({
    name: 'Idempotency-Key',
    required: false,
    description:
      'Ensures the request is processed only once. Accepts both Idempotency-Key and x-idempotency-key headers.',
  })
  @ApiCreatedResponse({
    type: DetailExecuteResponse,
    description: 'Execute successfully created',
    headers: {
      Location: {
        description: 'URI of the newly created resource',
        schema: {
          type: 'string',
          example: '/executes/123e4567-e89b-12d3-a456-426614174000',
        },
      },
    },
  })
  @ApiCommonErrors()
  @ApiBody({ type: CreateExecuteRequest })
  async create(
    @CurrentUser() user: IUserToken,
    @Body() createExecuteRequest: CreateExecuteRequest,
    @IdempotencyKey(new IdempotencyKeyPipe())
    idempotencyKey: string | undefined,
  ): Promise<Result<DetailExecuteResponse, DomainError>> {
    // idempotencyKey is validated by the IdempotencyKeyPipe

    // Call service with options including idempotency key
    const result = await this.executeApplicationService.createExecute(
      user,
      createExecuteRequest,
      {
        idempotencyKey,
      },
    );

    return result;
  }

  @Put(':id')
  @ExecuteUpdateResource()
  @ApiOperation({
    summary: 'Update a Execute',
    description:
      'Updates an existing Execute with new data. Supports partial updates. Requires UPDATE permission (MEDIUM risk).',
  })
  @ApiParam({
    name: 'id',
    type: 'string',
    description: 'Execute unique identifier (UUID format)',
    format: 'uuid',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: 'Execute updated successfully',
    type: DetailExecuteResponse,
  })
  @ApiCommonErrors({
    include422: true,
    extra: [
      { status: 429, description: 'Too Many Requests' },
      { status: 503, description: 'Upstream dependency unavailable' },
    ],
  })
  @ApiBody({
    type: UpdateExecuteRequest,
    description: 'Execute update data. Only provided fields will be updated.',
  })
  async update(
    @CurrentUser() user: IUserToken,
    @Param('id') id: string,
    @Body() updateExecuteRequest: UpdateExecuteRequest,
  ): Promise<Result<DetailExecuteResponse, DomainError>> {
    const result = await this.executeApplicationService.updateExecute(
      user,
      id,
      updateExecuteRequest,
    );

    return result;
  }
}
