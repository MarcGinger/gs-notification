// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Module } from '@nestjs/common';
import { SlackExecuteSharedModule } from '../slack-execute-shared.module';
import { ChannelController } from './interface/http/controllers';
import {
  ChannelApplicationService,
  ChannelAuthorizationService,
  ChannelAuthorizationAdapter,
} from './application/services';
import {
  IUpsertChannelUseCase,
  UpsertChannelUseCase,
  IGetChannelUseCase,
  GetChannelUseCase,
} from './application/use-cases';

// import { IChannelRepository } from './application/ports';
import {
  ChannelQueryRepository,
  ChannelReaderRepository,
  ChannelWriterRepository,
} from './infrastructure/repositories';

// Tokens for injection - imported directly from port files
import {
  CHANNEL_READER_TOKEN,
  CHANNEL_WRITER_TOKEN,
  CHANNEL_QUERY_TOKEN,
} from './application/ports';
@Module({
  imports: [
    SlackExecuteSharedModule, // Provides all common infrastructure and services
  ],
  controllers: [ChannelController],
  providers: [
    // Repository implementations with tokens (before services that depend on them)
    {
      provide: CHANNEL_READER_TOKEN,
      useClass: ChannelReaderRepository,
    },
    {
      provide: CHANNEL_WRITER_TOKEN,
      useClass: ChannelWriterRepository,
    },
    {
      provide: CHANNEL_QUERY_TOKEN,
      useClass: ChannelQueryRepository,
    },

    // Services that depend on repositories
    ChannelApplicationService,
    ChannelAuthorizationService,
    ChannelAuthorizationAdapter,

    // Use case implementations
    {
      provide: IUpsertChannelUseCase,
      useClass: UpsertChannelUseCase,
    },
    {
      provide: IGetChannelUseCase,
      useClass: GetChannelUseCase,
    },
  ],
  exports: [
    // Repository tokens for external module consumption
    CHANNEL_READER_TOKEN,
    CHANNEL_WRITER_TOKEN,
    CHANNEL_QUERY_TOKEN,
  ],
})
export class ChannelModule {}
