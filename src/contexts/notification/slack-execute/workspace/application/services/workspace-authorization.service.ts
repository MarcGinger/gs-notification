// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

// Framework imports
import { Injectable, Logger, Inject } from '@nestjs/common';

// Shared utilities and infrastructure
import { Result, DomainError, ok, err, withContext } from 'src/shared/errors';
import {
  AuthorizationPort,
  buildAuthorizationContext,
} from 'src/shared/security/authorization.port';
import type { AuthorizationRequest } from 'src/shared/security/authorization.port';

// Domain types and errors
import { WorkspacePermission } from '../../domain/permissions/workspace.permissions';
import { WorkspaceErrors } from '../../domain/errors/workspace.errors';
import { SLACK_EXECUTE_DI_TOKENS } from '../../../slack-execute.constants';

// Application layer
import { WorkspaceFieldPermissionMatrix } from '../security/workspace-field-permission-matrix';
import {
  WorkspaceAuthContext,
  CrudOperation,
  BatchOperation,
} from '../types/workspace-auth-context';

/**
 * Domain-specific authorization service for Workspace operations.
 * Provides Workspace-aware convenience methods and field-level permission checking.
 *
 * Improvements:
 * - Uses typed WorkspaceAuthContext for better ABAC support
 * - Includes tenant/role information in actor context
 * - Optimized field-level checks with anyOf pattern
 * - Proper error handling with domain error factories
 * - Chunked batch processing for performance
 */
@Injectable()
export class WorkspaceAuthorizationService {
  private readonly logger = new Logger(WorkspaceAuthorizationService.name);

  constructor(
    @Inject(SLACK_EXECUTE_DI_TOKENS.AUTHORIZATION_SERVICE)
    private readonly authorizationPort: AuthorizationPort<WorkspacePermission>,
  ) {}

  /**
   * Helper to create consistent logging context
   */
  private createLogContext(
    operation: string,
    correlationId: string,
    userId?: string,
    additionalContext?: Record<string, unknown>,
  ): Record<string, unknown> {
    return {
      serviceName: 'WorkspaceAuthorizationService',
      component: 'WorkspaceAuthorizationService',
      operation,
      correlationId,
      userId,
      ...additionalContext,
    };
  }

  /**
   * Check if user can read a specific workspace
   */
  async canReadWorkspace(
    userId: string,
    workspaces: string,
    correlationId: string,
    context?: WorkspaceAuthContext,
  ): Promise<Result<boolean, DomainError>> {
    if (!workspaces) {
      return err(
        withContext(WorkspaceErrors.PERMISSION_DENIED, {
          workspaces: workspaces || '',
          userId,
          correlationId,
          operation: 'read',
        }),
      );
    }

    const actor = {
      userId,
      tenantId: context?.tenantId,
      roles: context?.roles,
    };

    const request: AuthorizationRequest<WorkspacePermission> = {
      domain: 'workspace',
      permissions: [WorkspacePermission.DOMAIN_WORKSPACE_READ],
      actor,
      resource: { type: 'workspace', id: workspaces },
      context: buildAuthorizationContext(correlationId, {
        metadata: context?.metadata,
      }),
    };

    const result = await this.authorizationPort.check(request);
    return result.ok ? ok(result.value.allowed) : err(result.error);
  }

  /**
   * Check if user can create workspaces
   */
  async canCreateWorkspace(
    userId: string,
    correlationId: string,
    context?: WorkspaceAuthContext,
  ): Promise<Result<boolean, DomainError>> {
    const actor = {
      userId,
      tenantId: context?.tenantId,
      roles: context?.roles,
    };

    const request: AuthorizationRequest<WorkspacePermission> = {
      domain: 'workspace',
      permissions: [WorkspacePermission.DOMAIN_WORKSPACE_CREATE],
      actor,
      resource: { type: 'workspace' },
      context: buildAuthorizationContext(correlationId, {
        metadata: context?.metadata,
      }),
    };

    const result = await this.authorizationPort.check(request);
    return result.ok ? ok(result.value.allowed) : err(result.error);
  }

  /**
   * Check if user can update a specific workspace
   */
  async canUpdateWorkspace(
    userId: string,
    workspaces: string,
    correlationId: string,
    context?: WorkspaceAuthContext,
  ): Promise<Result<boolean, DomainError>> {
    if (!workspaces) {
      return err(
        withContext(WorkspaceErrors.PERMISSION_DENIED, {
          workspaces: workspaces || '',
          userId,
          correlationId,
          operation: 'update',
        }),
      );
    }

    const actor = {
      userId,
      tenantId: context?.tenantId,
      roles: context?.roles,
    };

    const request: AuthorizationRequest<WorkspacePermission> = {
      domain: 'workspace',
      permissions: [WorkspacePermission.DOMAIN_WORKSPACE_UPDATE],
      actor,
      resource: { type: 'workspace', id: workspaces },
      context: buildAuthorizationContext(correlationId, {
        metadata: context?.metadata,
      }),
    };

    const result = await this.authorizationPort.check(request);
    return result.ok ? ok(result.value.allowed) : err(result.error);
  }

  /**
   * Check if user can delete a specific workspace
   */
  async canDeleteWorkspace(
    userId: string,
    workspaces: string,
    correlationId: string,
    context?: WorkspaceAuthContext,
  ): Promise<Result<boolean, DomainError>> {
    if (!workspaces) {
      return err(
        withContext(WorkspaceErrors.PERMISSION_DENIED, {
          workspaces: workspaces || '',
          userId,
          correlationId,
          operation: 'delete',
        }),
      );
    }

    const actor = {
      userId,
      tenantId: context?.tenantId,
      roles: context?.roles,
    };

    const request: AuthorizationRequest<WorkspacePermission> = {
      domain: 'workspace',
      permissions: [WorkspacePermission.DOMAIN_WORKSPACE_DELETE],
      actor,
      resource: { type: 'workspace', id: workspaces },
      context: buildAuthorizationContext(correlationId, {
        metadata: context?.metadata,
      }),
    };

    const result = await this.authorizationPort.check(request);
    return result.ok ? ok(result.value.allowed) : err(result.error);
  }

  /**
   * Check if user can perform admin operations on workspaces
   */
  async canAdministerWorkspace(
    userId: string,
    correlationId: string,
    workspaces?: string,
    context?: WorkspaceAuthContext,
  ): Promise<Result<boolean, DomainError>> {
    const actor = {
      userId,
      tenantId: context?.tenantId,
      roles: context?.roles,
    };

    const request: AuthorizationRequest<WorkspacePermission> = {
      domain: 'workspace',
      permissions: [WorkspacePermission.DOMAIN_WORKSPACE_ADMIN],
      actor,
      resource: { type: 'workspace', id: workspaces },
      context: buildAuthorizationContext(correlationId, {
        metadata: context?.metadata,
      }),
    };

    const result = await this.authorizationPort.check(request);
    return result.ok ? ok(result.value.allowed) : err(result.error);
  }

  /**
   * Check field-level permissions for workspace updates.
   * Returns which fields the user can modify based on the permission matrix.
   *
   * Optimizations:
   * - Uses anyOf pattern to reduce OPA calls
   * - Parallel processing of field checks
   * - Proper actor context with tenant/role information
   */
  async checkFieldPermissions(
    userId: string,
    workspaces: string,
    requestedFields: string[],
    correlationId: string,
    context?: WorkspaceAuthContext,
  ): Promise<
    Result<{ allowedFields: string[]; deniedFields: string[] }, DomainError>
  > {
    if (!workspaces) {
      return err(
        withContext(WorkspaceErrors.PERMISSION_DENIED, {
          workspaces: workspaces || '',
          userId,
          correlationId,
          operation: 'checkFieldPermissions',
        }),
      );
    }

    try {
      const actor = {
        userId,
        tenantId: context?.tenantId,
        roles: context?.roles,
      };

      // Process fields in parallel for better performance
      const results = await Promise.all(
        requestedFields.map(async (field) => {
          const requiredPermissions =
            WorkspaceFieldPermissionMatrix.getRequiredPermissions(field);

          // Use basic UPDATE permission if no special permissions required
          const permissions = requiredPermissions.length
            ? requiredPermissions
            : [WorkspacePermission.DOMAIN_WORKSPACE_UPDATE];

          const request: AuthorizationRequest<WorkspacePermission> = {
            domain: 'workspace',
            permissions,
            anyOf: true, // User needs ANY of the required permissions
            actor,
            resource: { type: 'workspace', id: workspaces },
            context: buildAuthorizationContext(correlationId, {
              metadata: { ...context?.metadata, field },
            }),
          };

          const result = await this.authorizationPort.check(request);
          return { field, allowed: result.ok && result.value.allowed };
        }),
      );

      const allowedFields = results
        .filter((r) => r.allowed)
        .map((r) => r.field);
      const deniedFields = results
        .filter((r) => !r.allowed)
        .map((r) => r.field);

      return ok({ allowedFields, deniedFields });
    } catch (error: unknown) {
      this.logger.error(
        'Error checking field permissions',
        this.createLogContext('checkFieldPermissions', correlationId, userId, {
          workspaces,
          requestedFields,
          error: error instanceof Error ? error.message : String(error),
        }),
      );

      return err(
        withContext(WorkspaceErrors.AUTHORIZATION_FAILED, {
          workspaces: workspaces || '',
          userId,
          correlationId,
          operation: 'checkFieldPermissions',
          reason: error instanceof Error ? error.message : String(error),
        }),
      );
    }
  }

  /**
   * Comprehensive authorization check for workspace operations.
   * Validates both operation-level and field-level permissions.
   *
   * Improvements:
   * - Proper type safety with CrudOperation
   * - Explicit guards for required workspace IDs
   * - Uses typed WorkspaceAuthContext
   */
  async authorizeWorkspaceOperation(
    userId: string,
    operation: CrudOperation,
    correlationId: string,
    workspaces?: string,
    fields?: string[],
    context?: WorkspaceAuthContext,
  ): Promise<
    Result<
      {
        authorized: boolean;
        allowedFields?: string[];
        deniedFields?: string[];
      },
      DomainError
    >
  > {
    try {
      // Validate required workspaces for operations that need it
      if (['read', 'update', 'delete'].includes(operation) && !workspaces) {
        return err(
          withContext(WorkspaceErrors.PERMISSION_DENIED, {
            workspaces: workspaces || '',
            userId,
            correlationId,
            operation: String(operation),
          }),
        );
      }

      // First check operation-level permission
      let operationResult: Result<boolean, DomainError>;

      switch (operation) {
        case 'read':
          operationResult = await this.canReadWorkspace(
            userId,
            workspaces!,
            correlationId,
            context,
          );
          break;
        case 'create':
          operationResult = await this.canCreateWorkspace(
            userId,
            correlationId,
            context,
          );
          break;
        case 'update':
          operationResult = await this.canUpdateWorkspace(
            userId,
            workspaces!,
            correlationId,
            context,
          );
          break;
        case 'delete':
          operationResult = await this.canDeleteWorkspace(
            userId,
            workspaces!,
            correlationId,
            context,
          );
          break;
        default:
          return err(
            withContext(WorkspaceErrors.NOT_IMPLEMENTED, {
              workspaces: workspaces || '',
              userId,
              correlationId,
              operation: String(operation),
            }),
          );
      }

      if (!operationResult.ok) {
        return err(operationResult.error);
      }

      if (!operationResult.value) {
        return ok({ authorized: false });
      }

      // For update operations with field specifications, check field-level permissions
      if (operation === 'update' && fields && fields.length > 0 && workspaces) {
        const fieldResult = await this.checkFieldPermissions(
          userId,
          workspaces,
          fields,
          correlationId,
          context,
        );

        if (!fieldResult.ok) {
          return err(fieldResult.error);
        }

        const { allowedFields, deniedFields } = fieldResult.value;

        // Operation is authorized, but some fields might be denied
        return ok({
          authorized: allowedFields.length > 0,
          allowedFields,
          deniedFields,
        });
      }

      // Simple operation authorization without field-level checks
      return ok({ authorized: true });
    } catch (error: unknown) {
      this.logger.error(
        'Error in comprehensive workspace authorization',
        this.createLogContext('comprehensiveCheck', correlationId, userId, {
          operation,
          workspaces,
          fields,
          error: error instanceof Error ? error.message : String(error),
        }),
      );

      return err(
        withContext(WorkspaceErrors.AUTHORIZATION_FAILED, {
          workspaces: workspaces || '',
          userId,
          correlationId,
          operation: String(operation),
          reason: error instanceof Error ? error.message : String(error),
        }),
      );
    }
  }

  /**
   * Batch authorization check for multiple workspaces.
   * Useful for list operations where you need to filter results.
   *
   * Optimizations:
   * - Chunked processing to avoid overwhelming OPA
   * - Typed WorkspaceAuthContext and BatchOperation
   * - Proper actor context with tenant/role information
   */
  async authorizeWorkspaceList(
    userId: string,
    workspacess: string[],
    correlationId: string,
    operation: BatchOperation = 'read',
    context?: WorkspaceAuthContext,
  ): Promise<Result<{ authorized: string[]; denied: string[] }, DomainError>> {
    try {
      const authorized: string[] = [];
      const denied: string[] = [];

      // Chunk processing to avoid stampeding OPA with large lists
      const chunk = <T>(arr: T[], size: number): T[][] =>
        Array.from({ length: Math.ceil(arr.length / size) }, (_, i) =>
          arr.slice(i * size, (i + 1) * size),
        );

      // Process in chunks of 50 to balance performance and resource usage
      for (const batch of chunk(workspacess, 50)) {
        const results = await Promise.allSettled(
          batch.map(async (workspaces) => {
            let result: Result<boolean, DomainError>;

            switch (operation) {
              case 'read':
                result = await this.canReadWorkspace(
                  userId,
                  workspaces,
                  correlationId,
                  context,
                );
                break;
              case 'update':
                result = await this.canUpdateWorkspace(
                  userId,
                  workspaces,
                  correlationId,
                  context,
                );
                break;
              case 'delete':
                result = await this.canDeleteWorkspace(
                  userId,
                  workspaces,
                  correlationId,
                  context,
                );
                break;
              default:
                result = err(
                  withContext(WorkspaceErrors.NOT_IMPLEMENTED, {
                    workspaces,
                    userId,
                    correlationId,
                    operation: String(operation),
                  }),
                );
                break;
            }

            return { workspaces, result };
          }),
        );

        // Process results from this chunk
        results.forEach((promiseResult, index) => {
          const workspaces = batch[index];

          if (promiseResult.status === 'fulfilled') {
            const { result } = promiseResult.value;
            if (result.ok && result.value) {
              authorized.push(workspaces);
            } else {
              denied.push(workspaces);
            }
          } else {
            // Promise rejected, treat as denied
            denied.push(workspaces);
            this.logger.warn(
              'Authorization check failed for workspace',
              this.createLogContext(
                'batchAuthorization',
                correlationId,
                userId,
                {
                  workspaces,
                  error: String(promiseResult.reason),
                },
              ),
            );
          }
        });
      }

      return ok({ authorized, denied });
    } catch (error: unknown) {
      this.logger.error(
        'Error in batch workspace authorization',
        this.createLogContext('batchAuthorization', correlationId, userId, {
          workspacess: workspacess.slice(0, 10), // Log only first 10 for brevity
          operation,
          error: error instanceof Error ? error.message : String(error),
        }),
      );

      return err(
        withContext(WorkspaceErrors.AUTHORIZATION_FAILED, {
          workspaces: '',
          userId,
          correlationId,
          operation: String(operation),
          reason: error instanceof Error ? error.message : String(error),
        }),
      );
    }
  }
}
