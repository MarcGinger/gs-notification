// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

// Template Projector Module
// Configures Template Projector with shared projection infrastructure

import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { InfrastructureModule } from 'src/shared/infrastructure/infrastructure.module';
import { LoggingModule } from 'src/shared/logging';
import { TimeModule } from 'src/shared/infrastructure/time';
import {
  IO_REDIS,
  CACHE_SERVICE,
  CHECKPOINT_STORE,
  DATA_SOURCE,
  CATCHUP_RUNNER,
} from 'src/shared/constants/injection-tokens';
import { SLACK_EXECUTE_DI_TOKENS } from '../slack-execute.constants';

import { TemplateProjector } from './infrastructure/projectors';
import { TemplateProjectorHealthController } from './interface/http/controllers';

@Module({
  imports: [
    // Shared projection infrastructure (includes EventStore, Redis, CatchUpRunner, etc.)
    InfrastructureModule,

    // Time infrastructure (provides CLOCK token)
    TimeModule,

    // Logging infrastructure
    LoggingModule,

    // Database access for raw SQL operations
    TypeOrmModule.forFeature([]),
  ],
  providers: [
    // Map slack-execute domain tokens to infrastructure tokens
    {
      provide: SLACK_EXECUTE_DI_TOKENS.IO_REDIS, // 'SlackExecuteRedisClient'
      useExisting: IO_REDIS, // 'IORedis'
    },
    {
      provide: SLACK_EXECUTE_DI_TOKENS.DATA_SOURCE, // 'SlackExecuteDataSource'
      useExisting: DATA_SOURCE, // 'DATA_SOURCE'
    },
    {
      provide: SLACK_EXECUTE_DI_TOKENS.CHECKPOINT_STORE, // 'SlackExecuteCheckpointStore'
      useExisting: CHECKPOINT_STORE, // 'CHECKPOINT_STORE'
    },
    {
      provide: SLACK_EXECUTE_DI_TOKENS.CACHE_SERVICE, // 'SlackExecuteCacheService'
      useExisting: CACHE_SERVICE, // 'CACHE_SERVICE'
    },
    {
      provide: SLACK_EXECUTE_DI_TOKENS.CATCHUP_RUNNER, // 'SlackExecuteCatchupRunner'
      useExisting: CATCHUP_RUNNER, // 'CATCHUP_RUNNER'
    },
    TemplateProjector,
  ],
  controllers: [TemplateProjectorHealthController],
  exports: [TemplateProjector],
})
export class TemplateProjectorModule {}
