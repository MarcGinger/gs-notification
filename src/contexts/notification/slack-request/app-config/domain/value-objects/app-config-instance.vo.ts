// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { DomainError, Result, ok, err } from 'src/shared/errors';
import {
  createIntegerVO,
  createIntegerVOErrors,
  IntegerVOInstance,
  createDateTimeVO,
  createDateTimeVOErrors,
  DateTimeVOInstance,
} from 'src/shared/domain/value-objects';
import { Clock } from 'src/shared/domain/clock';
import { AppConfigErrors } from '../errors/app-config.errors';

/**
 * AppConfig Instance Value Objects
 *
 * Instance VOs for AppConfig aggregate lifecycle management.
 * Includes creation timestamps, update timestamps, and version tracking.
 * Follows the Clock injection pattern for deterministic testing.
 */

// ===========================================
// AppConfig Created At Instance VO
// ===========================================

const AppConfigCreatedAtErrors = createDateTimeVOErrors(
  AppConfigErrors.CREATED_AT_REQUIRED,
  'AppConfig Created At',
);

export const AppConfigCreatedAt = createDateTimeVO({
  name: 'AppConfigCreatedAt',
  allowFuture: false, // Cannot create app_config in the future
  allowPast: true, // Can create with past timestamps (data migration)
  customValidation: (date: Date): Result<void, DomainError> => {
    // Optional: Add domain-specific creation time validation
    // For example, cannot be more than 1 year in the past
    const oneYearAgo = new Date();
    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);

    if (date < oneYearAgo) {
      return err({
        ...AppConfigErrors.CREATED_AT_REQUIRED,
        detail:
          'AppConfig creation date cannot be more than 1 year in the past',
        context: { value: date, maxPastDate: oneYearAgo },
      } as DomainError);
    }

    return ok(undefined);
  },
  errors: AppConfigCreatedAtErrors,
});

export type AppConfigCreatedAt = DateTimeVOInstance;

// ===========================================
// AppConfig Updated At Instance VO
// ===========================================

const AppConfigUpdatedAtErrors = createDateTimeVOErrors(
  AppConfigErrors.UPDATED_AT_REQUIRED,
  'AppConfig Updated At',
);

export const AppConfigUpdatedAt = createDateTimeVO({
  name: 'AppConfigUpdatedAt',
  allowFuture: false, // Cannot update app_config in the future
  allowPast: true, // Can update with past timestamps (data correction)
  errors: AppConfigUpdatedAtErrors,
});

export type AppConfigUpdatedAt = DateTimeVOInstance;

// ===========================================
// AppConfig Version Instance VO
// ===========================================

const AppConfigVersionErrors = createIntegerVOErrors(
  AppConfigErrors.INVALID_CODE_DATA, // Reusing existing error until specific version error is added
  'AppConfig Version',
);

export const AppConfigVersion = createIntegerVO({
  name: 'AppConfigVersion',
  min: 0, // Version starts at 0
  allowNegative: false,
  errors: AppConfigVersionErrors,
});

export type AppConfigVersion = IntegerVOInstance;

// ===========================================
// Clock-Based Helper Functions (Explicit Dependencies)
// ===========================================

/**
 * Create AppConfigCreatedAt from Clock (explicit dependency)
 * Deterministic and testable - pass a fake clock in tests
 */
export const createdAtNow = (
  clock: Clock,
): Result<AppConfigCreatedAt, DomainError> =>
  AppConfigCreatedAt.create(clock.now());

/**
 * Create AppConfigUpdatedAt from Clock (explicit dependency)
 * Deterministic and testable - pass a fake clock in tests
 */
export const updatedAtNow = (
  clock: Clock,
): Result<AppConfigUpdatedAt, DomainError> =>
  AppConfigUpdatedAt.create(clock.now());

/**
 * Bump version by 1 (domain business rule)
 */
export const bumpVersion = (
  currentVersion: AppConfigVersion,
): Result<AppConfigVersion, DomainError> =>
  AppConfigVersion.create(currentVersion.value + 1);

/**
 * Create initial version (starts at 1 for new aggregates)
 */
export const initialVersion = (): Result<AppConfigVersion, DomainError> =>
  AppConfigVersion.create(1);

// ===========================================
// Direct Creation Functions (Non-Clock Based)
// ===========================================

/**
 * Create AppConfigCreatedAt from Date
 */
export const createAppConfigCreatedAt = (
  date: Date,
): Result<AppConfigCreatedAt, DomainError> => AppConfigCreatedAt.create(date);

/**
 * Create AppConfigUpdatedAt from Date
 */
export const createAppConfigUpdatedAt = (
  date: Date,
): Result<AppConfigUpdatedAt, DomainError> => AppConfigUpdatedAt.create(date);

/**
 * Create AppConfigVersion from number
 */
export const createAppConfigVersion = (
  version: number,
): Result<AppConfigVersion, DomainError> => AppConfigVersion.create(version);

// ===========================================
// Domain Invariants & Validation
// ===========================================

/**
 * Validate that updatedAt is not before createdAt (monotonic time)
 */
export const validateMonotonicTime = (
  createdAt: AppConfigCreatedAt,
  updatedAt: AppConfigUpdatedAt,
): Result<void, DomainError> => {
  if (updatedAt.value < createdAt.value) {
    return err({
      ...AppConfigErrors.UPDATED_AT_REQUIRED,
      detail: 'Updated at cannot be before created at',
      context: {
        createdAt: createdAt.value.toISOString(),
        updatedAt: updatedAt.value.toISOString(),
      },
    } as DomainError);
  }
  return ok(undefined);
};

// ===========================================
// Legacy Compatibility (DEPRECATED)
// ===========================================

/**
 * @deprecated Use createdAtNow(clock) instead for better testability
 * This function hides the Date dependency and makes testing harder
 */
export function createAppConfigCreatedAtNow(): Result<
  AppConfigCreatedAt,
  DomainError
> {
  return AppConfigCreatedAt.create(new Date());
}

/**
 * @deprecated Use updatedAtNow(clock) instead for better testability
 * This function hides the Date dependency and makes testing harder
 */
export function createAppConfigUpdatedAtNow(): Result<
  AppConfigUpdatedAt,
  DomainError
> {
  return AppConfigUpdatedAt.create(new Date());
}
