// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
import { Inject } from '@nestjs/common';
import { Result, DomainError } from 'src/shared/errors';
import { APP_LOGGER, componentLogger, Logger } from 'src/shared/logging';
import { CommandHandlerUtil } from 'src/shared/application';
import { DetailAppConfigResponse } from '../dtos';
import { UpsertAppConfigUseCase } from '../use-cases';
import { UpsertAppConfigCommand } from '../commands';

/**
 * Enhanced Upsert AppConfig Handler with security context support
 */
@CommandHandler(UpsertAppConfigCommand)
export class UpsertAppConfigHandler
  implements ICommandHandler<UpsertAppConfigCommand>
{
  private readonly logger: Logger;

  constructor(
    @Inject(UpsertAppConfigUseCase)
    private readonly upsertAppConfigUseCase: UpsertAppConfigUseCase,
    @Inject(APP_LOGGER) moduleLogger: Logger,
  ) {
    this.logger = componentLogger(moduleLogger, 'UpsertAppConfigHandler');
  }

  /**
   * Executes the upsert appConfig command with enhanced security and validation
   */
  async execute(
    command: UpsertAppConfigCommand,
  ): Promise<Result<DetailAppConfigResponse, DomainError>> {
    const commandName = 'UpsertAppConfigCommand';

    // Log command execution start
    CommandHandlerUtil.logCommandStart(this.logger, commandName, command, {
      application: 'slack-request',
      component: 'UpsertAppConfigHandler',
      extractCommandData: (cmd: UpsertAppConfigCommand) => ({
        propsKeys: Object.keys(cmd.props || {}),
      }),
    });

    // Transform command to use case parameters
    const result = await this.upsertAppConfigUseCase.execute({
      user: command.user,
      workspaceCode: command.workspaceCode,
      props: command.props,
      correlationId: command.correlationId,
      authorizationReason: 'CQRS Command Handler',
    });

    // Log result with enhanced context
    if (result.ok) {
      CommandHandlerUtil.logCommandSuccess(
        this.logger,
        commandName,
        command,
        result.value,
        {
          application: 'slack-request',
          component: 'UpsertAppConfigHandler',
        },
      );
    } else {
      // Use shared error handling with custom context
      CommandHandlerUtil.logValidationError(
        this.logger,
        commandName,
        result.error,
        command,
        {
          application: 'slack-request',
          component: 'UpsertAppConfigHandler',
          extractErrorContext: (cmd: UpsertAppConfigCommand) => ({
            inputStructure: {
              hasProps: !!cmd.props,
              propsKeys: cmd.props ? Object.keys(cmd.props) : [],
            },
          }),
        },
      );
    }

    return result;
  }
}
