// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * MessageRequest list request DTO with pagination and filtering
 * Combines standardized pagination with message-request-specific filters
 * Now extends shared base classes for consistency across domains
 */

import {
  BaseSortableListFilterRequest,
  SortFieldConfig,
  PaginationMetaResponse,
} from 'src/shared/application/dtos';
import { ApiListOf } from 'src/shared/application/decorators';
import { ApiPropertyOptional } from '@nestjs/swagger';
import {
  ApiMessageRequestListMeta,
  ApiMessageRequestRecipient,
  ApiMessageRequestStatus,
  MessageRequestStatusValue,
} from './decorators';
import { ListMessageRequestResponse } from './';
/**
 * MessageRequest list request DTO with pagination and filtering
 * Combines standardized pagination with message-request-specific filters
 * Now extends shared base classes for consistency across domains
 *
 * Available sort fields:
 * - recipient: Sort by recipient (default: asc)
 * - status: Sort by status (default: asc)
 *
 * Example sortBy usage: {"code": "asc", "name": "desc"}
 */
export class ListMessageRequestFilterRequest extends BaseSortableListFilterRequest {
  @ApiMessageRequestRecipient({ required: false })
  recipient?: string;

  @ApiMessageRequestStatus({ required: false })
  status?: MessageRequestStatusValue;

  /**
   * Override sortBy with message-request-specific schema for better Swagger documentation
   */
  @ApiPropertyOptional({
    type: 'object',
    description: 'Sort criteria with field names and directions',
    example: { code: 'asc', name: 'asc' },
    default: { code: 'asc', name: 'asc' },
    properties: {
      Recipient: {
        type: 'string',
        enum: ['asc', 'desc'],
        description: 'Sort by recipient',
        default: 'asc',
      },
      Status: {
        type: 'string',
        enum: ['asc', 'desc'],
        description: 'Sort by status',
        default: 'asc',
      },
    },
    additionalProperties: false,
  })
  sortBy?: Record<string, 'asc' | 'desc'> = undefined;
  /**
   * Define available sort fields for messageRequests
   * This method ensures type-safe sorting validation
   *
   * Available sort fields:
   * - recipient: MessageRequest recipient (sortable, default: asc)
   * - status: MessageRequest status (sortable, default: asc)
   *
   * @returns Configuration object defining sortable fields and their properties
   */
  getSortFieldConfig(): SortFieldConfig {
    return {
      recipient: {
        description: 'MessageRequest recipient',
        sortable: true,
        defaultDirection: 'asc' as const,
      },
      status: {
        description: 'MessageRequest status',
        sortable: true,
        defaultDirection: 'asc' as const,
      },
    };
  }
}

/**
 * MessageRequest page response DTO with metadata for pagination
 * Extends the generic PagedResponse pattern while maintaining API compatibility
 */
export class MessageRequestPageResponse {
  @ApiListOf(ListMessageRequestResponse)
  readonly data: ListMessageRequestResponse[];

  @ApiMessageRequestListMeta()
  readonly meta: PaginationMetaResponse;

  constructor(
    data: ListMessageRequestResponse[],
    meta: PaginationMetaResponse,
  ) {
    this.data = data;
    this.meta = meta;
  }

  /**
   * Static factory method for creating response instances
   */
  static create(
    data: ListMessageRequestResponse[],
    meta: PaginationMetaResponse,
  ): MessageRequestPageResponse {
    return new MessageRequestPageResponse(data, meta);
  }

  /**
   * Check if response has data
   */
  get isEmpty(): boolean {
    return this.data.length === 0;
  }

  /**
   * Get total count if available
   */
  get totalCount(): number | undefined {
    return this.meta.totalItems;
  }
}
