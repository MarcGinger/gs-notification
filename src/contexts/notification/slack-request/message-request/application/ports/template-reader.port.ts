// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Result, DomainError } from 'src/shared/errors';
import { ActorContext } from 'src/shared/application/context';
import { RepositoryOptions } from 'src/shared/infrastructure/repositories';
import { Option } from 'src/shared/domain/types';
import { TemplateReference } from './references';

export const TEMPLATE_REFERENCE_READER_TOKEN = 'ITemplateReader' as const;

/**
 * Template Reader Port (Bounded Context: Notification)
 *
 * Handles template reference data lookups for FK validation.
 * Clean ownership of template-related operations with swappable implementations.
 */
export interface ITemplateReader {
  /**
   * Find valid Template Codes for Template configuration
   * @param actor - The authenticated user context
   * @param options - Optional repository options
   * @returns Result containing available Template Codes
   */
  findValidTemplateCodes(
    actor: ActorContext,
    options?: RepositoryOptions,
  ): Promise<Result<string[], DomainError>>;

  /**
   * Find Template configuration by Template code
   * @param actor - The authenticated user context
   * @param  - The   to lookup
   * @param options - Optional repository options
   * @returns Result containing Template configuration or null if not found
   */
  findTemplateByCode(
    actor: ActorContext,
    code: string,
    options?: RepositoryOptions,
  ): Promise<Result<Option<TemplateReference>, DomainError>>;
}
