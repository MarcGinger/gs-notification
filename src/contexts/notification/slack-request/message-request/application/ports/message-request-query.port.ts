// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Result, DomainError } from 'src/shared/errors';
import { RepositoryOptions } from 'src/shared/infrastructure/repositories';
import { ActorContext } from 'src/shared/application/context';
import { Option } from 'src/shared/domain/types';
import { DetailMessageRequestResponse } from '../dtos';

/**
 * Token for injecting IMessageRequestQuery port implementation
 */
export const MESSAGE_REQUEST_QUERY_TOKEN = 'IMessageRequestQuery' as const;

/**
 * MessageRequest Query Port - Interface Segregation Principle Implementation
 *
 * Handles complex query operations including pagination, filtering, and search.
 * This interface focuses solely on advanced data retrieval operations.
 *
 * ISP Benefits:
 * - Clients that need simple reads don't depend on complex query methods
 * - Can be optimized independently (e.g., using read replicas)
 * - Easier to implement caching strategies for query operations
 * - Supports analytical and reporting use cases
 *
 * @domain Notification Context - MessageRequest Query Port
 * @layer Application Ports
 * @pattern Interface Segregation Principle
 */
export interface IMessageRequestQuery {
  /**
   * Find a single MessageRequest by its unique identifier (for CQRS query operations)
   * @param actor - The actor context containing authentication and request metadata
   * @param id - The unique identifier of the MessageRequest
   * @param options - Optional repository options
   * @returns A promise resolving to a Result containing the MessageRequest or null if not found
   */
  findById(
    actor: ActorContext,
    id: string,
    options?: RepositoryOptions,
  ): Promise<Result<Option<DetailMessageRequestResponse>, DomainError>>;
}
