// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Result, DomainError } from 'src/shared/errors';
import { ActorContext } from 'src/shared/application/context';
import { RepositoryOptions } from 'src/shared/infrastructure/repositories';
import { Option } from 'src/shared/domain/types';
import { ChannelReference } from './references';

export const CHANNEL_REFERENCE_READER_TOKEN = 'IChannelReader' as const;

/**
 * Channel Reader Port (Bounded Context: Notification)
 *
 * Handles channel reference data lookups for FK validation.
 * Clean ownership of channel-related operations with swappable implementations.
 */
export interface IChannelReader {
  /**
   * Find valid Channel Codes for Channel configuration
   * @param actor - The authenticated user context
   * @param options - Optional repository options
   * @returns Result containing available Channel Codes
   */
  findValidChannelCodes(
    actor: ActorContext,
    options?: RepositoryOptions,
  ): Promise<Result<string[], DomainError>>;

  /**
   * Find Channel configuration by Channel code
   * @param actor - The authenticated user context
   * @param  - The   to lookup
   * @param options - Optional repository options
   * @returns Result containing Channel configuration or null if not found
   */
  findChannelByCode(
    actor: ActorContext,
    code: string,
    options?: RepositoryOptions,
  ): Promise<Result<Option<ChannelReference>, DomainError>>;
}
