// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { MessageRequestDomainState } from '../../domain/state';
import {
  DetailMessageRequestResponse,
  ListMessageRequestResponse,
} from '../dtos';

/**
 * MessageRequest DTO Assembler
 *
 * Converts MessageRequestDomainState (pure VOs) to transport DTOs.
 * Bridges the gap between rich domain objects and API response format.
 * Uses existing generated DTOs and follows established patterns.
 */

/**
 * Assembles DTOs from MessageRequestDomainState for API transport
 */
export class MessageRequestDtoAssembler {
  /**
   * Convert MessageRequestDomainState to detailed response DTO
   *
   * @param domainState - Rich domain state with VOs
   * @returns Clean DTO for API response
   */
  static toDetailResponse(
    domainState: MessageRequestDomainState,
  ): DetailMessageRequestResponse {
    const dto = new DetailMessageRequestResponse();

    // Extract primitive values from VOs
    dto.id = domainState.id.value;
    dto.recipient = domainState.recipient?.value;
    dto.data = domainState.data?.value;
    dto.status = domainState.status?.value;
    dto.workspaceCode = domainState.workspaceCode.value;
    dto.templateCode = domainState.templateCode.value;
    dto.channelCode = domainState.channelCode?.value;

    return dto;
  }

  /**
   * Convert MessageRequestDomainState to list response DTO
   *
   * @param domainState - Rich domain state with VOs
   * @returns Clean DTO for list API response
   */
  static toListResponse(
    domainState: MessageRequestDomainState,
  ): ListMessageRequestResponse {
    const dto = new ListMessageRequestResponse();

    // Extract primitive values from VOs
    dto.id = domainState.id.value;
    dto.recipient = domainState.recipient?.value;
    dto.data = domainState.data?.value;
    dto.status = domainState.status?.value;
    dto.workspaceCode = domainState.workspaceCode.value;
    dto.templateCode = domainState.templateCode.value;
    dto.channelCode = domainState.channelCode?.value;

    return dto;
  }

  /**
   * Convert array of MessageRequestDomainState to array of list DTOs
   *
   * @param domainStates - Array of rich domain states
   * @returns Array of clean DTOs for list API response
   */
  static toListResponseArray(
    domainStates: MessageRequestDomainState[],
  ): ListMessageRequestResponse[] {
    return domainStates.map((domainState) => this.toListResponse(domainState));
  }

  /**
   * Convert array of MessageRequestDomainState to array of detail DTOs
   *
   * @param domainStates - Array of rich domain states
   * @returns Array of clean DTOs for detail API response
   */
  static toDetailResponseArray(
    domainStates: MessageRequestDomainState[],
  ): DetailMessageRequestResponse[] {
    return domainStates.map((domainState) =>
      this.toDetailResponse(domainState),
    );
  }
}
