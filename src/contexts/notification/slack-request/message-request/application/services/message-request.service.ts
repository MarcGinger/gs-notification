// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * MessageRequest Application Service
 *
 * Application-layer service that coordinates authorization with business operations.
 */

// Framework imports
import { Inject, Injectable } from '@nestjs/common';

// Shared utilities and infrastructure
import { APP_LOGGER, Log, componentLogger, Logger } from 'src/shared/logging';
import { Result, DomainError, err, ok, withContext } from 'src/shared/errors';
import type { IUserToken } from 'src/shared/security';
import { CorrelationUtil } from 'src/shared/utilities/correlation.util';
import { Clock, CLOCK } from 'src/shared/infrastructure/time';

// Service configuration
import { SlackRequestServiceConstants } from '../../../service-constants';

// Domain types and errors
import { MessageRequestErrors } from '../../domain/errors/message-request.errors';
import type {
  CreateMessageRequestProps,
  UpdateMessageRequestProps,
} from '../../domain/props';
import { DetailMessageRequestResponse } from '../dtos';

// Application layer
import { MessageRequestAuthorizationService } from './message-request-authorization.service';
import { MessageRequestAuthContext } from '../types/message-request-auth-context';

// Use case contracts
import {
  ICreateMessageRequestUseCase,
  IUpdateMessageRequestUseCase,
  IGetMessageRequestUseCase,
} from '../use-cases/contracts';

/**
 * Application Service for MessageRequest operations with integrated authorization
 */
@Injectable()
export class MessageRequestApplicationService {
  private readonly logger: Logger;

  constructor(
    private readonly messageRequestAuthorizationService: MessageRequestAuthorizationService,
    private readonly createMessageRequestUseCase: ICreateMessageRequestUseCase,
    private readonly updateMessageRequestUseCase: IUpdateMessageRequestUseCase,
    private readonly getMessageRequestUseCase: IGetMessageRequestUseCase,
    @Inject(CLOCK) private readonly clock: Clock,
    @Inject(APP_LOGGER) moduleLogger: Logger,
  ) {
    this.logger = componentLogger(
      moduleLogger,
      'MessageRequestApplicationService',
    );
  }

  /**
   * Helper to create MessageRequestAuthContext from user token
   */
  private createAuthContext(
    user: IUserToken,
    operation: string,
  ): MessageRequestAuthContext {
    return {
      tenantId: user.tenant_id,
      roles: user.roles || [],
      operationType: operation,
      metadata: {
        userId: user.sub,
        timestamp: this.clock.nowIso(),
      },
    };
  }

  /**
   * Helper to create consistent logging context
   */
  private createLogContext(
    operation: string,
    correlationId: string,
    userId: string,
    additionalContext?: Record<string, unknown>,
  ): Record<string, unknown> {
    return {
      serviceName: SlackRequestServiceConstants.SERVICE_NAME,
      component: 'MessageRequestApplicationService',
      operation,
      correlationId,
      userId,
      ...additionalContext,
    };
  }

  /**
   * Helper to validate required id input
   */
  private validateId(
    id: string,
    operation: string,
    correlationId?: string,
  ): Result<string, DomainError> {
    if (!id?.trim()) {
      return err(
        withContext(MessageRequestErrors.INVALID_MESSAGE_REQUEST_DATA, {
          operation,
          correlationId:
            correlationId ||
            CorrelationUtil.generateForOperation(
              `message-request-${operation}`,
            ),
        }),
      );
    }
    return ok(id.trim());
  }

  /**
   * Centralized auth → log → execute → catch pattern
   */
  private async authorizeThenExecute<T>(args: {
    operation: 'create' | 'update' | 'read';
    user: IUserToken;
    id?: string;
    correlationIdPrefix: string;
    doAuthorize: () => Promise<Result<boolean, DomainError>>;
    doExecute: () => Promise<Result<T, DomainError>>;
    logContext?: Record<string, unknown>;
  }): Promise<Result<T, DomainError>> {
    const corrId = CorrelationUtil.generateForOperation(
      args.correlationIdPrefix,
    );
    const ctx = {
      ...this.createLogContext(
        `${args.operation}_message_request`,
        corrId,
        args.user.sub,
        args.logContext,
      ),
    };

    const auth = await args.doAuthorize();
    if (!auth.ok) {
      Log.warn(this.logger, `${args.operation} authorization failed`, {
        ...ctx,
        authDecision: 'deny',
      });
      return err(auth.error);
    }
    if (!auth.value) {
      Log.warn(this.logger, `${args.operation} permission denied`, {
        ...ctx,
        authDecision: 'deny',
      });
      return err(
        withContext(MessageRequestErrors.PERMISSION_DENIED, {
          correlationId: corrId,
          userId: args.user.sub,
          operation: args.operation,
          id: args.id,
          category: 'security',
        }),
      );
    }

    Log.info(this.logger, `MessageRequest ${args.operation} authorized`, {
      ...ctx,
      authDecision: 'allow',
    });

    try {
      return await args.doExecute();
    } catch (error) {
      Log.error(
        this.logger,
        `MessageRequest ${args.operation} use case failed`,
        {
          ...ctx,
          error: error instanceof Error ? error.message : String(error),
        },
      );
      return err({
        code: `DOMAIN.MESSAGE_REQUEST.${args.operation.toUpperCase()}_FAILED`,
        title: `MessageRequest ${args.operation} failed`,
        detail: error instanceof Error ? error.message : 'Unknown error',
        category: 'application',
        context: {
          correlationId: corrId,
          id: args.id,
          operation: `${args.operation}_message_request`,
        },
      });
    }
  }

  /**
   * Create a new messageRequest with authorization
   */
  async createMessageRequest(
    user: IUserToken,
    props: CreateMessageRequestProps,
    options?: { idempotencyKey?: string; correlationId?: string },
  ): Promise<Result<DetailMessageRequestResponse, DomainError>> {
    const authContext = this.createAuthContext(user, 'create');
    const correlationId =
      options?.correlationId ||
      CorrelationUtil.generateForOperation('message-request-create');

    return this.authorizeThenExecute<DetailMessageRequestResponse>({
      operation: 'create',
      user,
      correlationIdPrefix: 'message-request-create',
      doAuthorize: () =>
        this.messageRequestAuthorizationService.canCreateMessageRequest(
          user.sub,
          correlationId,
          authContext,
        ),
      doExecute: () =>
        this.createMessageRequestUseCase.execute({
          user,
          props,
          correlationId,
          authorizationReason: 'create_message_request',
          ...(options?.idempotencyKey && {
            idempotencyKey: options.idempotencyKey,
          }),
        }),
    });
  }

  /**
   * Update an existing messageRequest with authorization
   */
  async updateMessageRequest(
    user: IUserToken,
    id: string,
    props: UpdateMessageRequestProps,
    options?: { idempotencyKey?: string; correlationId?: string },
  ): Promise<Result<DetailMessageRequestResponse, DomainError>> {
    // Early input validation
    const idValidation = this.validateId(id, 'update');
    if (!idValidation.ok) {
      return err(idValidation.error);
    }

    const validatedid = idValidation.value;
    const authContext = this.createAuthContext(user, 'update');
    const correlationId =
      options?.correlationId ||
      CorrelationUtil.generateForOperation('message-request-update');

    // Optional: Field-level authorization
    // Uncomment when MessageRequestAuthorizationService supports authorizeMessageRequestOperation
    /*
    const fields = extractDefinedFields(props); // Use shared utility
    const opAuth = await this.messageRequestAuthorizationService.authorizeMessageRequestOperation(
      user.sub, 
      'update', 
      CorrelationUtil.generateForOperation('message-request-update'), 
      validatedid, 
      fields, 
      authContext
    );
    if (!opAuth.ok) return err(opAuth.error);
    if (!opAuth.value.authorized) {
      return err(withContext(MessageRequestErrors.PERMISSION_DENIED, { 
        operation: 'update', 
        id: validatedid, 
        userId: user.sub,
        category: 'security'
      }));
    }
    */

    return this.authorizeThenExecute<DetailMessageRequestResponse>({
      operation: 'update',
      user,
      id: validatedid,
      correlationIdPrefix: 'message-request-update',
      doAuthorize: () =>
        this.messageRequestAuthorizationService.canUpdateMessageRequest(
          user.sub,
          validatedid,
          correlationId,
          authContext,
        ),
      doExecute: () =>
        this.updateMessageRequestUseCase.execute({
          user,
          id: validatedid,
          props,
          correlationId,
          authorizationReason: 'update_message_request',
          ...(options?.idempotencyKey && {
            idempotencyKey: options.idempotencyKey,
          }),
        }),
      logContext: { id: validatedid },
    });
  }

  /**
   * Get a messageRequest by ID with authorization
   */
  async getMessageRequestById(
    user: IUserToken,
    id: string,
  ): Promise<Result<DetailMessageRequestResponse, DomainError>> {
    // Early input validation
    const idValidation = this.validateId(id, 'read');
    if (!idValidation.ok) {
      return err(idValidation.error);
    }

    const validatedid = idValidation.value;
    const authContext = this.createAuthContext(user, 'read');

    return this.authorizeThenExecute<DetailMessageRequestResponse>({
      operation: 'read',
      user,
      id: validatedid,
      correlationIdPrefix: 'message-request-read',
      doAuthorize: () =>
        this.messageRequestAuthorizationService.canReadMessageRequest(
          user.sub,
          validatedid,
          CorrelationUtil.generateForOperation('message-request-read'),
          authContext,
        ),
      doExecute: () =>
        this.getMessageRequestUseCase.execute({
          user,
          id: validatedid,
          correlationId: CorrelationUtil.generateForOperation(
            'message-request-read',
          ),
        }),
      logContext: { id: validatedid },
    });
  }
}
