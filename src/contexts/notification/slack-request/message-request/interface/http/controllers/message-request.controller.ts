// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import {
  Controller,
  Post,
  Body,
  HttpStatus,
  HttpCode,
  Param,
  UseInterceptors,
  UseGuards,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiCreatedResponse,
  ApiBody,
  ApiHeader,
  ApiParam,
  ApiOkResponse,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { IdempotencyKey } from 'src/shared/interfaces/decorators';
import { IdempotencyKeyPipe } from 'src/shared/interfaces/pipes';
import { MessageRequestApplicationService } from '../../../application/services';
import { CurrentUser, IUserToken, JwtAuthGuard } from 'src/shared/security';
import {
  DetailMessageRequestResponse,
  CreateMessageRequestRequest,
} from '../../../application/dtos';
import { Result, ResultInterceptor, DomainError } from 'src/shared/errors';
import { MessageRequestCreateResource } from '../../message-request.resource';
import { ApiCommonErrors } from 'src/shared/interfaces/http';

@Controller('message-requests')
@ApiTags('MessageRequests')
@ApiBearerAuth()
@UseGuards(JwtAuthGuard)
@UseInterceptors(ResultInterceptor)
export class MessageRequestController {
  constructor(
    private readonly messageRequestApplicationService: MessageRequestApplicationService,
  ) {}

  // ========================================
  // Core CRUD Operations
  // ========================================

  @Post()
  @MessageRequestCreateResource()
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: 'Create a new Message',
    description:
      'Creates a new Message in the catalog. Requires CREATE permission (MEDIUM risk).',
  })
  @ApiHeader({
    name: 'Idempotency-Key',
    required: false,
    description:
      'Ensures the request is processed only once. Accepts both Idempotency-Key and x-idempotency-key headers.',
  })
  @ApiCreatedResponse({
    type: DetailMessageRequestResponse,
    description: 'MessageRequest successfully created',
    headers: {
      Location: {
        description: 'URI of the newly created resource',
        schema: {
          type: 'string',
          example: '/message-requests/123e4567-e89b-12d3-a456-426614174000',
        },
      },
    },
  })
  @ApiCommonErrors()
  @ApiBody({ type: CreateMessageRequestRequest })
  async create(
    @CurrentUser() user: IUserToken,
    @Body() createMessageRequestRequest: CreateMessageRequestRequest,
    @IdempotencyKey(new IdempotencyKeyPipe())
    idempotencyKey: string | undefined,
  ): Promise<Result<DetailMessageRequestResponse, DomainError>> {
    // idempotencyKey is validated by the IdempotencyKeyPipe

    // Call service with options including idempotency key
    const result =
      await this.messageRequestApplicationService.createMessageRequest(
        user,
        createMessageRequestRequest,
        {
          idempotencyKey,
        },
      );

    return result;
  }
}
