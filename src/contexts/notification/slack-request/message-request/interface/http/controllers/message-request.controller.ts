// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import {
  Controller,
  Get,
  Post,
  Body,
  Put,
  HttpStatus,
  HttpCode,
  Param,
  UseInterceptors,
  UseGuards,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiCreatedResponse,
  ApiBody,
  ApiHeader,
  ApiParam,
  ApiOkResponse,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { IdempotencyKey } from 'src/shared/interfaces/decorators';
import { IdempotencyKeyPipe } from 'src/shared/interfaces/pipes';
import { MessageRequestApplicationService } from '../../../application/services';
import { CurrentUser, IUserToken, JwtAuthGuard } from 'src/shared/security';
import {
  DetailMessageRequestResponse,
  CreateMessageRequestRequest,
  UpdateMessageRequestRequest,
} from '../../../application/dtos';
import { Result, ResultInterceptor, DomainError } from 'src/shared/errors';
import {
  MessageRequestReadResource,
  MessageRequestCreateResource,
  MessageRequestUpdateResource,
} from '../../message-request.resource';
import { ApiCommonErrors } from 'src/shared/interfaces/http';

@Controller('message-requests')
@ApiTags('MessageRequests')
@ApiBearerAuth()
@UseGuards(JwtAuthGuard)
@UseInterceptors(ResultInterceptor)
export class MessageRequestController {
  constructor(
    private readonly messageRequestApplicationService: MessageRequestApplicationService,
  ) {}

  @Get(':id')
  @MessageRequestReadResource()
  @ApiOperation({
    summary: 'Get Message by ID',
    description:
      'Retrieves a single Message by its unique identifier. Requires READ permission (LOW risk).',
  })
  @ApiParam({
    name: 'id',
    type: 'string',
    description: 'MessageRequest unique identifier (UUID format)',
    format: 'uuid',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  @ApiOkResponse({
    description: 'MessageRequest details retrieved successfully',
    type: DetailMessageRequestResponse,
  })
  @ApiCommonErrors()
  async get(
    @CurrentUser() user: IUserToken,
    @Param('id') id: string,
  ): Promise<Result<DetailMessageRequestResponse, DomainError>> {
    const result =
      await this.messageRequestApplicationService.getMessageRequestById(
        user,
        id,
      );

    return result;
  }
  // ========================================
  // Core CRUD Operations
  // ========================================

  @Post()
  @MessageRequestCreateResource()
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: 'Create a new Message',
    description:
      'Creates a new Message in the catalog. Requires CREATE permission (MEDIUM risk).',
  })
  @ApiHeader({
    name: 'Idempotency-Key',
    required: false,
    description:
      'Ensures the request is processed only once. Accepts both Idempotency-Key and x-idempotency-key headers.',
  })
  @ApiCreatedResponse({
    type: DetailMessageRequestResponse,
    description: 'MessageRequest successfully created',
    headers: {
      Location: {
        description: 'URI of the newly created resource',
        schema: {
          type: 'string',
          example: '/message-requests/123e4567-e89b-12d3-a456-426614174000',
        },
      },
    },
  })
  @ApiCommonErrors()
  @ApiBody({ type: CreateMessageRequestRequest })
  async create(
    @CurrentUser() user: IUserToken,
    @Body() createMessageRequestRequest: CreateMessageRequestRequest,
    @IdempotencyKey(new IdempotencyKeyPipe())
    idempotencyKey: string | undefined,
  ): Promise<Result<DetailMessageRequestResponse, DomainError>> {
    // idempotencyKey is validated by the IdempotencyKeyPipe

    // Call service with options including idempotency key
    const result =
      await this.messageRequestApplicationService.createMessageRequest(
        user,
        createMessageRequestRequest,
        {
          idempotencyKey,
        },
      );

    return result;
  }

  @Put(':id')
  @MessageRequestUpdateResource()
  @ApiOperation({
    summary: 'Update a Message',
    description:
      'Updates an existing Message with new data. Supports partial updates. Requires UPDATE permission (MEDIUM risk).',
  })
  @ApiParam({
    name: 'id',
    type: 'string',
    description: 'MessageRequest unique identifier (UUID format)',
    format: 'uuid',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: 'MessageRequest updated successfully',
    type: DetailMessageRequestResponse,
  })
  @ApiCommonErrors({
    include422: true,
    extra: [
      { status: 429, description: 'Too Many Requests' },
      { status: 503, description: 'Upstream dependency unavailable' },
    ],
  })
  @ApiBody({
    type: UpdateMessageRequestRequest,
    description:
      'MessageRequest update data. Only provided fields will be updated.',
  })
  async update(
    @CurrentUser() user: IUserToken,
    @Param('id') id: string,
    @Body() updateMessageRequestRequest: UpdateMessageRequestRequest,
  ): Promise<Result<DetailMessageRequestResponse, DomainError>> {
    const result =
      await this.messageRequestApplicationService.updateMessageRequest(
        user,
        id,
        updateMessageRequestRequest,
      );

    return result;
  }
}
