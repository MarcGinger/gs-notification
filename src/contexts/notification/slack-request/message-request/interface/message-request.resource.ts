// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * MessageRequest Resource Decorators - Domain-Driven Authorization
 *
 * Clean integration with domain-driven permissions infrastructure.
 * All business rules and risk assessments come from the domain layer.
 *
 * ARCHITECTURAL PRINCIPLE: No business logic duplication
 * ✅ Risk levels: MessageRequestPermissionHelpers.getRiskLevel()
 * ✅ Justification rules: MessageRequestPermissionHelpers.requiresJustification()
 * ✅ Categories: MessageRequestPermissionRegistry[permission].category
 * ✅ Policy paths: MessageRequestPermissionHelpers.getPolicyPath()
 * ✅ Audit requirements: MessageRequestPermissionRegistry[permission].auditRequired
 *
 * This keeps the HTTP layer thin and ensures business rules
 * live in the domain where they belong.
 */

import { Resource } from 'src/shared/security/opa';
import { Request } from 'express';
import {
  MessageRequestPermission,
  MessageRequestPermissionHelpers,
  MessageRequestPermissionRegistry,
} from '../domain/permissions';

/**
 * Domain-driven MessageRequest resource decorator
 *
 * All business rules come from the domain layer - no duplication!
 */
export const MessageRequestResource = (permission: MessageRequestPermission) =>
  Resource({
    type: 'message-request',
    action: permission,
    extractId: (req: Request) => req.params?.id || req.params?.id,
    extractAttributes: (req: Request) => {
      const body = req.body as Record<string, unknown> | undefined;
      const query = req.query as Record<string, unknown> | undefined;

      // Business data extraction
      const recipient = body?.recipient || query?.recipient;
      const status = body?.status || query?.status;
      const workspaceCode = body?.workspaceCode || query?.workspaceCode;
      const templateCode = body?.templateCode || query?.templateCode;
      const channelCode = body?.channelCode || query?.channelCode;

      const baseAttributes = {
        recipient,
        status,
        workspaceCode,
        templateCode,
        channelCode,
      };

      // Domain-driven permission context (no hardcoded business rules!)
      const permissionMeta = MessageRequestPermissionRegistry[permission];
      const permissionContext = {
        permission,
        riskLevel: MessageRequestPermissionHelpers.getRiskLevel(permission),
        requiresJustification:
          MessageRequestPermissionHelpers.requiresJustification(permission),
        category: permissionMeta?.category as string,
        policyPath: MessageRequestPermissionHelpers.getPolicyPath(permission),
        auditRequired:
          MessageRequestPermissionHelpers.requiresAudit(permission),
      };

      return {
        ...baseAttributes,
        _permissionContext: permissionContext,
      };
    },
  });

/**
 * Specialized decorators for high-risk operations
 */
export const MessageRequestDeleteResource = () =>
  MessageRequestResource(
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_DELETE,
  );

export const MessageRequestCreateResource = () =>
  MessageRequestResource(
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_CREATE,
  );

export const MessageRequestUpdateResource = () =>
  MessageRequestResource(
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_UPDATE,
  );

export const MessageRequestReadResource = () =>
  MessageRequestResource(MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_READ);
