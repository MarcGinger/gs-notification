// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import {
  EnumVOInstance,
  createDisplayNameHelper,
  createEnumTypeGuards,
  createEnumVO,
  createEnumVOErrors,
  createStateTransitions,
} from 'src/shared/domain/value-objects';
import { Result, DomainError } from 'src/shared/errors';
import { MessageRequestErrors } from '../errors/message-request.errors';

// ============================================================================
// SINGLE SOURCE OF TRUTH
// ============================================================================

/**
 * MessageRequestStatus allowed values
 * Canonical definition used across all layers (API, Domain, DB)
 */
export const MessageRequestStatusValues = [
  'requested',
  'validated',
  'queued',
  'failed',
] as const;
export type MessageRequestStatusValue =
  (typeof MessageRequestStatusValues)[number];

// ============================================================================
// VALUE OBJECT - Domain Layer
// ============================================================================

/**
 * MessageRequestStatus Value Object
 *
 * Provides validation, business rules, and rich domain behavior
 * for messageRequest status enumerated values.
 *
 * @example
 * ```typescript
 * const status = MessageRequestStatus.create('requested');
 * if (status.ok) {
 *   console.log(status.value.canTransitionTo('validated'));
 * }
 * ```
 */
export const MessageRequestStatus = createEnumVO({
  name: 'MessageRequestStatus',
  values: MessageRequestStatusValues,

  errors: createEnumVOErrors(
    MessageRequestErrors.INVALID_STATUS,
    'MessageRequestStatus',
  ),
});

export type MessageRequestStatus = EnumVOInstance<MessageRequestStatusValue>;

// ============================================================================
// CONVENIENCE FACTORIES
// ============================================================================

export const createMessageRequestStatus = (
  value: MessageRequestStatusValue | undefined,
) =>
  MessageRequestStatus.create(value) as Result<
    MessageRequestStatus,
    DomainError
  >;
export const messageRequestStatusFrom = (value: unknown) =>
  MessageRequestStatus.from(value) as Result<MessageRequestStatus, DomainError>;

// ============================================================================
// BUSINESS LOGIC HELPERS - Domain Behavior
// ============================================================================

/**
 * Valid state transitions for messageRequest status
 */
const MESSAGE_REQUEST_STATUS_TRANSITIONS = {
  requested: ['validated', 'queued', 'failed'] as const,
  validated: ['requested', 'queued', 'failed'] as const,
  queued: ['requested', 'validated', 'failed'] as const,
  failed: ['requested', 'validated', 'queued'] as const,
} as const;

/**
 * Display names for messageRequest status values
 */
const MESSAGE_REQUEST_STATUS_DISPLAY_NAMES = {
  requested: 'Requested',
  validated: 'Validated',
  queued: 'Queued',
  failed: 'Failed',
} as const;

/**
 * State machine helpers for MessageRequestStatus transitions
 */
const MessageRequestStatusTransitions = createStateTransitions(
  MESSAGE_REQUEST_STATUS_TRANSITIONS,
);

/**
 * Type guards for MessageRequestStatus values
 */
const MessageRequestStatusGuards = createEnumTypeGuards(
  MessageRequestStatusValues,
  'MessageRequestStatus',
  (value, validValues) => ({
    ...MessageRequestErrors.INVALID_STATUS,
    detail: `MessageRequestStatus must be one of: ${validValues.join(', ')}, received: ${String(value)}`,
    context: { value, validValues },
  }),
);

/**
 * Display name helpers for MessageRequestStatus
 */
const MessageRequestStatusDisplay = createDisplayNameHelper(
  MESSAGE_REQUEST_STATUS_DISPLAY_NAMES,
);

/**
 * Business logic functions for MessageRequestStatus
 */
export const MessageRequestStatusLogic = {
  /**
   * Check if transition from one state to another is valid
   */
  canTransition: (
    from: MessageRequestStatusValue,
    to: MessageRequestStatusValue,
  ): boolean => MessageRequestStatusTransitions.canTransition(from, to),

  /**
   * Get all valid next states from current state
   */
  getValidTransitions: (
    from: MessageRequestStatusValue,
  ): readonly MessageRequestStatusValue[] =>
    MessageRequestStatusTransitions.getValidTransitions(from),

  /**
   * Get human-readable display name
   */
  getDisplayName: (value: MessageRequestStatusValue): string =>
    MessageRequestStatusDisplay.getDisplayName(value),

  /**
   * Get all available values with metadata
   */
  getAllValues(): Array<{
    value: MessageRequestStatusValue;
    displayName: string;
    validTransitions: readonly MessageRequestStatusValue[];
  }> {
    return MessageRequestStatusValues.map((value) => ({
      value,
      displayName: MessageRequestStatusLogic.getDisplayName(value),
      validTransitions: MessageRequestStatusLogic.getValidTransitions(value),
    }));
  },
} as const;

// ============================================================================
// TYPE GUARDS - Runtime Type Checking
// ============================================================================

/**
 * Type guard to check if value is valid MessageRequestStatus
 */
export const isMessageRequestStatusValue = (
  value: unknown,
): value is MessageRequestStatusValue =>
  MessageRequestStatusGuards.isValid(value);

/**
 * Assert that value is valid MessageRequestStatus (throws if invalid)
 */
export const assertMessageRequestStatusValue = (
  value: unknown,
): asserts value is MessageRequestStatusValue =>
  MessageRequestStatusGuards.assert(value);
