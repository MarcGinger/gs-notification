// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { DomainError, Result, ok, err } from 'src/shared/errors';
import {
  createIntegerVO,
  createIntegerVOErrors,
  IntegerVOInstance,
  createDateTimeVO,
  createDateTimeVOErrors,
  DateTimeVOInstance,
} from 'src/shared/domain/value-objects';
import { Clock } from 'src/shared/domain/clock';
import { MessageRequestErrors } from '../errors/message-request.errors';

/**
 * MessageRequest Instance Value Objects
 *
 * Instance VOs for MessageRequest aggregate lifecycle management.
 * Includes creation timestamps, update timestamps, and version tracking.
 * Follows the Clock injection pattern for deterministic testing.
 */

// ===========================================
// MessageRequest Created At Instance VO
// ===========================================

const MessageRequestCreatedAtErrors = createDateTimeVOErrors(
  MessageRequestErrors.CREATED_AT_REQUIRED,
  'MessageRequest Created At',
);

export const MessageRequestCreatedAt = createDateTimeVO({
  name: 'MessageRequestCreatedAt',
  allowFuture: false, // Cannot create message_request in the future
  allowPast: true, // Can create with past timestamps (data migration)
  customValidation: (date: Date): Result<void, DomainError> => {
    // Optional: Add domain-specific creation time validation
    // For example, cannot be more than 1 year in the past
    const oneYearAgo = new Date();
    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);

    if (date < oneYearAgo) {
      return err({
        ...MessageRequestErrors.CREATED_AT_REQUIRED,
        detail:
          'MessageRequest creation date cannot be more than 1 year in the past',
        context: { value: date, maxPastDate: oneYearAgo },
      } as DomainError);
    }

    return ok(undefined);
  },
  errors: MessageRequestCreatedAtErrors,
});

export type MessageRequestCreatedAt = DateTimeVOInstance;

// ===========================================
// MessageRequest Updated At Instance VO
// ===========================================

const MessageRequestUpdatedAtErrors = createDateTimeVOErrors(
  MessageRequestErrors.UPDATED_AT_REQUIRED,
  'MessageRequest Updated At',
);

export const MessageRequestUpdatedAt = createDateTimeVO({
  name: 'MessageRequestUpdatedAt',
  allowFuture: false, // Cannot update message_request in the future
  allowPast: true, // Can update with past timestamps (data correction)
  errors: MessageRequestUpdatedAtErrors,
});

export type MessageRequestUpdatedAt = DateTimeVOInstance;

// ===========================================
// MessageRequest Version Instance VO
// ===========================================

const MessageRequestVersionErrors = createIntegerVOErrors(
  MessageRequestErrors.INVALID_CODE_DATA, // Reusing existing error until specific version error is added
  'MessageRequest Version',
);

export const MessageRequestVersion = createIntegerVO({
  name: 'MessageRequestVersion',
  min: 0, // Version starts at 0
  allowNegative: false,
  errors: MessageRequestVersionErrors,
});

export type MessageRequestVersion = IntegerVOInstance;

// ===========================================
// Clock-Based Helper Functions (Explicit Dependencies)
// ===========================================

/**
 * Create MessageRequestCreatedAt from Clock (explicit dependency)
 * Deterministic and testable - pass a fake clock in tests
 */
export const createdAtNow = (
  clock: Clock,
): Result<MessageRequestCreatedAt, DomainError> =>
  MessageRequestCreatedAt.create(clock.now());

/**
 * Create MessageRequestUpdatedAt from Clock (explicit dependency)
 * Deterministic and testable - pass a fake clock in tests
 */
export const updatedAtNow = (
  clock: Clock,
): Result<MessageRequestUpdatedAt, DomainError> =>
  MessageRequestUpdatedAt.create(clock.now());

/**
 * Bump version by 1 (domain business rule)
 */
export const bumpVersion = (
  currentVersion: MessageRequestVersion,
): Result<MessageRequestVersion, DomainError> =>
  MessageRequestVersion.create(currentVersion.value + 1);

/**
 * Create initial version (starts at 1 for new aggregates)
 */
export const initialVersion = (): Result<MessageRequestVersion, DomainError> =>
  MessageRequestVersion.create(1);

// ===========================================
// Direct Creation Functions (Non-Clock Based)
// ===========================================

/**
 * Create MessageRequestCreatedAt from Date
 */
export const createMessageRequestCreatedAt = (
  date: Date,
): Result<MessageRequestCreatedAt, DomainError> =>
  MessageRequestCreatedAt.create(date);

/**
 * Create MessageRequestUpdatedAt from Date
 */
export const createMessageRequestUpdatedAt = (
  date: Date,
): Result<MessageRequestUpdatedAt, DomainError> =>
  MessageRequestUpdatedAt.create(date);

/**
 * Create MessageRequestVersion from number
 */
export const createMessageRequestVersion = (
  version: number,
): Result<MessageRequestVersion, DomainError> =>
  MessageRequestVersion.create(version);

// ===========================================
// Domain Invariants & Validation
// ===========================================

/**
 * Validate that updatedAt is not before createdAt (monotonic time)
 */
export const validateMonotonicTime = (
  createdAt: MessageRequestCreatedAt,
  updatedAt: MessageRequestUpdatedAt,
): Result<void, DomainError> => {
  if (updatedAt.value < createdAt.value) {
    return err({
      ...MessageRequestErrors.UPDATED_AT_REQUIRED,
      detail: 'Updated at cannot be before created at',
      context: {
        createdAt: createdAt.value.toISOString(),
        updatedAt: updatedAt.value.toISOString(),
      },
    } as DomainError);
  }
  return ok(undefined);
};

// ===========================================
// Legacy Compatibility (DEPRECATED)
// ===========================================

/**
 * @deprecated Use createdAtNow(clock) instead for better testability
 * This function hides the Date dependency and makes testing harder
 */
export function createMessageRequestCreatedAtNow(): Result<
  MessageRequestCreatedAt,
  DomainError
> {
  return MessageRequestCreatedAt.create(new Date());
}

/**
 * @deprecated Use updatedAtNow(clock) instead for better testability
 * This function hides the Date dependency and makes testing harder
 */
export function createMessageRequestUpdatedAtNow(): Result<
  MessageRequestUpdatedAt,
  DomainError
> {
  return MessageRequestUpdatedAt.create(new Date());
}
