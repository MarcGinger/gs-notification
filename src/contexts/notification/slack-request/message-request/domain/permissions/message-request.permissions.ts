// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import {
  PermissionRiskLevel,
  PermissionTenantScope,
  PermissionOperationType,
  BasePermissionMeta,
} from 'src/shared/domain/permissions';
import {
  createPermissionRegistry,
  createRoleHierarchy,
  assertRegistryComplete,
} from 'src/shared/domain/permissions/utils';
import { createDomainPermissionHelpers } from 'src/shared/domain/permissions/domain-permission-helpers.factory';

export enum MessageRequestPermission {
  DOMAIN_MESSAGE_REQUEST_CREATE = 'DOMAIN_MESSAGE_REQUEST_CREATE',
  DOMAIN_MESSAGE_REQUEST_READ = 'DOMAIN_MESSAGE_REQUEST_READ',
  DOMAIN_MESSAGE_REQUEST_UPDATE = 'DOMAIN_MESSAGE_REQUEST_UPDATE',
  DOMAIN_MESSAGE_REQUEST_DELETE = 'DOMAIN_MESSAGE_REQUEST_DELETE',
  DOMAIN_MESSAGE_REQUEST_ADMIN = 'DOMAIN_MESSAGE_REQUEST_ADMIN',
  DOMAIN_MESSAGE_REQUEST_BULK_IMPORT = 'DOMAIN_MESSAGE_REQUEST_BULK_IMPORT',
  DOMAIN_MESSAGE_REQUEST_BULK_EXPORT = 'DOMAIN_MESSAGE_REQUEST_BULK_EXPORT',
  DOMAIN_MESSAGE_REQUEST_AUDIT_LOG = 'DOMAIN_MESSAGE_REQUEST_AUDIT_LOG',
}

// Permission registry using shared utilities
export const MessageRequestPermissionRegistry = createPermissionRegistry<
  string,
  Record<string, BasePermissionMeta>
>({
  [MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_CREATE]: {
    description: 'Create messageRequest records',
    riskLevel: PermissionRiskLevel.MEDIUM,
    requiresJustification: false,
    relatedPermissions: [],
    policyPath: 'TENANT.message-request.message_request_create',
    category: 'Core Operations',
    auditRequired: true,
    name: 'DOMAIN_MESSAGE_REQUEST_CREATE',
    action: 'message_request_create',
    tags: ['crud', 'create'],
    operationType: PermissionOperationType.CRUD,
    policyRuleId: 'message-request_message_request_create',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.message-request.message_request_create',
  },
  [MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_READ]: {
    description: 'Read messageRequest records',
    riskLevel: PermissionRiskLevel.LOW,
    requiresJustification: false,
    relatedPermissions: [],
    policyPath: 'TENANT.message-request.message_request_read',
    category: 'Core Operations',
    auditRequired: false,
    name: 'DOMAIN_MESSAGE_REQUEST_READ',
    action: 'message_request_read',
    tags: ['crud', 'read'],
    operationType: PermissionOperationType.CRUD,
    policyRuleId: 'message-request_message_request_read',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.message-request.message_request_read',
  },
  [MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_UPDATE]: {
    description: 'Update messageRequest records',
    riskLevel: PermissionRiskLevel.MEDIUM,
    requiresJustification: false,
    relatedPermissions: [MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_READ],
    policyPath: 'TENANT.message-request.message_request_update',
    category: 'Core Operations',
    auditRequired: true,
    name: 'DOMAIN_MESSAGE_REQUEST_UPDATE',
    action: 'message_request_update',
    tags: ['crud', 'update'],
    operationType: PermissionOperationType.CRUD,
    policyRuleId: 'message-request_message_request_update',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.message-request.message_request_update',
  },
  [MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_DELETE]: {
    description: 'Delete messageRequest records',
    riskLevel: PermissionRiskLevel.HIGH,
    requiresJustification: true,
    relatedPermissions: [
      MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_READ,
      MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_UPDATE,
    ],
    policyPath: 'TENANT.message-request.message_request_delete',
    category: 'Core Operations',
    auditRequired: true,
    name: 'DOMAIN_MESSAGE_REQUEST_DELETE',
    action: 'message_request_delete',
    tags: ['crud', 'delete'],
    operationType: PermissionOperationType.CRUD,
    policyRuleId: 'message-request_message_request_delete',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.message-request.message_request_delete',
  },
  [MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_ADMIN]: {
    description: 'Full administrative access to messageRequest',
    riskLevel: PermissionRiskLevel.CRITICAL,
    requiresJustification: true,
    relatedPermissions: [
      MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_CREATE,
      MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_READ,
      MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_UPDATE,
      MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_DELETE,
    ],
    policyPath: 'TENANT.message-request.message_request_admin',
    category: 'Administrative',
    auditRequired: true,
    name: 'DOMAIN_MESSAGE_REQUEST_ADMIN',
    action: 'message_request_admin',
    tags: ['admin', 'full-access'],
    operationType: PermissionOperationType.ADMIN,
    policyRuleId: 'message-request_message_request_admin',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.message-request.message_request_admin',
  },
  [MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_BULK_IMPORT]: {
    description: 'Bulk import messageRequest records',
    riskLevel: PermissionRiskLevel.HIGH,
    requiresJustification: true,
    relatedPermissions: [],
    policyPath: 'TENANT.message-request.message_request_bulk_import',
    category: 'Bulk Operations',
    auditRequired: true,
    name: 'DOMAIN_MESSAGE_REQUEST_BULK_IMPORT',
    action: 'message_request_bulk_import',
    tags: ['bulk', 'import'],
    operationType: PermissionOperationType.BULK,
    policyRuleId: 'message-request_message_request_bulk_import',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.message-request.message_request_bulk_import',
  },
  [MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_BULK_EXPORT]: {
    description: 'Bulk export messageRequest records',
    riskLevel: PermissionRiskLevel.HIGH,
    requiresJustification: true,
    relatedPermissions: [],
    policyPath: 'TENANT.message-request.message_request_bulk_export',
    category: 'Bulk Operations',
    auditRequired: true,
    name: 'DOMAIN_MESSAGE_REQUEST_BULK_EXPORT',
    action: 'message_request_bulk_export',
    tags: ['bulk', 'export'],
    operationType: PermissionOperationType.BULK,
    policyRuleId: 'message-request_message_request_bulk_export',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.message-request.message_request_bulk_export',
  },
  [MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_AUDIT_LOG]: {
    description: 'Access messageRequest audit logs',
    riskLevel: PermissionRiskLevel.HIGH,
    requiresJustification: true,
    relatedPermissions: [],
    policyPath: 'TENANT.message-request.message_request_audit_log',
    category: 'Audit & Compliance',
    auditRequired: true,
    name: 'DOMAIN_MESSAGE_REQUEST_AUDIT_LOG',
    action: 'message_request_audit_log',
    tags: ['audit', 'logs'],
    operationType: PermissionOperationType.SENSITIVE,
    policyRuleId: 'message-request_message_request_audit_log',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.message-request.message_request_audit_log',
  },
});

// Role hierarchy using shared utilities
export const MessageRequestPermissionHierarchy = createRoleHierarchy<
  string,
  Record<string, readonly string[]>
>({
  MessageRequestViewer: [MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_READ],
  MessageRequestEditor: [
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_CREATE,
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_READ,
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_UPDATE,
  ],
  MessageRequestManager: [
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_CREATE,
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_READ,
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_UPDATE,
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_DELETE,
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_BULK_IMPORT,
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_BULK_EXPORT,
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_AUDIT_LOG,
  ],
  MessageRequestAdmin: [
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_CREATE,
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_READ,
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_UPDATE,
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_DELETE,
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_ADMIN,
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_BULK_IMPORT,
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_BULK_EXPORT,
    MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_AUDIT_LOG,
  ],
});

// Runtime completeness validation
const ALL_MESSAGE_REQUEST_PERMISSIONS = Object.values(MessageRequestPermission);
assertRegistryComplete(
  ALL_MESSAGE_REQUEST_PERMISSIONS,
  MessageRequestPermissionRegistry,
);

/**
 * MessageRequest-specific field permission matrix for field-level security
 */
const MESSAGE_REQUEST_FIELD_PERMISSION_MATRIX = {
  metadata: [MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_ADMIN],
  bulkImport: [MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_BULK_IMPORT],
  bulkExport: [MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_BULK_EXPORT],
} as const;

/**
 * Factory-generated MessageRequestPermissionHelpers with full functionality
 * This includes all methods needed by the authorization system:
 * - getRiskLevel, requiresJustification, isHighRisk
 * - getPolicyPath, requiresAudit (needed by message-request.resource.ts)
 * - getByRiskLevel, expandWithRelated, etc.
 * - Field-level permission logic with FIELD_PERMISSION_MATRIX
 */
export const MessageRequestPermissionHelpers = createDomainPermissionHelpers({
  domain: 'message-request',
  permissions: MessageRequestPermission,
  registry: MessageRequestPermissionRegistry,
  fieldMatrix: MESSAGE_REQUEST_FIELD_PERMISSION_MATRIX,
});

// Add domain-specific convenience methods
export const MessageRequestPermissionUtils = {
  /**
   * Get minimum permissions for basic messageRequest management
   */
  getBasicManagementPermissions(): MessageRequestPermission[] {
    return [
      MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_READ,
      MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_CREATE,
      MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_UPDATE,
    ];
  },

  /**
   * Check if user can perform bulk operations
   */
  canPerformBulkOperations(
    userPermissions: MessageRequestPermission[],
  ): boolean {
    return [
      MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_BULK_IMPORT,
      MessageRequestPermission.DOMAIN_MESSAGE_REQUEST_BULK_EXPORT,
    ].some((perm) => userPermissions.includes(perm));
  },
} as const;
