// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { DomainError, Result, err, ok, withContext } from 'src/shared/errors';
import { Clock } from 'src/shared/domain/clock';
import { EventMetadata } from 'src/shared/domain/events';
import { MessageRequestAggregate } from '../aggregates';
import { MessageRequestEntity } from '../entities';
import {
  MessageRequestSnapshotProps,
  UpdateMessageRequestProps,
} from '../props';
import { ValidatedMessageRequestUpdateFields } from '../types';
import {
  MessageRequestWorkspaceId,
  MessageRequestTemplateCode,
  MessageRequestRecipient,
  MessageRequestData,
  createMessageRequestStatus,
} from '../value-objects';

/**
 * Update MessageRequest Aggregate Factory
 *
 * Handles the complete update flow for MessageRequest aggregates:
 * 1. Loads existing aggregate from snapshot
 * 2. Validates update properties and creates value objects
 * 3. Applies updates with proper business rule enforcement
 * 4. Returns updated aggregate ready for persistence
 *
 * This factory provides:
 * - Consistent update pattern matching create operations
 * - Centralized validation and business logic
 * - Efficient batch updates vs field-by-field
 * - Proper error context and logging integration
 */
export function updateMessageRequestAggregateFromSnapshot(
  existingSnapshot: MessageRequestSnapshotProps,
  updateProps: UpdateMessageRequestProps,
  metadata: EventMetadata,
  clock: Clock,
): Result<MessageRequestAggregate, DomainError> {
  // 1. Reconstitute existing aggregate
  const entityResult = MessageRequestEntity.fromSnapshot(existingSnapshot);
  if (!entityResult.ok) {
    return err(
      withContext(entityResult.error, {
        operation: 'update_message_request_reconstitute',
        correlationId: metadata.correlationId,
        userId: metadata.actor?.userId,
      }),
    );
  }

  const existingAggregate = MessageRequestAggregate.reconstitute(
    entityResult.value,
    clock,
    metadata,
  );

  // 2. Validate and apply updates for each provided field
  const validatedFields: ValidatedMessageRequestUpdateFields = {};

  // Validate workspaceId if provided
  if (updateProps.workspaceId !== undefined) {
    const workspaceIdResult = MessageRequestWorkspaceId.from(
      updateProps.workspaceId,
    );
    if (!workspaceIdResult.ok) {
      return err(
        withContext(workspaceIdResult.error, {
          operation: 'update_message_request_workspace_id_validation',
          correlationId: metadata.correlationId,
          userId: metadata.actor?.userId,
          providedWorkspaceId: updateProps.workspaceId,
        }),
      );
    }
    validatedFields.workspaceId = workspaceIdResult.value;
  }

  // Validate templateCode if provided
  if (updateProps.templateCode !== undefined) {
    const templateCodeResult = MessageRequestTemplateCode.from(
      updateProps.templateCode,
    );
    if (!templateCodeResult.ok) {
      return err(
        withContext(templateCodeResult.error, {
          operation: 'update_message_request_template_code_validation',
          correlationId: metadata.correlationId,
          userId: metadata.actor?.userId,
          providedTemplateCode: updateProps.templateCode,
        }),
      );
    }
    validatedFields.templateCode = templateCodeResult.value;
  }

  // Validate recipient if provided
  if (updateProps.recipient !== undefined) {
    const recipientResult = MessageRequestRecipient.from(updateProps.recipient);
    if (!recipientResult.ok) {
      return err(
        withContext(recipientResult.error, {
          operation: 'update_message_request_recipient_validation',
          correlationId: metadata.correlationId,
          userId: metadata.actor?.userId,
          providedRecipient: updateProps.recipient,
        }),
      );
    }
    validatedFields.recipient = recipientResult.value;
  }

  // Validate data if provided
  if (updateProps.data !== undefined) {
    const dataResult = MessageRequestData.from(updateProps.data);
    if (!dataResult.ok) {
      return err(
        withContext(dataResult.error, {
          operation: 'update_message_request_data_validation',
          correlationId: metadata.correlationId,
          userId: metadata.actor?.userId,
          providedData: updateProps.data,
        }),
      );
    }
    validatedFields.data = dataResult.value;
  }

  // Validate status if provided
  if (updateProps.status !== undefined) {
    const statusResult = createMessageRequestStatus(updateProps.status);
    if (!statusResult.ok) {
      return err(
        withContext(statusResult.error, {
          operation: 'update_message_request_status_validation',
          correlationId: metadata.correlationId,
          userId: metadata.actor?.userId,
          providedStatus: updateProps.status,
        }),
      );
    }
    validatedFields.status = statusResult.value;
  }

  // 3. Apply all validated changes in single atomic operation
  const batchUpdateResult = existingAggregate.updateBatch(validatedFields);
  if (!batchUpdateResult.ok) {
    return err(
      withContext(batchUpdateResult.error, {
        operation: 'update_product_batch_application',
        correlationId: metadata.correlationId,
        userId: metadata.actor?.userId,
        fieldsUpdated: Object.keys(validatedFields),
      }),
    );
  }

  return ok(existingAggregate);
}
