// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { DomainError, Result, err, withContext, ok } from 'src/shared/errors';
import { Clock } from 'src/shared/domain/clock';
import { EventMetadata } from 'src/shared/domain/events';
import { MessageRequestAggregate } from '../aggregates';
import { CreateMessageRequestProps } from '../props';
import { MessageRequestDomainState } from '../state';
import {
  MessageRequestCreatedAt,
  MessageRequestUpdatedAt,
  MessageRequestVersion,
  MessageRequestId,
  MessageRequestWorkspaceId,
  MessageRequestTemplateCode,
  MessageRequestRecipient,
  MessageRequestData,
  createMessageRequestStatus,
} from '../value-objects';

/**
 * Enhanced messageRequest entity factory with comprehensive validation and security context
 * Moved from application layer to properly separate business concerns
 */
export function createMessageRequestAggregateFromProps(
  props: CreateMessageRequestProps,
  metadata: EventMetadata,
  clock: Clock,
  // validatedEntities?: {
  //  channels?: ChannelReference[];
  // },
): Result<MessageRequestAggregate, DomainError> {
  // Validate each property by creating value objects
  // Generate a validate identity column UUID
  const idResult = MessageRequestId.generate();
  if (!idResult.ok) {
    return err(
      withContext(idResult.error, {
        ...idResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_message_request',
      }),
    );
  }

  const workspaceIdResult = MessageRequestWorkspaceId.from(props.workspaceId);
  if (!workspaceIdResult.ok) {
    return err(
      withContext(workspaceIdResult.error, {
        ...workspaceIdResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_message_request',
        workspaceId: props.workspaceId,
      }),
    );
  }

  const templateCodeResult = MessageRequestTemplateCode.from(
    props.templateCode,
  );
  if (!templateCodeResult.ok) {
    return err(
      withContext(templateCodeResult.error, {
        ...templateCodeResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_message_request',
        templateCode: props.templateCode,
      }),
    );
  }

  const recipientResult = MessageRequestRecipient.from(props.recipient);
  if (!recipientResult.ok) {
    return err(
      withContext(recipientResult.error, {
        ...recipientResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_message_request',
        recipient: props.recipient,
      }),
    );
  }

  const dataResult = MessageRequestData.from(props.data);
  if (!dataResult.ok) {
    return err(
      withContext(dataResult.error, {
        ...dataResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_message_request',
        data: props.data,
      }),
    );
  }

  const statusResult = createMessageRequestStatus(props.status);
  if (!statusResult.ok) {
    return err(
      withContext(statusResult.error, {
        ...statusResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_message_request',
        status: props.status,
      }),
    );
  }

  const createdAtResult = MessageRequestCreatedAt.create(clock.now());
  if (!createdAtResult.ok) {
    return err(createdAtResult.error);
  }

  const updatedAtResult = MessageRequestUpdatedAt.create(clock.now());
  if (!updatedAtResult.ok) {
    return err(updatedAtResult.error);
  }

  const versionResult = MessageRequestVersion.create(1); // Initial version is 1
  if (!versionResult.ok) {
    return err(versionResult.error);
  }

  // Create the entity properties with validated value objects
  const entityProps: MessageRequestDomainState = {
    id: idResult.value,
    workspaceId: workspaceIdResult.value,
    templateCode: templateCodeResult.value,
    recipient: recipientResult.value,
    data: dataResult.value,
    status: statusResult.value,
    createdAt: createdAtResult.value,
    updatedAt: updatedAtResult.value,
    version: versionResult.value,
  };

  // Create the entity using the constructor
  return MessageRequestAggregate.create(entityProps, clock, metadata);
}
