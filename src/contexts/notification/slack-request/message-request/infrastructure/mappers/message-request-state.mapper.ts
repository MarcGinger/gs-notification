// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * MessageRequest State Infrastructure Mappers
 *
 * Bidirectional mapping between pure VO domain state and primitive persistence snapshot.
 * Handles conversion between rich domain objects and raw database data.
 */

import {
  MessageRequestCreatedAt,
  MessageRequestUpdatedAt,
  MessageRequestVersion,
  MessageRequestId,
  MessageRequestRecipient,
  MessageRequestData,
  createMessageRequestStatus,
  MessageRequestWorkspaceCode,
  MessageRequestTemplateCode,
  MessageRequestChannelCode,
} from '../../domain/value-objects';
import { Result, ok, err, DomainError } from 'src/shared/errors';
import { MessageRequestDomainState } from '../../domain/state/message-request.state';
import { MessageRequestSnapshotProps } from '../../domain/props';

/**
 * Infrastructure State Mapper
 *
 * Handles conversion between domain VOs and persistence primitives.
 * This is where primitive obsession is eliminated - converting between
 * rich domain objects and raw database data.
 */
export class MessageRequestStateMapper {
  /**
   * Convert primitive persistence snapshot to rich domain state
   *
   * @param snapshot - Raw database/persistence data
   * @returns Rich domain state with VOs or error
   */
  static toDomain(
    snapshot: MessageRequestSnapshotProps,
  ): Result<MessageRequestDomainState, DomainError> {
    const errors: Array<{ field: string; error: DomainError }> = [];

    // Helper function to validate and collect errors
    const validateField = <T>(
      fieldName: string,
      result: Result<T, DomainError>,
    ): T | null => {
      if (!result.ok) {
        errors.push({ field: fieldName, error: result.error });
        return null;
      }
      return result.value;
    };

    // Convert each primitive to its corresponding VO with error collection
    const id = validateField('id', MessageRequestId.from(snapshot.id));
    const recipient = snapshot.recipient
      ? validateField(
          'recipient',
          MessageRequestRecipient.from(snapshot.recipient),
        )
      : undefined;
    const data = snapshot.data
      ? validateField('data', MessageRequestData.from(snapshot.data))
      : undefined;
    const status = validateField(
      'status',
      createMessageRequestStatus(snapshot.status),
    );
    const workspaceCode = validateField(
      'workspaceCode',
      MessageRequestWorkspaceCode.from(snapshot.workspaceCode),
    );
    const templateCode = validateField(
      'templateCode',
      MessageRequestTemplateCode.from(snapshot.templateCode),
    );
    const channelCode = snapshot.channelCode
      ? validateField(
          'channelCode',
          MessageRequestChannelCode.from(snapshot.channelCode),
        )
      : undefined;
    const version = validateField(
      'version',
      MessageRequestVersion.from(snapshot.version),
    );
    const createdAt = validateField(
      'createdAt',
      MessageRequestCreatedAt.from(snapshot.createdAt),
    );
    const updatedAt = validateField(
      'updatedAt',
      MessageRequestUpdatedAt.from(snapshot.updatedAt),
    );

    // If any validations failed, return aggregated error
    if (errors.length > 0) {
      return err({
        code: 'MESSAGE_REQUEST.MAPPER_VALIDATION_FAILED',
        title: 'Domain State Mapping Failed',
        detail: `Failed to create domain state from persistence snapshot. ${errors.length} validation error(s) occurred.`,
        category: 'infrastructure',
        retryable: false,
        context: {
          validationErrors: errors.map((e) => ({
            field: e.field,
            errorCode: e.error.code,
            errorMessage: e.error.detail,
          })),
          snapshotCode: snapshot.id,
        },
      });
    }

    // All validations passed, construct the rich domain state
    const domainState: MessageRequestDomainState = {
      id: id!,
      recipient: recipient || undefined,
      data: data || undefined,
      status: status || undefined,
      workspaceCode: workspaceCode!,
      templateCode: templateCode!,
      channelCode: channelCode || undefined,
      version: version!,
      createdAt: createdAt!,
      updatedAt: updatedAt!,
    };

    return ok(domainState);
  }

  /**
   * Convert rich domain state to primitive persistence snapshot
   *
   * @param domainState - Rich domain state with VOs
   * @returns Raw persistence data for database storage
   */
  static toSnapshot(
    domainState: MessageRequestDomainState,
  ): MessageRequestSnapshotProps {
    return {
      // Extract primitive values from VOs
      id: domainState.id.value,
      recipient: domainState.recipient?.value,
      data: domainState.data?.value,
      status: domainState.status?.value,
      workspaceCode: domainState.workspaceCode.value,
      templateCode: domainState.templateCode.value,
      channelCode: domainState.channelCode?.value,
      version: domainState.version.value,
      createdAt: domainState.createdAt.value,
      updatedAt: domainState.updatedAt.value,
    };
  }
}
