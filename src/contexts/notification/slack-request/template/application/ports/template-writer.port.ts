// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Result, DomainError } from 'src/shared/errors';
import { ActorContext } from 'src/shared/application/context';
import { SaveReceipt } from 'src/shared/infrastructure/repositories';
import { TemplateAggregate } from '../../domain/aggregates';
import { TemplateCode } from '../../domain/value-objects';

/**
 * Token for injecting ITemplateWriter port implementation
 */
export const TEMPLATE_WRITER_TOKEN = 'ITemplateWriter' as const;

/**
 * Template Writer Port - Interface Segregation Principle Implementation
 *
 * Handles write operations (create, update, delete) for Template aggregates.
 * This interface focuses solely on data modification operations.
 *
 * ISP Benefits:
 * - Clients that only need to write data don't depend on read methods
 * - Easier to implement write-only scenarios (e.g., event sourcing)
 * - Can be secured separately from read operations
 * - Supports command-only patterns in CQRS architectures
 *
 * @domain Notification Context - Template Writer Port
 * @layer Application Ports
 * @pattern Interface Segregation Principle
 */
export interface ITemplateWriter {
  /**
   * Save a Template aggregate (create or update)
   * @param user - The authenticated user context
   * @param template - The Template aggregate to save
   * @param expectedVersion - Optional version for optimistic locking
   * @returns Result indicating success or domain error
   */
  save(
    actor: ActorContext,
    template: TemplateAggregate,
    expectedVersion?: number,
  ): Promise<Result<SaveReceipt, DomainError>>;

  /**
   * Delete a Template by its unique identifier
   * @param user - The authenticated user context
   * @param code - The unique identifier of the Template to delete
   * @returns Result indicating success or domain error
   */
  delete(
    actor: ActorContext,
    code: TemplateCode,
  ): Promise<Result<SaveReceipt, DomainError>>;
}
