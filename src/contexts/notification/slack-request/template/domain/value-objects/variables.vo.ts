// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import {
  CollectionVOInstance,
  StringVOInstance,
  createCollectionVO,
  createCollectionVOErrors,
  createStringVO,
  createStringVOErrors,
} from 'src/shared/domain/value-objects';
import { TemplateErrors } from '../errors/template.errors';

/**
 * VariablesItem Value Object
 * Represents a validated variablesItem with business rules
 */
export const TemplateVariablesItem = createStringVO({
  name: 'VariablesItem',
  trim: true,
  caseTransform: 'none',
  allowEmpty: true,

  // Optional: declarative refinements for advanced validation
  // refinements: [
  // ],

  errors: createStringVOErrors(
    TemplateErrors.INVALID_VARIABLES,
    'VariablesItem',
  ),
});

/**
 * Public instance type for VariablesItem
 */
export type TemplateVariablesItemType = StringVOInstance;

// Convenience creators
export const createTemplateVariablesItem = (s: string) =>
  TemplateVariablesItem.create(s);
export const variablesItemFrom = (v: unknown) => TemplateVariablesItem.from(v);

/**
 * Collection Value Object for Template Variables
 * Encapsulates array of variables with collection-level business rules
 *
 * Migrated to generic createCollectionVO for enhanced type safety and consistency.
 */
export const TemplateVariables = createCollectionVO<
  string,
  TemplateVariablesItemType
>({
  name: 'Variables',
  itemName: TemplateVariablesItem.name,
  itemFactory: TemplateVariablesItem,
  allowEmpty: true,
  allowDuplicates: false,

  errors: createCollectionVOErrors(
    TemplateErrors.INVALID_VARIABLES_DATA,
    'Template Variables',
  ),
  businessMethods: [],
});

/** Public type for TemplateVariables */
export type TemplateVariables = CollectionVOInstance<
  string,
  TemplateVariablesItemType
>;

// Convenience creators
export const createTemplateVariables = (codes: string[]) =>
  TemplateVariables.create(codes);
