// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Result, DomainError } from 'src/shared/errors';
import { RepositoryOptions } from 'src/shared/infrastructure/repositories';
import { ActorContext } from 'src/shared/application/context';
import { Option } from 'src/shared/domain/types';
import { WorkspaceSnapshotProps } from '../../domain/props';
import { WorkspaceCode } from '../../domain/value-objects';

/**
 * Token for injecting IWorkspaceReader port implementation
 */
export const WORKSPACE_READER_TOKEN = 'IWorkspaceReader' as const;

/**
 * Workspace Reader Port - Interface Segregation Principle Implementation
 *
 * Handles basic read operations for Workspace aggregates.
 * This interface focuses solely on simple retrieval operations.
 *
 * ISP Benefits:
 * - Clients only depend on methods they actually use
 * - Easier to mock and test specific read scenarios
 * - Can be implemented independently from write operations
 * - Supports read-only implementations (e.g., reporting services)
 *
 * @domain Notification Context - Workspace Reader Port
 * @layer Application Ports
 * @pattern Interface Segregation Principle
 */
export interface IWorkspaceReader {
  /**
   * Find a Workspace by its unique identifier
   * @param actor - The authenticated user context
   * @param code - The unique identifier of the Workspace
   * @param options - Optional repository options
   * @returns Result containing the Workspace snapshot or null if not found
   */
  findById(
    actor: ActorContext,
    code: WorkspaceCode,
    options?: RepositoryOptions,
  ): Promise<Result<Option<WorkspaceSnapshotProps>, DomainError>>;

  /**
   * Check if a workspace exists by ID (for write-path validation)
   * @param actor - The authenticated user context
   * @param code - The unique identifier of the Workspace
   * @param options - Optional repository options
   * @returns Result containing boolean indicating existence
   */
  exists(
    actor: ActorContext,
    code: WorkspaceCode,
    options?: RepositoryOptions,
  ): Promise<Result<boolean, DomainError>>;

  /**
   * Get workspace version for optimistic concurrency control
   * @param actor - The authenticated user context
   * @param code - The unique identifier of the Workspace
   * @param options - Optional repository options
   * @returns Result containing version number or null if not found
   */
  getVersion(
    actor: ActorContext,
    code: WorkspaceCode,
    options?: RepositoryOptions,
  ): Promise<Result<Option<number>, DomainError>>;

  /**
   * Get minimal workspace data for write-path operations
   * @param actor - The authenticated user context
   * @param code - The unique identifier of the Workspace
   * @param options - Optional repository options
   * @returns Result containing minimal workspace data or null if not found
   */
  getMinimal(
    actor: ActorContext,
    code: WorkspaceCode,
    options?: RepositoryOptions,
  ): Promise<Result<Option<{ code: string; version: number }>, DomainError>>;
}
