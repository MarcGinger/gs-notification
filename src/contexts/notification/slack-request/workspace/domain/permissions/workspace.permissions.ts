// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import {
  PermissionRiskLevel,
  PermissionTenantScope,
  PermissionOperationType,
  BasePermissionMeta,
} from 'src/shared/domain/permissions';
import {
  createPermissionRegistry,
  createRoleHierarchy,
  assertRegistryComplete,
} from 'src/shared/domain/permissions/utils';
import { createDomainPermissionHelpers } from 'src/shared/domain/permissions/domain-permission-helpers.factory';

export enum WorkspacePermission {
  DOMAIN_WORKSPACE_CREATE = 'DOMAIN_WORKSPACE_CREATE',
  DOMAIN_WORKSPACE_READ = 'DOMAIN_WORKSPACE_READ',
  DOMAIN_WORKSPACE_UPDATE = 'DOMAIN_WORKSPACE_UPDATE',
  DOMAIN_WORKSPACE_DELETE = 'DOMAIN_WORKSPACE_DELETE',
  DOMAIN_WORKSPACE_ADMIN = 'DOMAIN_WORKSPACE_ADMIN',
  DOMAIN_WORKSPACE_BULK_IMPORT = 'DOMAIN_WORKSPACE_BULK_IMPORT',
  DOMAIN_WORKSPACE_BULK_EXPORT = 'DOMAIN_WORKSPACE_BULK_EXPORT',
  DOMAIN_WORKSPACE_AUDIT_LOG = 'DOMAIN_WORKSPACE_AUDIT_LOG',
}

// Permission registry using shared utilities
export const WorkspacePermissionRegistry = createPermissionRegistry<
  string,
  Record<string, BasePermissionMeta>
>({
  [WorkspacePermission.DOMAIN_WORKSPACE_CREATE]: {
    description: 'Create workspace records',
    riskLevel: PermissionRiskLevel.MEDIUM,
    requiresJustification: false,
    relatedPermissions: [],
    policyPath: 'TENANT.workspace.workspace_create',
    category: 'Core Operations',
    auditRequired: true,
    name: 'DOMAIN_WORKSPACE_CREATE',
    action: 'workspace_create',
    tags: ['crud', 'create'],
    operationType: PermissionOperationType.CRUD,
    policyRuleId: 'workspace_workspace_create',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.workspace.workspace_create',
  },
  [WorkspacePermission.DOMAIN_WORKSPACE_READ]: {
    description: 'Read workspace records',
    riskLevel: PermissionRiskLevel.LOW,
    requiresJustification: false,
    relatedPermissions: [],
    policyPath: 'TENANT.workspace.workspace_read',
    category: 'Core Operations',
    auditRequired: false,
    name: 'DOMAIN_WORKSPACE_READ',
    action: 'workspace_read',
    tags: ['crud', 'read'],
    operationType: PermissionOperationType.CRUD,
    policyRuleId: 'workspace_workspace_read',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.workspace.workspace_read',
  },
  [WorkspacePermission.DOMAIN_WORKSPACE_UPDATE]: {
    description: 'Update workspace records',
    riskLevel: PermissionRiskLevel.MEDIUM,
    requiresJustification: false,
    relatedPermissions: [WorkspacePermission.DOMAIN_WORKSPACE_READ],
    policyPath: 'TENANT.workspace.workspace_update',
    category: 'Core Operations',
    auditRequired: true,
    name: 'DOMAIN_WORKSPACE_UPDATE',
    action: 'workspace_update',
    tags: ['crud', 'update'],
    operationType: PermissionOperationType.CRUD,
    policyRuleId: 'workspace_workspace_update',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.workspace.workspace_update',
  },
  [WorkspacePermission.DOMAIN_WORKSPACE_DELETE]: {
    description: 'Delete workspace records',
    riskLevel: PermissionRiskLevel.HIGH,
    requiresJustification: true,
    relatedPermissions: [
      WorkspacePermission.DOMAIN_WORKSPACE_READ,
      WorkspacePermission.DOMAIN_WORKSPACE_UPDATE,
    ],
    policyPath: 'TENANT.workspace.workspace_delete',
    category: 'Core Operations',
    auditRequired: true,
    name: 'DOMAIN_WORKSPACE_DELETE',
    action: 'workspace_delete',
    tags: ['crud', 'delete'],
    operationType: PermissionOperationType.CRUD,
    policyRuleId: 'workspace_workspace_delete',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.workspace.workspace_delete',
  },
  [WorkspacePermission.DOMAIN_WORKSPACE_ADMIN]: {
    description: 'Full administrative access to workspace',
    riskLevel: PermissionRiskLevel.CRITICAL,
    requiresJustification: true,
    relatedPermissions: [
      WorkspacePermission.DOMAIN_WORKSPACE_CREATE,
      WorkspacePermission.DOMAIN_WORKSPACE_READ,
      WorkspacePermission.DOMAIN_WORKSPACE_UPDATE,
      WorkspacePermission.DOMAIN_WORKSPACE_DELETE,
    ],
    policyPath: 'TENANT.workspace.workspace_admin',
    category: 'Administrative',
    auditRequired: true,
    name: 'DOMAIN_WORKSPACE_ADMIN',
    action: 'workspace_admin',
    tags: ['admin', 'full-access'],
    operationType: PermissionOperationType.ADMIN,
    policyRuleId: 'workspace_workspace_admin',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.workspace.workspace_admin',
  },
  [WorkspacePermission.DOMAIN_WORKSPACE_BULK_IMPORT]: {
    description: 'Bulk import workspace records',
    riskLevel: PermissionRiskLevel.HIGH,
    requiresJustification: true,
    relatedPermissions: [],
    policyPath: 'TENANT.workspace.workspace_bulk_import',
    category: 'Bulk Operations',
    auditRequired: true,
    name: 'DOMAIN_WORKSPACE_BULK_IMPORT',
    action: 'workspace_bulk_import',
    tags: ['bulk', 'import'],
    operationType: PermissionOperationType.BULK,
    policyRuleId: 'workspace_workspace_bulk_import',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.workspace.workspace_bulk_import',
  },
  [WorkspacePermission.DOMAIN_WORKSPACE_BULK_EXPORT]: {
    description: 'Bulk export workspace records',
    riskLevel: PermissionRiskLevel.HIGH,
    requiresJustification: true,
    relatedPermissions: [],
    policyPath: 'TENANT.workspace.workspace_bulk_export',
    category: 'Bulk Operations',
    auditRequired: true,
    name: 'DOMAIN_WORKSPACE_BULK_EXPORT',
    action: 'workspace_bulk_export',
    tags: ['bulk', 'export'],
    operationType: PermissionOperationType.BULK,
    policyRuleId: 'workspace_workspace_bulk_export',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.workspace.workspace_bulk_export',
  },
  [WorkspacePermission.DOMAIN_WORKSPACE_AUDIT_LOG]: {
    description: 'Access workspace audit logs',
    riskLevel: PermissionRiskLevel.HIGH,
    requiresJustification: true,
    relatedPermissions: [],
    policyPath: 'TENANT.workspace.workspace_audit_log',
    category: 'Audit & Compliance',
    auditRequired: true,
    name: 'DOMAIN_WORKSPACE_AUDIT_LOG',
    action: 'workspace_audit_log',
    tags: ['audit', 'logs'],
    operationType: PermissionOperationType.SENSITIVE,
    policyRuleId: 'workspace_workspace_audit_log',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.workspace.workspace_audit_log',
  },
});

// Role hierarchy using shared utilities
export const WorkspacePermissionHierarchy = createRoleHierarchy<
  string,
  Record<string, readonly string[]>
>({
  WorkspaceViewer: [WorkspacePermission.DOMAIN_WORKSPACE_READ],
  WorkspaceEditor: [
    WorkspacePermission.DOMAIN_WORKSPACE_CREATE,
    WorkspacePermission.DOMAIN_WORKSPACE_READ,
    WorkspacePermission.DOMAIN_WORKSPACE_UPDATE,
  ],
  WorkspaceManager: [
    WorkspacePermission.DOMAIN_WORKSPACE_CREATE,
    WorkspacePermission.DOMAIN_WORKSPACE_READ,
    WorkspacePermission.DOMAIN_WORKSPACE_UPDATE,
    WorkspacePermission.DOMAIN_WORKSPACE_DELETE,
    WorkspacePermission.DOMAIN_WORKSPACE_BULK_IMPORT,
    WorkspacePermission.DOMAIN_WORKSPACE_BULK_EXPORT,
    WorkspacePermission.DOMAIN_WORKSPACE_AUDIT_LOG,
  ],
  WorkspaceAdmin: [
    WorkspacePermission.DOMAIN_WORKSPACE_CREATE,
    WorkspacePermission.DOMAIN_WORKSPACE_READ,
    WorkspacePermission.DOMAIN_WORKSPACE_UPDATE,
    WorkspacePermission.DOMAIN_WORKSPACE_DELETE,
    WorkspacePermission.DOMAIN_WORKSPACE_ADMIN,
    WorkspacePermission.DOMAIN_WORKSPACE_BULK_IMPORT,
    WorkspacePermission.DOMAIN_WORKSPACE_BULK_EXPORT,
    WorkspacePermission.DOMAIN_WORKSPACE_AUDIT_LOG,
  ],
});

// Runtime completeness validation
const ALL_WORKSPACE_PERMISSIONS = Object.values(WorkspacePermission);
assertRegistryComplete(ALL_WORKSPACE_PERMISSIONS, WorkspacePermissionRegistry);

/**
 * Workspace-specific field permission matrix for field-level security
 */
const WORKSPACE_FIELD_PERMISSION_MATRIX = {
  metadata: [WorkspacePermission.DOMAIN_WORKSPACE_ADMIN],
  bulkImport: [WorkspacePermission.DOMAIN_WORKSPACE_BULK_IMPORT],
  bulkExport: [WorkspacePermission.DOMAIN_WORKSPACE_BULK_EXPORT],
} as const;

/**
 * Factory-generated WorkspacePermissionHelpers with full functionality
 * This includes all methods needed by the authorization system:
 * - getRiskLevel, requiresJustification, isHighRisk
 * - getPolicyPath, requiresAudit (needed by workspace.resource.ts)
 * - getByRiskLevel, expandWithRelated, etc.
 * - Field-level permission logic with FIELD_PERMISSION_MATRIX
 */
export const WorkspacePermissionHelpers = createDomainPermissionHelpers({
  domain: 'workspace',
  permissions: WorkspacePermission,
  registry: WorkspacePermissionRegistry,
  fieldMatrix: WORKSPACE_FIELD_PERMISSION_MATRIX,
});

// Add domain-specific convenience methods
export const WorkspacePermissionUtils = {
  /**
   * Get minimum permissions for basic workspace management
   */
  getBasicManagementPermissions(): WorkspacePermission[] {
    return [
      WorkspacePermission.DOMAIN_WORKSPACE_READ,
      WorkspacePermission.DOMAIN_WORKSPACE_CREATE,
      WorkspacePermission.DOMAIN_WORKSPACE_UPDATE,
    ];
  },

  /**
   * Check if user can perform bulk operations
   */
  canPerformBulkOperations(userPermissions: WorkspacePermission[]): boolean {
    return [
      WorkspacePermission.DOMAIN_WORKSPACE_BULK_IMPORT,
      WorkspacePermission.DOMAIN_WORKSPACE_BULK_EXPORT,
    ].some((perm) => userPermissions.includes(perm));
  },
} as const;
