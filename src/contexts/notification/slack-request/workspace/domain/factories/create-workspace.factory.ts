// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { DomainError, Result, err, withContext } from 'src/shared/errors';
import { Clock } from 'src/shared/domain/clock';
import { EventMetadata } from 'src/shared/domain/events';
import { WorkspaceAggregate } from '../aggregates';
import { CreateWorkspaceProps } from '../props';
import { WorkspaceDomainState } from '../state';
import {
  WorkspaceCreatedAt,
  WorkspaceUpdatedAt,
  WorkspaceVersion,
  WorkspaceCode,
  WorkspaceName,
  WorkspaceBotToken,
  WorkspaceSigningSecret,
  WorkspaceAppId,
  WorkspaceBotUserId,
  WorkspaceDefaultChannelId,
  WorkspaceEnabled,
} from '../value-objects';

/**
 * Enhanced workspace entity factory with comprehensive validation and security context
 * Moved from application layer to properly separate business concerns
 */
export function createWorkspaceAggregateFromProps(
  props: CreateWorkspaceProps,
  metadata: EventMetadata,
  clock: Clock,
  // validatedEntities?: {
  //  channels?: ChannelReference[];
  // },
): Result<WorkspaceAggregate, DomainError> {
  // Validate each property by creating value objects
  const codeResult = WorkspaceCode.from(props.code);
  if (!codeResult.ok) {
    return err(
      withContext(codeResult.error, {
        ...codeResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_workspace',
        code: props.code,
      }),
    );
  }

  const nameResult = WorkspaceName.from(props.name);
  if (!nameResult.ok) {
    return err(
      withContext(nameResult.error, {
        ...nameResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_workspace',
        name: props.name,
      }),
    );
  }

  const botTokenResult = WorkspaceBotToken.from(props.botToken);
  if (!botTokenResult.ok) {
    return err(
      withContext(botTokenResult.error, {
        ...botTokenResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_workspace',
        botToken: props.botToken,
      }),
    );
  }

  const signingSecretResult = WorkspaceSigningSecret.from(props.signingSecret);
  if (!signingSecretResult.ok) {
    return err(
      withContext(signingSecretResult.error, {
        ...signingSecretResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_workspace',
        signingSecret: props.signingSecret,
      }),
    );
  }

  const appIdResult = WorkspaceAppId.from(props.appId);
  if (!appIdResult.ok) {
    return err(
      withContext(appIdResult.error, {
        ...appIdResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_workspace',
        appId: props.appId,
      }),
    );
  }

  const botUserIdResult = WorkspaceBotUserId.from(props.botUserId);
  if (!botUserIdResult.ok) {
    return err(
      withContext(botUserIdResult.error, {
        ...botUserIdResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_workspace',
        botUserId: props.botUserId,
      }),
    );
  }

  const defaultChannelIdResult = WorkspaceDefaultChannelId.from(
    props.defaultChannelId,
  );
  if (!defaultChannelIdResult.ok) {
    return err(
      withContext(defaultChannelIdResult.error, {
        ...defaultChannelIdResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_workspace',
        defaultChannelId: props.defaultChannelId,
      }),
    );
  }

  const enabledResult = WorkspaceEnabled.from(props.enabled);
  if (!enabledResult.ok) {
    return err(
      withContext(enabledResult.error, {
        ...enabledResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_workspace',
        enabled: props.enabled,
      }),
    );
  }

  const createdAtResult = WorkspaceCreatedAt.create(clock.now());
  if (!createdAtResult.ok) {
    return err(createdAtResult.error);
  }

  const updatedAtResult = WorkspaceUpdatedAt.create(clock.now());
  if (!updatedAtResult.ok) {
    return err(updatedAtResult.error);
  }

  const versionResult = WorkspaceVersion.create(1); // Initial version is 1
  if (!versionResult.ok) {
    return err(versionResult.error);
  }

  // Create the entity properties with validated value objects
  const entityProps: WorkspaceDomainState = {
    code: codeResult.value,
    name: nameResult.value,
    botToken: botTokenResult.value,
    signingSecret: signingSecretResult.value,
    appId: appIdResult.value,
    botUserId: botUserIdResult.value,
    defaultChannelId: defaultChannelIdResult.value,
    enabled: enabledResult.value,
    createdAt: createdAtResult.value,
    updatedAt: updatedAtResult.value,
    version: versionResult.value,
  };

  // Create the entity using the constructor
  return WorkspaceAggregate.create(entityProps, clock, metadata);
}
