// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { DomainError, Result, ok, err } from 'src/shared/errors';
import {
  createIntegerVO,
  createIntegerVOErrors,
  IntegerVOInstance,
  createDateTimeVO,
  createDateTimeVOErrors,
  DateTimeVOInstance,
} from 'src/shared/domain/value-objects';
import { Clock } from 'src/shared/domain/clock';
import { WorkspaceErrors } from '../errors/workspace.errors';

/**
 * Workspace Instance Value Objects
 *
 * Instance VOs for Workspace aggregate lifecycle management.
 * Includes creation timestamps, update timestamps, and version tracking.
 * Follows the Clock injection pattern for deterministic testing.
 */

// ===========================================
// Workspace Created At Instance VO
// ===========================================

const WorkspaceCreatedAtErrors = createDateTimeVOErrors(
  WorkspaceErrors.CREATED_AT_REQUIRED,
  'Workspace Created At',
);

export const WorkspaceCreatedAt = createDateTimeVO({
  name: 'WorkspaceCreatedAt',
  allowFuture: false, // Cannot create workspace in the future
  allowPast: true, // Can create with past timestamps (data migration)
  customValidation: (date: Date): Result<void, DomainError> => {
    // Optional: Add domain-specific creation time validation
    // For example, cannot be more than 1 year in the past
    const oneYearAgo = new Date();
    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);

    if (date < oneYearAgo) {
      return err({
        ...WorkspaceErrors.CREATED_AT_REQUIRED,
        detail:
          'Workspace creation date cannot be more than 1 year in the past',
        context: { value: date, maxPastDate: oneYearAgo },
      } as DomainError);
    }

    return ok(undefined);
  },
  errors: WorkspaceCreatedAtErrors,
});

export type WorkspaceCreatedAt = DateTimeVOInstance;

// ===========================================
// Workspace Updated At Instance VO
// ===========================================

const WorkspaceUpdatedAtErrors = createDateTimeVOErrors(
  WorkspaceErrors.UPDATED_AT_REQUIRED,
  'Workspace Updated At',
);

export const WorkspaceUpdatedAt = createDateTimeVO({
  name: 'WorkspaceUpdatedAt',
  allowFuture: false, // Cannot update workspace in the future
  allowPast: true, // Can update with past timestamps (data correction)
  errors: WorkspaceUpdatedAtErrors,
});

export type WorkspaceUpdatedAt = DateTimeVOInstance;

// ===========================================
// Workspace Version Instance VO
// ===========================================

const WorkspaceVersionErrors = createIntegerVOErrors(
  WorkspaceErrors.INVALID_CODE_DATA, // Reusing existing error until specific version error is added
  'Workspace Version',
);

export const WorkspaceVersion = createIntegerVO({
  name: 'WorkspaceVersion',
  min: 0, // Version starts at 0
  allowNegative: false,
  errors: WorkspaceVersionErrors,
});

export type WorkspaceVersion = IntegerVOInstance;

// ===========================================
// Clock-Based Helper Functions (Explicit Dependencies)
// ===========================================

/**
 * Create WorkspaceCreatedAt from Clock (explicit dependency)
 * Deterministic and testable - pass a fake clock in tests
 */
export const createdAtNow = (
  clock: Clock,
): Result<WorkspaceCreatedAt, DomainError> =>
  WorkspaceCreatedAt.create(clock.now());

/**
 * Create WorkspaceUpdatedAt from Clock (explicit dependency)
 * Deterministic and testable - pass a fake clock in tests
 */
export const updatedAtNow = (
  clock: Clock,
): Result<WorkspaceUpdatedAt, DomainError> =>
  WorkspaceUpdatedAt.create(clock.now());

/**
 * Bump version by 1 (domain business rule)
 */
export const bumpVersion = (
  currentVersion: WorkspaceVersion,
): Result<WorkspaceVersion, DomainError> =>
  WorkspaceVersion.create(currentVersion.value + 1);

/**
 * Create initial version (starts at 1 for new aggregates)
 */
export const initialVersion = (): Result<WorkspaceVersion, DomainError> =>
  WorkspaceVersion.create(1);

// ===========================================
// Direct Creation Functions (Non-Clock Based)
// ===========================================

/**
 * Create WorkspaceCreatedAt from Date
 */
export const createWorkspaceCreatedAt = (
  date: Date,
): Result<WorkspaceCreatedAt, DomainError> => WorkspaceCreatedAt.create(date);

/**
 * Create WorkspaceUpdatedAt from Date
 */
export const createWorkspaceUpdatedAt = (
  date: Date,
): Result<WorkspaceUpdatedAt, DomainError> => WorkspaceUpdatedAt.create(date);

/**
 * Create WorkspaceVersion from number
 */
export const createWorkspaceVersion = (
  version: number,
): Result<WorkspaceVersion, DomainError> => WorkspaceVersion.create(version);

// ===========================================
// Domain Invariants & Validation
// ===========================================

/**
 * Validate that updatedAt is not before createdAt (monotonic time)
 */
export const validateMonotonicTime = (
  createdAt: WorkspaceCreatedAt,
  updatedAt: WorkspaceUpdatedAt,
): Result<void, DomainError> => {
  if (updatedAt.value < createdAt.value) {
    return err({
      ...WorkspaceErrors.UPDATED_AT_REQUIRED,
      detail: 'Updated at cannot be before created at',
      context: {
        createdAt: createdAt.value.toISOString(),
        updatedAt: updatedAt.value.toISOString(),
      },
    } as DomainError);
  }
  return ok(undefined);
};

// ===========================================
// Legacy Compatibility (DEPRECATED)
// ===========================================

/**
 * @deprecated Use createdAtNow(clock) instead for better testability
 * This function hides the Date dependency and makes testing harder
 */
export function createWorkspaceCreatedAtNow(): Result<
  WorkspaceCreatedAt,
  DomainError
> {
  return WorkspaceCreatedAt.create(new Date());
}

/**
 * @deprecated Use updatedAtNow(clock) instead for better testability
 * This function hides the Date dependency and makes testing harder
 */
export function createWorkspaceUpdatedAtNow(): Result<
  WorkspaceUpdatedAt,
  DomainError
> {
  return WorkspaceUpdatedAt.create(new Date());
}
