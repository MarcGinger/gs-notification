// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * Workspace State Infrastructure Mappers
 *
 * Bidirectional mapping between pure VO domain state and primitive persistence snapshot.
 * Handles conversion between rich domain objects and raw database data.
 */

import {
  WorkspaceCode,
  WorkspaceName,
  WorkspaceBotToken,
  WorkspaceSigningSecret,
  WorkspaceAppId,
  WorkspaceBotUserId,
  WorkspaceDefaultChannelId,
  WorkspaceEnabled,
  WorkspaceCreatedAt,
  WorkspaceUpdatedAt,
  WorkspaceVersion,
} from '../../domain/value-objects';
import { Result, ok, err, DomainError } from 'src/shared/errors';
import { WorkspaceDomainState } from '../../domain/state/workspace.state';
import { WorkspaceSnapshotProps } from '../../domain/props';

/**
 * Infrastructure State Mapper
 *
 * Handles conversion between domain VOs and persistence primitives.
 * This is where primitive obsession is eliminated - converting between
 * rich domain objects and raw database data.
 */
export class WorkspaceStateMapper {
  /**
   * Convert primitive persistence snapshot to rich domain state
   *
   * @param snapshot - Raw database/persistence data
   * @returns Rich domain state with VOs or error
   */
  static toDomain(
    snapshot: WorkspaceSnapshotProps,
  ): Result<WorkspaceDomainState, DomainError> {
    const errors: Array<{ field: string; error: DomainError }> = [];

    // Helper function to validate and collect errors
    const validateField = <T>(
      fieldName: string,
      result: Result<T, DomainError>,
    ): T | null => {
      if (!result.ok) {
        errors.push({ field: fieldName, error: result.error });
        return null;
      }
      return result.value;
    };

    // Convert each primitive to its corresponding VO with error collection
    const code = validateField('code', WorkspaceCode.from(snapshot.code));
    const name = validateField('name', WorkspaceName.from(snapshot.name));
    const botToken = snapshot.botToken
      ? validateField('botToken', WorkspaceBotToken.from(snapshot.botToken))
      : undefined;
    const signingSecret = snapshot.signingSecret
      ? validateField(
          'signingSecret',
          WorkspaceSigningSecret.from(snapshot.signingSecret),
        )
      : undefined;
    const appId = snapshot.appId
      ? validateField('appId', WorkspaceAppId.from(snapshot.appId))
      : undefined;
    const botUserId = snapshot.botUserId
      ? validateField('botUserId', WorkspaceBotUserId.from(snapshot.botUserId))
      : undefined;
    const defaultChannelId = snapshot.defaultChannelId
      ? validateField(
          'defaultChannelId',
          WorkspaceDefaultChannelId.from(snapshot.defaultChannelId),
        )
      : undefined;
    const enabled = validateField(
      'enabled',
      WorkspaceEnabled.from(snapshot.enabled),
    );
    const version = validateField(
      'version',
      WorkspaceVersion.from(snapshot.version),
    );
    const createdAt = validateField(
      'createdAt',
      WorkspaceCreatedAt.from(snapshot.createdAt),
    );
    const updatedAt = validateField(
      'updatedAt',
      WorkspaceUpdatedAt.from(snapshot.updatedAt),
    );

    // If any validations failed, return aggregated error
    if (errors.length > 0) {
      return err({
        code: 'WORKSPACE.MAPPER_VALIDATION_FAILED',
        title: 'Domain State Mapping Failed',
        detail: `Failed to create domain state from persistence snapshot. ${errors.length} validation error(s) occurred.`,
        category: 'infrastructure',
        retryable: false,
        context: {
          validationErrors: errors.map((e) => ({
            field: e.field,
            errorCode: e.error.code,
            errorMessage: e.error.detail,
          })),
          snapshotCode: snapshot.code,
        },
      });
    }

    // All validations passed, construct the rich domain state
    const domainState: WorkspaceDomainState = {
      code: code!,
      name: name!,
      botToken: botToken || undefined,
      signingSecret: signingSecret || undefined,
      appId: appId || undefined,
      botUserId: botUserId || undefined,
      defaultChannelId: defaultChannelId || undefined,
      enabled: enabled!,
      version: version!,
      createdAt: createdAt!,
      updatedAt: updatedAt!,
    };

    return ok(domainState);
  }

  /**
   * Convert rich domain state to primitive persistence snapshot
   *
   * @param domainState - Rich domain state with VOs
   * @returns Raw persistence data for database storage
   */
  static toSnapshot(domainState: WorkspaceDomainState): WorkspaceSnapshotProps {
    return {
      // Extract primitive values from VOs
      code: domainState.code.value,
      name: domainState.name.value,
      botToken: domainState.botToken?.value,
      signingSecret: domainState.signingSecret?.value,
      appId: domainState.appId?.value,
      botUserId: domainState.botUserId?.value,
      defaultChannelId: domainState.defaultChannelId?.value,
      enabled: domainState.enabled.value,
      version: domainState.version.value,
      createdAt: domainState.createdAt.value,
      updatedAt: domainState.updatedAt.value,
    };
  }
}
