// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Injectable, Inject } from '@nestjs/common';
import { Redis } from 'ioredis';
import { CacheMetricsCollector } from 'src/shared/infrastructure/projections/cache-optimization';
import { APP_LOGGER, Log, componentLogger, Logger } from 'src/shared/logging';
import { CorrelationUtil } from 'src/shared/utilities/correlation.util';
import { Clock, CLOCK } from 'src/shared/infrastructure/time';
import {
  RepositoryLoggingUtil,
  RepositoryLoggingConfig,
  handleRepositoryError,
  safeParseJSON,
  safeParseJSONArray,
  RepositoryOptions,
} from 'src/shared/infrastructure/repositories';
import { Result, DomainError, err, ok } from 'src/shared/errors';
import { Option } from 'src/shared/domain/types';
import { ActorContext } from 'src/shared/application/context';
import { RepositoryErrorFactory } from 'src/shared/domain/errors/repository.error';
import { SLACK_REQUEST_DI_TOKENS } from '../../../slack-request.constants';
import { WorkspaceProjectionKeys } from '../../workspace-projection-keys';
import { WorkspaceSnapshotProps } from '../../domain/props';
import { WorkspaceCode } from '../../domain/value-objects';
import { IWorkspaceReader } from '../../application/ports';

/**
 * Workspace Reader Repository - Redis Implementation
 *
 * Bounded Context: Notification/Workspace
 * Handles basic read operations for Workspace aggregates using Redis projections
 * as the data source with cluster-safe operations.
 *
 * Benefits:
 * - High-performance Redis backend
 * - Cluster-safe operations with hash tags
 * - Version hint optimization for cache efficiency
 * - Maintains same interface as SQL-based implementation
 * - Comprehensive logging and error handling
 *
 * @domain Notification Context - Workspace Reader Repository (Redis)
 * @layer Infrastructure
 * @pattern Repository Pattern + Redis Projector
 */
@Injectable()
export class WorkspaceReaderRepository implements IWorkspaceReader {
  private readonly logger: Logger;
  private readonly loggingConfig: RepositoryLoggingConfig;
  private readonly metricsCollector = new CacheMetricsCollector();

  constructor(
    @Inject(APP_LOGGER) baseLogger: Logger,
    @Inject(CLOCK) private readonly clock: Clock,
    @Inject(SLACK_REQUEST_DI_TOKENS.IO_REDIS)
    private readonly redis: Redis,
  ) {
    this.loggingConfig = {
      serviceName: 'SlackRequestService',
      component: 'WorkspaceReaderRepository',
    };
    this.logger = componentLogger(baseLogger, this.loggingConfig.component);

    Log.info(
      this.logger,
      'WorkspaceReaderRepository initialized with Redis backend',
      {
        component: this.loggingConfig.component,
        redisStatus: this.redis.status,
        clusterSafe: true,
        cacheOptimized: true,
      },
    );
  }

  /**
   * Generate cluster-safe Redis keys using centralized WorkspaceProjectionKeys
   * Ensures consistency with projector key patterns
   */
  private generateWorkspaceKey(tenant: string, id: string): string {
    // âœ… Use centralized key generation for consistency
    return WorkspaceProjectionKeys.getRedisWorkspaceKey(tenant, id);
  }

  /**
   * Parse Redis hash data into WorkspaceSnapshotProps
   */
  private parseRedisHashToWorkspace(
    hashData: Record<string, string>,
  ): WorkspaceSnapshotProps | null {
    try {
      if (!hashData || Object.keys(hashData).length === 0) {
        return null;
      }

      // Check for soft deletion
      if (hashData.deletedAt) {
        return null;
      }

      // Parse array fields using safeParseJSONArray utility

      // Parse object fields using safeParseJSON utility
      // Extract basic fields directly from hash data

      return {
        code: hashData.code,
        name: hashData.name,
        botToken: hashData.botToken || undefined,
        signingSecret: hashData.signingSecret || undefined,
        appId: hashData.appId || undefined,
        botUserId: hashData.botUserId || undefined,
        defaultChannelId: hashData.defaultChannelId || undefined,
        enabled: hashData.enabled === 'true',
        version: parseInt(hashData.version, 10),
        createdAt: new Date(hashData.createdAt),
        updatedAt: new Date(hashData.updatedAt),
      };
    } catch (error) {
      Log.error(
        this.logger,
        'Failed to parse Redis hash data to WorkspaceSnapshot',
        {
          method: 'parseRedisHashToWorkspace',
          error: (error as Error).message,
          code: hashData?.code,
        },
      );
      return null;
    }
  }

  /**
   * Helper to create consistent logging context using shared utilities
   */
  private createLogContext(
    operation: string,
    correlationId: string,
    actor: ActorContext,
    additionalContext?: Record<string, unknown>,
  ): Record<string, unknown> {
    return RepositoryLoggingUtil.createLogContext(
      this.loggingConfig,
      this.clock,
      operation,
      correlationId,
      actor,
      additionalContext,
    );
  }

  /**
   * Helper to assess operation risk level using shared utilities
   */
  private assessOperationRisk(operation: string): 'LOW' | 'MEDIUM' | 'HIGH' {
    return RepositoryLoggingUtil.assessOperationRisk(operation);
  }

  /**
   * Find a Workspace by its unique identifier
   * @param actor - The authenticated user context
   * @param code - The unique identifier of the Workspace
   * @param options - Optional repository options
   * @returns Result containing the Workspace snapshot or null if not found
   */
  async findById(
    actor: ActorContext,
    code: WorkspaceCode,
    options?: RepositoryOptions,
  ): Promise<Result<Option<WorkspaceSnapshotProps>, DomainError>> {
    const operation = 'findById';
    const riskLevel = this.assessOperationRisk(operation);
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('workspace-find-by-id');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      riskLevel,
      targetCode: code.value,
      customCorrelationId: !!options?.correlationId,
      source: options?.source,
      requestId: options?.requestId,
      dataSource: 'redis-projector',
    });

    // Validate actor context with enhanced security logging
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) return Promise.resolve(err(validation.error));

    // Guard tenant explicitly
    if (!actor.tenant) {
      return Promise.resolve(
        err(
          RepositoryErrorFactory.validationError('tenant', 'Missing tenant id'),
        ),
      );
    }

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      { queryType: 'workspace_lookup', scope: 'redis_projection' },
    );

    try {
      // Generate cluster-safe Redis key
      const redisKey = this.generateWorkspaceKey(actor.tenant, code.value);

      Log.debug(this.logger, 'Finding workspace by ID in Redis', {
        ...logContext,
        queryDetails: {
          scope: 'redis_hash',
          method: 'redis.hgetall',
          key: redisKey,
          clusterSafe: true,
        },
      });

      // Get workspace hash from Redis
      const hashData = await this.redis.hgetall(redisKey);

      if (!hashData || Object.keys(hashData).length === 0) {
        RepositoryLoggingUtil.logQueryMetrics(
          this.logger,
          operation,
          logContext,
          {
            resultCount: 0,
            dataQuality: 'empty',
          },
        );
        return ok(Option.none());
      }

      // Parse Redis hash to WorkspaceSnapshot
      const workspaceSnapshot = this.parseRedisHashToWorkspace(hashData);

      if (!workspaceSnapshot) {
        RepositoryLoggingUtil.logQueryMetrics(
          this.logger,
          operation,
          logContext,
          {
            resultCount: 0,
            dataQuality: 'error',
          },
        );
        return ok(Option.none());
      }

      // Log query metrics using shared utility
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: 1,
          dataQuality: 'good',
          sampleData: {
            code: workspaceSnapshot.code,
            version: workspaceSnapshot.version,
          },
        },
      );

      return ok(Option.some(workspaceSnapshot));
    } catch (error) {
      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'HIGH',
      );

      // Handle and return the classified error using shared utility
      return Promise.resolve(handleRepositoryError(error));
    }
  }

  /**
   * Check if a workspace exists by ID (for write-path validation)
   * @param actor - The authenticated user context
   * @param code - The unique identifier of the Workspace
   * @param options - Optional repository options
   * @returns Result containing boolean indicating existence
   */
  async exists(
    actor: ActorContext,
    code: WorkspaceCode,
    options?: RepositoryOptions,
  ): Promise<Result<boolean, DomainError>> {
    const operation = 'exists';
    const riskLevel = this.assessOperationRisk(operation);
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('workspace-exists-check');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      riskLevel,
      targetCode: code.value,
      customCorrelationId: !!options?.correlationId,
      source: options?.source,
      requestId: options?.requestId,
      dataSource: 'redis-projector',
    });

    // Validate actor context
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) return Promise.resolve(err(validation.error));

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      { queryType: 'existence_check', scope: 'redis_projection' },
    );

    try {
      // Generate cluster-safe Redis key
      const redisKey = this.generateWorkspaceKey(actor.tenant, code.value);

      Log.debug(this.logger, 'Checking workspace existence in Redis', {
        ...logContext,
        queryDetails: {
          scope: 'redis_hash',
          method: 'redis.exists',
          key: redisKey,
          optimized: true,
        },
      });

      // Check existence in Redis and verify not soft-deleted
      const exists = await this.redis.exists(redisKey);
      let isActive = false;

      if (exists) {
        // Additional check for soft deletion
        const deletedAt = await this.redis.hget(redisKey, 'deletedAt');
        isActive = !deletedAt;
      }

      // Log query metrics using shared utility
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: isActive ? 1 : 0,
          dataQuality: 'good',
          sampleData: { exists: isActive, code: code.value },
        },
      );

      return ok(isActive);
    } catch (error) {
      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'HIGH',
      );

      // Handle and return the classified error using shared utility
      return Promise.resolve(handleRepositoryError(error));
    }
  }

  /**
   * Get workspace version for optimistic concurrency control
   * @param actor - The authenticated user context
   * @param code - The unique identifier of the Workspace
   * @param options - Optional repository options
   * @returns Result containing version number or null if not found
   */
  async getVersion(
    actor: ActorContext,
    code: WorkspaceCode,
    options?: RepositoryOptions,
  ): Promise<Result<Option<number>, DomainError>> {
    const operation = 'getVersion';
    const riskLevel = this.assessOperationRisk(operation);
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('workspace-get-version');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      riskLevel,
      targetCode: code.value,
      customCorrelationId: !!options?.correlationId,
      source: options?.source,
      requestId: options?.requestId,
      dataSource: 'redis-projector',
    });

    // Validate actor context
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) return Promise.resolve(err(validation.error));

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      { queryType: 'version_lookup', scope: 'redis_projection' },
    );

    try {
      // Generate cluster-safe Redis key
      const redisKey = this.generateWorkspaceKey(actor.tenant, code.value);

      Log.debug(this.logger, 'Getting workspace version from Redis', {
        ...logContext,
        queryDetails: {
          scope: 'redis_hash',
          method: 'redis.hmget',
          key: redisKey,
          fields: ['version', 'deletedAt'],
          optimized: true,
        },
      });

      // Get version and deletion status from Redis efficiently
      const [versionStr, deletedAt] = await this.redis.hmget(
        redisKey,
        'version',
        'deletedAt',
      );

      if (!versionStr || deletedAt) {
        RepositoryLoggingUtil.logQueryMetrics(
          this.logger,
          operation,
          logContext,
          {
            resultCount: 0,
            dataQuality: 'empty',
          },
        );
        return ok(Option.none());
      }

      const version = parseInt(versionStr, 10);

      // Log query metrics using shared utility
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: 1,
          dataQuality: 'good',
          sampleData: { code: code.value, version },
        },
      );

      return ok(Option.some(version));
    } catch (error) {
      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'HIGH',
      );

      // Handle and return the classified error using shared utility
      return Promise.resolve(handleRepositoryError(error));
    }
  }

  /**
   * Get minimal workspace data for write-path operations
   * @param actor - The authenticated user context
   * @param code - The unique identifier of the Workspace
   * @param options - Optional repository options
   * @returns Result containing minimal workspace data or null if not found
   */
  async getMinimal(
    actor: ActorContext,
    code: WorkspaceCode,
    options?: RepositoryOptions,
  ): Promise<Result<Option<{ code: string; version: number }>, DomainError>> {
    const operation = 'getMinimal';
    const riskLevel = this.assessOperationRisk(operation);
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('workspace-get-minimal');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      riskLevel,
      targetCode: code.value,
      customCorrelationId: !!options?.correlationId,
      source: options?.source,
      requestId: options?.requestId,
      dataSource: 'redis-projector',
    });

    // Validate actor context
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) return Promise.resolve(err(validation.error));

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      { queryType: 'minimal_lookup', scope: 'redis_projection' },
    );

    try {
      // Generate cluster-safe Redis key
      const redisKey = this.generateWorkspaceKey(actor.tenant, code.value);

      Log.debug(this.logger, 'Getting minimal workspace data from Redis', {
        ...logContext,
        queryDetails: {
          scope: 'redis_hash',
          method: 'redis.hmget',
          key: redisKey,
          fields: ['code', 'version', 'deletedAt'],
          optimized: true,
        },
      });

      // Get minimal fields from Redis efficiently
      const [codeStr, versionStr, deletedAt] = await this.redis.hmget(
        redisKey,
        'code',
        'version',
        'deletedAt',
      );

      if (!codeStr || !versionStr || deletedAt) {
        RepositoryLoggingUtil.logQueryMetrics(
          this.logger,
          operation,
          logContext,
          {
            resultCount: 0,
            dataQuality: 'empty',
          },
        );
        return ok(Option.none());
      }

      const minimal = {
        code: codeStr,
        version: parseInt(versionStr, 10),
      };

      // Log query metrics using shared utility
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: 1,
          dataQuality: 'good',
          sampleData: { ...minimal },
        },
      );

      return ok(Option.some(minimal));
    } catch (error) {
      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'HIGH',
      );

      // Handle and return the classified error using shared utility
      return handleRepositoryError(error);
    }
  }
}
