// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * Workspace Resource Decorators - Domain-Driven Authorization
 *
 * Clean integration with domain-driven permissions infrastructure.
 * All business rules and risk assessments come from the domain layer.
 *
 * ARCHITECTURAL PRINCIPLE: No business logic duplication
 * ✅ Risk levels: WorkspacePermissionHelpers.getRiskLevel()
 * ✅ Justification rules: WorkspacePermissionHelpers.requiresJustification()
 * ✅ Categories: WorkspacePermissionRegistry[permission].category
 * ✅ Policy paths: WorkspacePermissionHelpers.getPolicyPath()
 * ✅ Audit requirements: WorkspacePermissionRegistry[permission].auditRequired
 *
 * This keeps the HTTP layer thin and ensures business rules
 * live in the domain where they belong.
 */

import { Resource } from 'src/shared/security/opa';
import { Request } from 'express';
import {
  WorkspacePermission,
  WorkspacePermissionHelpers,
  WorkspacePermissionRegistry,
} from '../domain/permissions';

/**
 * Domain-driven Workspace resource decorator
 *
 * All business rules come from the domain layer - no duplication!
 */
export const WorkspaceResource = (permission: WorkspacePermission) =>
  Resource({
    type: 'workspace',
    action: permission,
    extractId: (req: Request) => req.params?.code || req.params?.id,
    extractAttributes: (req: Request) => {
      const body = req.body as Record<string, unknown> | undefined;
      const query = req.query as Record<string, unknown> | undefined;

      // Business data extraction
      const name = body?.name || query?.name;
      const botToken = body?.botToken || query?.botToken;
      const signingSecret = body?.signingSecret || query?.signingSecret;
      const appId = body?.appId || query?.appId;
      const botUserId = body?.botUserId || query?.botUserId;
      const defaultChannelId =
        body?.defaultChannelId || query?.defaultChannelId;
      const enabled = body?.enabled || query?.enabled;

      const baseAttributes = {
        name,
        botToken,
        signingSecret,
        appId,
        botUserId,
        defaultChannelId,
        enabled,
      };

      // Domain-driven permission context (no hardcoded business rules!)
      const permissionMeta = WorkspacePermissionRegistry[permission];
      const permissionContext = {
        permission,
        riskLevel: WorkspacePermissionHelpers.getRiskLevel(permission),
        requiresJustification:
          WorkspacePermissionHelpers.requiresJustification(permission),
        category: permissionMeta?.category as string,
        policyPath: WorkspacePermissionHelpers.getPolicyPath(permission),
        auditRequired: WorkspacePermissionHelpers.requiresAudit(permission),
      };

      return {
        ...baseAttributes,
        _permissionContext: permissionContext,
      };
    },
  });

/**
 * Specialized decorators for high-risk operations
 */
export const WorkspaceDeleteResource = () =>
  WorkspaceResource(WorkspacePermission.DOMAIN_WORKSPACE_DELETE);

export const WorkspaceCreateResource = () =>
  WorkspaceResource(WorkspacePermission.DOMAIN_WORKSPACE_CREATE);

export const WorkspaceUpdateResource = () =>
  WorkspaceResource(WorkspacePermission.DOMAIN_WORKSPACE_UPDATE);

export const WorkspaceReadResource = () =>
  WorkspaceResource(WorkspacePermission.DOMAIN_WORKSPACE_READ);
