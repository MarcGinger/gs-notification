// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import {
  Controller,
  Get,
  Query,
  Param,
  UseInterceptors,
  UseGuards,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiParam,
  ApiOkResponse,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { WorkspaceApplicationService } from '../../../application/services';
import { CurrentUser, IUserToken, JwtAuthGuard } from 'src/shared/security';
import {
  DetailWorkspaceResponse,
  WorkspacePageResponse,
  ListWorkspaceFilterRequest,
  ListWorkspaceResponse,
} from '../../../application/dtos';
import { Result, ResultInterceptor, DomainError } from 'src/shared/errors';
import { PaginatedResponse } from 'src/shared/application/dtos';
import { WorkspaceReadResource } from '../../workspace.resource';
import { ApiCommonErrors } from 'src/shared/interfaces/http';

@Controller('workspaces')
@ApiTags('Workspaces')
@ApiBearerAuth()
@UseGuards(JwtAuthGuard)
@UseInterceptors(ResultInterceptor)
export class WorkspaceController {
  constructor(
    private readonly workspaceApplicationService: WorkspaceApplicationService,
  ) {}

  @Get()
  @WorkspaceReadResource()
  @ApiOperation({
    summary: 'List Workspaces',
    description:
      'Retrieves a list of Workspaces with optional filtering. Supports pagination and filtering by name or category. Requires READ permission (LOW risk).',
  })
  @ApiOkResponse({
    description: 'List of Workspaces retrieved successfully',
    type: WorkspacePageResponse,
  })
  @ApiCommonErrors()
  async list(
    @CurrentUser() user: IUserToken,
    @Query() pageRequest?: ListWorkspaceFilterRequest,
  ): Promise<Result<PaginatedResponse<ListWorkspaceResponse>, DomainError>> {
    const result = await this.workspaceApplicationService.listWorkspaces(
      user,
      pageRequest,
    );
    return result;
  }

  @Get(':id')
  @WorkspaceReadResource()
  @ApiOperation({
    summary: 'Get Workspace by ID',
    description:
      'Retrieves a single Workspace by its unique identifier. Requires READ permission (LOW risk).',
  })
  @ApiParam({
    name: 'id',
    type: 'string',
    description: 'Workspace unique identifier',
    example: 'T01EXAMPLE123',
  })
  @ApiOkResponse({
    description: 'Workspace details retrieved successfully',
    type: DetailWorkspaceResponse,
  })
  @ApiCommonErrors()
  async get(
    @CurrentUser() user: IUserToken,
    @Param('id') id: string,
  ): Promise<Result<DetailWorkspaceResponse, DomainError>> {
    const result = await this.workspaceApplicationService.getWorkspaceById(
      user,
      id,
    );

    return result;
  }
}
