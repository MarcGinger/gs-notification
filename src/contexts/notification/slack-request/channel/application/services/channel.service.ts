// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * Channel Application Service
 *
 * Application-layer service that coordinates authorization with business operations.
 */

// Framework imports
import { Inject, Injectable } from '@nestjs/common';

// Shared utilities and infrastructure
import { APP_LOGGER, Log, componentLogger, Logger } from 'src/shared/logging';
import { Result, DomainError, err, ok, withContext } from 'src/shared/errors';
import type { IUserToken } from 'src/shared/security';
import { CorrelationUtil } from 'src/shared/utilities/correlation.util';
import { Clock, CLOCK } from 'src/shared/infrastructure/time';

// Service configuration
import { SlackRequestServiceConstants } from '../../../service-constants';

// Domain types and errors
import { ChannelErrors } from '../../domain/errors/channel.errors';
import {
  DetailChannelResponse,
  ListChannelFilterRequest,
  ChannelPageResponse,
} from '../dtos';

// Application layer
import { ChannelAuthorizationService } from './channel-authorization.service';
import { ChannelAuthContext } from '../types/channel-auth-context';

// Use case contracts
import {
  IGetChannelUseCase,
  IListChannelUseCase,
} from '../use-cases/contracts';

/**
 * Application Service for Channel operations with integrated authorization
 */
@Injectable()
export class ChannelApplicationService {
  private readonly logger: Logger;

  constructor(
    private readonly channelAuthorizationService: ChannelAuthorizationService,
    private readonly getChannelUseCase: IGetChannelUseCase,
    private readonly listChannelUseCase: IListChannelUseCase,
    @Inject(CLOCK) private readonly clock: Clock,
    @Inject(APP_LOGGER) moduleLogger: Logger,
  ) {
    this.logger = componentLogger(moduleLogger, 'ChannelApplicationService');
  }

  /**
   * Helper to create ChannelAuthContext from user token
   */
  private createAuthContext(
    user: IUserToken,
    operation: string,
  ): ChannelAuthContext {
    return {
      tenant: user.tenant,
      tenant_userId: user.tenant_id || '',
      roles: user.roles || [],
      operationType: operation,
      metadata: {
        userId: user.sub,
        timestamp: this.clock.nowIso(),
      },
    };
  }

  /**
   * Helper to create consistent logging context
   */
  private createLogContext(
    operation: string,
    correlationId: string,
    userId: string,
    additionalContext?: Record<string, unknown>,
  ): Record<string, unknown> {
    return {
      serviceName: SlackRequestServiceConstants.SERVICE_NAME,
      component: 'ChannelApplicationService',
      operation,
      correlationId,
      userId,
      ...additionalContext,
    };
  }

  /**
   * Helper to validate required code input
   */
  private validateCode(
    code: string,
    operation: string,
    correlationId?: string,
  ): Result<string, DomainError> {
    if (!code?.trim()) {
      return err(
        withContext(ChannelErrors.INVALID_CHANNEL_DATA, {
          operation,
          correlationId:
            correlationId ||
            CorrelationUtil.generateForOperation(`channel-${operation}`),
        }),
      );
    }
    return ok(code.trim());
  }

  /**
   * Centralized auth → log → execute → catch pattern
   */
  private async authorizeThenExecute<T>(args: {
    operation: 'read';
    user: IUserToken;
    code?: string;
    correlationIdPrefix: string;
    doAuthorize: () => Promise<Result<boolean, DomainError>>;
    doExecute: () => Promise<Result<T, DomainError>>;
    logContext?: Record<string, unknown>;
  }): Promise<Result<T, DomainError>> {
    const corrId = CorrelationUtil.generateForOperation(
      args.correlationIdPrefix,
    );
    const ctx = {
      ...this.createLogContext(
        `${args.operation}_channel`,
        corrId,
        args.user.sub,
        args.logContext,
      ),
    };

    const auth = await args.doAuthorize();
    if (!auth.ok) {
      Log.warn(this.logger, `${args.operation} authorization failed`, {
        ...ctx,
        authDecision: 'deny',
      });
      return err(auth.error);
    }
    if (!auth.value) {
      Log.warn(this.logger, `${args.operation} permission denied`, {
        ...ctx,
        authDecision: 'deny',
      });
      return err(
        withContext(ChannelErrors.PERMISSION_DENIED, {
          correlationId: corrId,
          userId: args.user.sub,
          operation: args.operation,
          code: args.code,
          category: 'security',
        }),
      );
    }

    Log.info(this.logger, `Channel ${args.operation} authorized`, {
      ...ctx,
      authDecision: 'allow',
    });

    try {
      return await args.doExecute();
    } catch (error) {
      Log.error(this.logger, `Channel ${args.operation} use case failed`, {
        ...ctx,
        error: error instanceof Error ? error.message : String(error),
      });
      return err({
        code: `DOMAIN.CHANNEL.${args.operation.toUpperCase()}_FAILED`,
        title: `Channel ${args.operation} failed`,
        detail: error instanceof Error ? error.message : 'Unknown error',
        category: 'application',
        context: {
          correlationId: corrId,
          code: args.code,
          operation: `${args.operation}_channel`,
        },
      });
    }
  }

  /**
   * Get a channel by ID with authorization
   */
  async getChannelById(
    user: IUserToken,
    code: string,
  ): Promise<Result<DetailChannelResponse, DomainError>> {
    // Early input validation
    const codeValidation = this.validateCode(code, 'read');
    if (!codeValidation.ok) {
      return err(codeValidation.error);
    }

    const validatedcode = codeValidation.value;
    const authContext = this.createAuthContext(user, 'read');

    return this.authorizeThenExecute<DetailChannelResponse>({
      operation: 'read',
      user,
      code: validatedcode,
      correlationIdPrefix: 'channel-read',
      doAuthorize: () =>
        this.channelAuthorizationService.canReadChannel(
          user.sub,
          validatedcode,
          CorrelationUtil.generateForOperation('channel-read'),
          authContext,
        ),
      doExecute: () =>
        this.getChannelUseCase.execute({
          user,
          code: validatedcode,
          correlationId: CorrelationUtil.generateForOperation('channel-read'),
        }),
      logContext: { code: validatedcode },
    });
  }

  /**
   * List channels with authorization and pagination
   */
  async listChannels(
    user: IUserToken,
    filter?: ListChannelFilterRequest,
  ): Promise<Result<ChannelPageResponse, DomainError>> {
    const authContext = this.createAuthContext(user, 'list');
    const correlationId = CorrelationUtil.generateForOperation('channel-list');

    // Ensure we always have a proper filter object
    const safeFilter = filter || new ListChannelFilterRequest();

    return this.authorizeThenExecute<ChannelPageResponse>({
      operation: 'read', // List is a form of read operation
      user,
      correlationIdPrefix: 'channel-list',
      doAuthorize: () =>
        this.channelAuthorizationService.canReadChannel(
          user.sub,
          'list', // Use 'list' as a special code for list operations
          correlationId,
          authContext,
        ),
      doExecute: () =>
        this.listChannelUseCase.execute({
          user,
          filter: safeFilter,
          correlationId,
        }),
      logContext: {
        operation: 'list_channels',
        pageSize: safeFilter.size,
        page: safeFilter.page,
      },
    });
  }
}
