// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Injectable } from '@nestjs/common';
import { ChannelAuthorizationService } from './channel-authorization.service';
import { AuthorizationService } from 'src/shared/application/utils/use-case.runner';
import { Result, DomainError, err } from 'src/shared/errors';
import {
  ChannelAuthContext,
  CrudOperation,
  BatchOperation,
} from '../types/channel-auth-context';
import { ChannelErrors } from '../../domain/errors/channel.errors';

/**
 * Adapter that makes ChannelAuthorizationService compatible with the generic AuthorizationService interface.
 * This allows channel use-cases to work with the runUseCaseWithSecurity function.
 *
 * Improvements:
 * - Type-safe operations with proper validation
 * - Structured ChannelAuthContext instead of Record<string, any>
 * - Clear error handling for invalid operations
 */
@Injectable()
export class ChannelAuthorizationAdapter
  implements AuthorizationService<ChannelAuthContext>
{
  constructor(
    private readonly channelAuthorizationService: ChannelAuthorizationService,
  ) {}

  async canReadResource(
    userId: string,
    resourceId: string,
    correlationId: string,
    context: ChannelAuthContext,
  ): Promise<Result<boolean, DomainError>> {
    return this.channelAuthorizationService.canReadChannel(
      userId,
      resourceId,
      correlationId,
      context,
    );
  }

  async authorizeResourceOperation(
    userId: string,
    operation: string,
    correlationId: string,
    resourceId: string,
    fields?: string[],
    context?: ChannelAuthContext,
  ): Promise<
    Result<
      {
        authorized: boolean;
        allowedFields?: string[];
        deniedFields?: string[];
      },
      DomainError
    >
  > {
    // Type-safe operation validation
    const allowedOperations = new Set<string>(['read']);
    if (!allowedOperations.has(operation)) {
      return err({
        ...ChannelErrors.NOT_IMPLEMENTED,
        context: {
          codes: resourceId,
          userId,
          correlationId,
          operation,
          ...context,
        },
      });
    }

    const validOperation = operation as CrudOperation;
    return this.channelAuthorizationService.authorizeChannelOperation(
      userId,
      validOperation,
      correlationId,
      resourceId,
      fields,
      context,
    );
  }

  /**
   * Batch authorization check for multiple channels.
   * Useful for list operations where you need to filter results.
   *
   * @param userId - User identifier
   * @param codes - Array of channel codes to authorize
   * @param correlationId - Request correlation ID
   * @param operation - Operation type (read, update, delete)
   * @param context - Channel authorization context
   * @returns Result containing authorized and denied channel codes
   */
  async authorizeChannelList(
    userId: string,
    codes: string[],
    correlationId: string,
    operation: BatchOperation = 'read',
    context?: ChannelAuthContext,
  ): Promise<Result<{ authorized: string[]; denied: string[] }, DomainError>> {
    return this.channelAuthorizationService.authorizeChannelList(
      userId,
      codes,
      correlationId,
      operation,
      context,
    );
  }
}
