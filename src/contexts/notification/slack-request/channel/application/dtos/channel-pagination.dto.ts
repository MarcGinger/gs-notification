// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * Channel list request DTO with pagination and filtering
 * Combines standardized pagination with channel-specific filters
 * Now extends shared base classes for consistency across domains
 */

import {
  BaseSortableListFilterRequest,
  SortFieldConfig,
  PaginationMetaResponse,
} from 'src/shared/application/dtos';
import { ApiListOf } from 'src/shared/application/decorators';
import { ApiPropertyOptional } from '@nestjs/swagger';
import {
  ApiChannelCode,
  ApiChannelListMeta,
  ApiChannelName,
  ApiChannelWorkspaceCode,
} from './decorators';
import { ListChannelResponse } from './';
/**
 * Channel list request DTO with pagination and filtering
 * Combines standardized pagination with channel-specific filters
 * Now extends shared base classes for consistency across domains
 *
 * Available sort fields:
 * - code: Sort by code (default: asc)
 * - name: Sort by name (default: asc)
 * - workspaceCode: Sort by workspaceCode (default: asc)
 *
 * Example sortBy usage: {"code": "asc", "name": "desc"}
 */
export class ListChannelFilterRequest extends BaseSortableListFilterRequest {
  @ApiChannelCode({ required: false })
  code?: string;

  @ApiChannelName({ required: false })
  name?: string;

  @ApiChannelWorkspaceCode({ required: false })
  workspaceCode?: string;

  /**
   * Override sortBy with channel-specific schema for better Swagger documentation
   */
  @ApiPropertyOptional({
    type: 'object',
    description: 'Sort criteria with field names and directions',
    example: { code: 'asc', name: 'asc' },
    default: { code: 'asc', name: 'asc' },
    properties: {
      Code: {
        type: 'string',
        enum: ['asc', 'desc'],
        description: 'Sort by code',
        default: 'asc',
      },
      Name: {
        type: 'string',
        enum: ['asc', 'desc'],
        description: 'Sort by name',
        default: 'asc',
      },
      WorkspaceCode: {
        type: 'string',
        enum: ['asc', 'desc'],
        description: 'Sort by workspaceCode',
        default: 'asc',
      },
    },
    additionalProperties: false,
  })
  sortBy?: Record<string, 'asc' | 'desc'> = undefined;
  /**
   * Define available sort fields for channels
   * This method ensures type-safe sorting validation
   *
   * Available sort fields:
   * - code: Channel code (sortable, default: asc)
   * - name: Channel name (sortable, default: asc)
   * - workspaceCode: Channel workspaceCode (sortable, default: asc)
   *
   * @returns Configuration object defining sortable fields and their properties
   */
  getSortFieldConfig(): SortFieldConfig {
    return {
      code: {
        description: 'Channel code',
        sortable: true,
        defaultDirection: 'asc' as const,
      },
      name: {
        description: 'Channel name',
        sortable: true,
        defaultDirection: 'asc' as const,
      },
      workspaceCode: {
        description: 'Channel workspaceCode',
        sortable: true,
        defaultDirection: 'asc' as const,
      },
    };
  }
}

/**
 * Channel page response DTO with metadata for pagination
 * Extends the generic PagedResponse pattern while maintaining API compatibility
 */
export class ChannelPageResponse {
  @ApiListOf(ListChannelResponse)
  readonly data: ListChannelResponse[];

  @ApiChannelListMeta()
  readonly meta: PaginationMetaResponse;

  constructor(data: ListChannelResponse[], meta: PaginationMetaResponse) {
    this.data = data;
    this.meta = meta;
  }

  /**
   * Static factory method for creating response instances
   */
  static create(
    data: ListChannelResponse[],
    meta: PaginationMetaResponse,
  ): ChannelPageResponse {
    return new ChannelPageResponse(data, meta);
  }

  /**
   * Check if response has data
   */
  get isEmpty(): boolean {
    return this.data.length === 0;
  }

  /**
   * Get total count if available
   */
  get totalCount(): number | undefined {
    return this.meta.totalItems;
  }
}
