// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { QueryHandler, IQueryHandler } from '@nestjs/cqrs';
import { Injectable } from '@nestjs/common';
import { DomainError, Result } from 'src/shared/errors';
import { ListChannelQuery } from '../queries';
import { ListChannelUseCase } from '../use-cases';
import { ChannelPageResponse } from '../dtos';

/**
 * ✅ Enhanced CQRS Query Handler with use case delegation
 * Follows the pattern: Handler → Use Case → Repository
 */
@Injectable()
@QueryHandler(ListChannelQuery)
export class ListChannelHandler implements IQueryHandler<ListChannelQuery> {
  constructor(private readonly listChannelUseCase: ListChannelUseCase) {}

  /**
   * Handle the list channel query by delegating to the use case
   */
  async execute(
    query: ListChannelQuery,
  ): Promise<Result<ChannelPageResponse, DomainError>> {
    // ✅ Delegate to use case for business logic
    return await this.listChannelUseCase.execute({
      user: query.user,
      filter: query.filter,
      correlationId: query.correlationId || 'unknown',
    });
  }
}
