// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import {
  Controller,
  Get,
  Query,
  Param,
  UseInterceptors,
  UseGuards,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiParam,
  ApiOkResponse,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { ChannelApplicationService } from '../../../application/services';
import { CurrentUser, IUserToken, JwtAuthGuard } from 'src/shared/security';
import {
  DetailChannelResponse,
  ChannelPageResponse,
  ListChannelFilterRequest,
  ListChannelResponse,
} from '../../../application/dtos';
import { Result, ResultInterceptor, DomainError } from 'src/shared/errors';
import { PaginatedResponse } from 'src/shared/application/dtos';
import { ChannelReadResource } from '../../channel.resource';
import { ApiCommonErrors } from 'src/shared/interfaces/http';

@Controller('channels')
@ApiTags('Channels')
@ApiBearerAuth()
@UseGuards(JwtAuthGuard)
@UseInterceptors(ResultInterceptor)
export class ChannelController {
  constructor(
    private readonly channelApplicationService: ChannelApplicationService,
  ) {}

  @Get()
  @ChannelReadResource()
  @ApiOperation({
    summary: 'List Channels',
    description:
      'Retrieves a list of Channels with optional filtering. Supports pagination and filtering by name or category. Requires READ permission (LOW risk).',
  })
  @ApiOkResponse({
    description: 'List of Channels retrieved successfully',
    type: ChannelPageResponse,
  })
  @ApiCommonErrors()
  async list(
    @CurrentUser() user: IUserToken,
    @Query() pageRequest?: ListChannelFilterRequest,
  ): Promise<Result<PaginatedResponse<ListChannelResponse>, DomainError>> {
    const result = await this.channelApplicationService.listChannels(
      user,
      pageRequest,
    );
    return result;
  }

  @Get(':code')
  @ChannelReadResource()
  @ApiOperation({
    summary: 'Get Channel by ID',
    description:
      'Retrieves a single Channel by its unique identifier. Requires READ permission (LOW risk).',
  })
  @ApiParam({
    name: 'code',
    type: 'string',
    description: 'Channel unique identifier',
    example: 'C01EXAMPLE001',
  })
  @ApiOkResponse({
    description: 'Channel details retrieved successfully',
    type: DetailChannelResponse,
  })
  @ApiCommonErrors()
  async get(
    @CurrentUser() user: IUserToken,
    @Param('code') code: string,
  ): Promise<Result<DetailChannelResponse, DomainError>> {
    const result = await this.channelApplicationService.getChannelById(
      user,
      code,
    );

    return result;
  }
}
