// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * Channel Resource Decorators - Domain-Driven Authorization
 *
 * Clean integration with domain-driven permissions infrastructure.
 * All business rules and risk assessments come from the domain layer.
 *
 * ARCHITECTURAL PRINCIPLE: No business logic duplication
 * ✅ Risk levels: ChannelPermissionHelpers.getRiskLevel()
 * ✅ Justification rules: ChannelPermissionHelpers.requiresJustification()
 * ✅ Categories: ChannelPermissionRegistry[permission].category
 * ✅ Policy paths: ChannelPermissionHelpers.getPolicyPath()
 * ✅ Audit requirements: ChannelPermissionRegistry[permission].auditRequired
 *
 * This keeps the HTTP layer thin and ensures business rules
 * live in the domain where they belong.
 */

import { Resource } from 'src/shared/security/opa';
import { Request } from 'express';
import {
  ChannelPermission,
  ChannelPermissionHelpers,
  ChannelPermissionRegistry,
} from '../domain/permissions';

/**
 * Domain-driven Channel resource decorator
 *
 * All business rules come from the domain layer - no duplication!
 */
export const ChannelResource = (permission: ChannelPermission) =>
  Resource({
    type: 'channel',
    action: permission,
    extractId: (req: Request) => req.params?.code || req.params?.id,
    extractAttributes: (req: Request) => {
      const body = req.body as Record<string, unknown> | undefined;
      const query = req.query as Record<string, unknown> | undefined;

      // Business data extraction
      const name = body?.name || query?.name;
      const workspaceCode = body?.workspaceCode || query?.workspaceCode;
      const isPrivate = body?.isPrivate || query?.isPrivate;
      const isDm = body?.isDm || query?.isDm;
      const topic = body?.topic || query?.topic;
      const purpose = body?.purpose || query?.purpose;
      const subscribedEvents =
        body?.subscribedEvents || query?.subscribedEvents;
      const enabled = body?.enabled || query?.enabled;

      const baseAttributes = {
        name,
        workspaceCode,
        isPrivate,
        isDm,
        topic,
        purpose,
        subscribedEvents,
        enabled,
      };

      // Domain-driven permission context (no hardcoded business rules!)
      const permissionMeta = ChannelPermissionRegistry[permission];
      const permissionContext = {
        permission,
        riskLevel: ChannelPermissionHelpers.getRiskLevel(permission),
        requiresJustification:
          ChannelPermissionHelpers.requiresJustification(permission),
        category: permissionMeta?.category as string,
        policyPath: ChannelPermissionHelpers.getPolicyPath(permission),
        auditRequired: ChannelPermissionHelpers.requiresAudit(permission),
      };

      return {
        ...baseAttributes,
        _permissionContext: permissionContext,
      };
    },
  });

/**
 * Specialized decorators for high-risk operations
 */
export const ChannelDeleteResource = () =>
  ChannelResource(ChannelPermission.DOMAIN_CHANNEL_DELETE);

export const ChannelCreateResource = () =>
  ChannelResource(ChannelPermission.DOMAIN_CHANNEL_CREATE);

export const ChannelUpdateResource = () =>
  ChannelResource(ChannelPermission.DOMAIN_CHANNEL_UPDATE);

export const ChannelReadResource = () =>
  ChannelResource(ChannelPermission.DOMAIN_CHANNEL_READ);
