// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Result, DomainError, err, ok } from 'src/shared/errors';
import { ActorContext } from 'src/shared/application/context';
import {
  BaseWriterRepository,
  SaveReceipt,
} from 'src/shared/infrastructure/repositories';
import { Inject } from '@nestjs/common';
import { ANY } from '@kurrent/kurrentdb-client';
import { RepositoryErrorFactory } from 'src/shared/domain/errors/repository.error';
import { DomainEvent, EventMetadata } from 'src/shared/domain/events';
import { EventStoreService } from 'src/shared/infrastructure/eventstore';
import { APP_LOGGER, Log, componentLogger, Logger } from 'src/shared/logging';
import { Clock, CLOCK } from 'src/shared/infrastructure/time';
import { CorrelationUtil } from 'src/shared/utilities/correlation.util';
import {
  RepositoryLoggingUtil,
  RepositoryLoggingConfig,
} from 'src/shared/infrastructure/repositories';
import { SlackRequestServiceConstants } from '../../../service-constants';
import { ChannelAggregate } from '../../domain/aggregates';
import { ChannelProjectionKeys } from '../../channel-projection-keys';
import { ChannelCode } from '../../domain/value-objects';
import { ChannelDeletedEvent } from '../../domain/events';
import { IChannelWriter } from '../../application/ports';

/**
 * Channel Writer Repository - Interface Segregation Principle Implementation
 *
 * Handles write operations (create, update, delete) for Channel aggregates.
 * This repository focuses solely on data modification operations.
 *
 * ISP Benefits:
 * - Clients that only need to write data don't depend on read methods
 * - Easier to implement write-only scenarios (e.g., event sourcing)
 * - Can be secured separately from read operations
 * - Supports command-only patterns in CQRS architectures
 *
 * @domain Notification Context - Channel Writer Repository
 * @layer Infrastructure
 * @pattern Repository Pattern + Interface Segregation Principle
 */
export class ChannelWriterRepository
  extends BaseWriterRepository
  implements IChannelWriter
{
  private readonly logger: Logger;
  private readonly loggingConfig: RepositoryLoggingConfig;

  constructor(
    @Inject(APP_LOGGER) baseLogger: Logger,
    private readonly eventStore: EventStoreService,
    @Inject(CLOCK) private readonly clock: Clock,
  ) {
    super();
    this.loggingConfig = {
      serviceName: 'NotificationSlackRequestService',
      component: 'ChannelWriterRepository',
    };
    this.logger = componentLogger(baseLogger, this.loggingConfig.component);
  }

  /**
   * Save a Channel aggregate (create or update) using EventStoreDB-first approach
   * @param actor - The authenticated user context
   * @param channel - The Channel aggregate to save
   * @param expectedVersionFromCaller - Optional version for optimistic locking
   * @returns Result with SaveReceipt containing revision tracking or domain error
   */
  async save(
    actor: ActorContext,
    channel: ChannelAggregate,
    expectedVersionFromCaller?: number,
  ): Promise<Result<SaveReceipt, DomainError>> {
    const operation = 'save';
    const correlationId = CorrelationUtil.generateForOperation('channel-save');

    const logContext = RepositoryLoggingUtil.createLogContext(
      this.loggingConfig,
      this.clock,
      operation,
      correlationId,
      actor,
      {
        aggregateId: channel.id.value,
        currentVersion: channel.version,
        eventCount: channel.uncommittedEvents?.length ?? 0,
      },
    );

    // Validate actor context with enhanced security logging
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) {
      return validation;
    }

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      {
        operationType: 'aggregate_save',
        scope: 'channel_events',
        aggregateId: channel.id.value,
      },
    );

    const stream = this.buildStreamName(
      actor.tenant,
      ChannelProjectionKeys.getEventStoreStreamPrefix(),
      channel.id.value,
    );
    const events = channel.uncommittedEvents ?? [];

    // No-op save: return ok receipt (many apps "save" unchanged aggregates)
    if (events.length === 0) {
      Log.debug(this.logger, 'No uncommitted events; no-op save', {
        ...logContext,
        stream,
        operationResult: 'no_op',
      });

      const receipt: SaveReceipt = {
        stream,
        aggregateId: channel.id.value,
        tenant: actor.tenant ?? 'default',
        eventCount: 0,
        newVersion: channel.version,
        streamRevision:
          channel.version === 0 ? BigInt(-1) : BigInt(channel.version - 1),
        timestampIso: this.clock.nowIso(),
      };

      // Log no-op metrics
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: 0,
          dataQuality: 'empty',
          sampleData: {
            operationType: 'no_op',
            reason: 'no_uncommitted_events',
          },
        },
      );

      return ok(receipt);
    }

    // Use original events for persistence (no PII processing needed)
    const eventsToStore = events;

    // prevVersion = version BEFORE current batch
    const prevVersion = channel.version - eventsToStore.length;

    // Optional optimistic lock from caller
    if (
      expectedVersionFromCaller !== undefined &&
      expectedVersionFromCaller !== prevVersion
    ) {
      Log.warn(this.logger, 'Pre-check optimistic lock failed', {
        ...logContext,
        stream,
        expectedVersionFromCaller,
        prevVersion,
        concurrencyError: 'optimistic_lock_failure',
      });

      return err(
        RepositoryErrorFactory.concurrencyConflict(
          expectedVersionFromCaller,
          prevVersion,
        ),
      );
    }

    // ESDB expected revision from prevVersion
    const expectedRevision = this.computeExpectedRevision(prevVersion);

    // Extract metadata from first event for causation chain
    const firstEvent = eventsToStore[0];
    const metadata = firstEvent?.metadata;

    const envelopes = this.toEnvelopes(
      stream,
      eventsToStore,
      actor,
      'channel-writer-repository',
      SlackRequestServiceConstants.BOUNDED_CONTEXT,
      {
        correlationId: metadata?.correlationId ?? correlationId,
        causationId: metadata?.causationId,
        commandId: metadata?.requestId,
      },
    );

    try {
      Log.debug(this.logger, 'Appending events to EventStoreDB', {
        ...logContext,
        stream,
        eventCount: eventsToStore.length,
        prevVersion,
        expectedRevision: expectedRevision.toString(),
      });

      const appendResult = await this.eventStore.append(
        stream,
        envelopes,
        expectedRevision,
      );

      // Mark committed only AFTER ESDB append succeeds
      channel.markEventsAsCommitted();

      // NOTE: Do NOT mutate the read model here synchronously.
      // Let the projector catch up asynchronously to avoid distributed transaction issues.

      const receipt: SaveReceipt = {
        stream,
        aggregateId: channel.id.value,
        tenant: actor.tenant ?? 'default',
        eventCount: eventsToStore.length,
        newVersion: prevVersion + eventsToStore.length,
        streamRevision: appendResult?.nextExpectedRevision ?? BigInt(0), // keep as bigint, not number
        timestampIso: this.clock.nowIso(),
      };

      // Log successful save metrics using shared utility
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: eventsToStore.length,
          dataQuality: 'good',
          sampleData: {
            stream,
            eventsAppended: eventsToStore.length,
            newVersion: receipt.newVersion,
            streamRevision: appendResult?.nextExpectedRevision?.toString(),
          },
        },
      );

      return ok(receipt);
    } catch (error) {
      // Translate wrong expected version, connectivity, etc., to domain errors
      const e = error as Error;

      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        e,
        'HIGH',
      );

      return err(
        RepositoryErrorFactory.connectionError(
          e.message || 'Unknown error occurred during EventStoreDB append',
        ),
      );
    }
  }

  /**
   * Delete a Channel by its unique identifier using EventStoreDB-first approach
   * @param actor - The authenticated user context
   * @param code - The unique identifier of the Channel to delete
   * @param opts - Optional parameters including expected version and metadata
   * @returns Result with SaveReceipt containing revision tracking or domain error
   */
  async delete(
    actor: ActorContext,
    code: ChannelCode,
    opts?: {
      expectedVersion?: number;
      meta?: {
        correlationId?: string;
        causationId?: string;
        commandId?: string;
      };
    },
  ): Promise<Result<SaveReceipt, DomainError>> {
    const operation = 'delete';
    const correlationId =
      opts?.meta?.correlationId ??
      CorrelationUtil.generateForOperation('channel-delete');

    const logContext = RepositoryLoggingUtil.createLogContext(
      this.loggingConfig,
      this.clock,
      operation,
      correlationId,
      actor,
      {
        channelCode: code.value,
        expectedVersion: opts?.expectedVersion,
        hasMetadata: !!opts?.meta,
      },
    );

    // Validate actor context with enhanced security logging
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) {
      return validation;
    }

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      {
        operationType: 'aggregate_delete',
        scope: 'channel_deletion',
        channelCode: code.value,
      },
    );

    const stream = this.buildStreamName(
      actor.tenant,
      ChannelProjectionKeys.getEventStoreStreamPrefix(),
      code.value,
    );

    // Create proper domain event metadata
    const eventMetadata: EventMetadata = {
      actor: {
        userId: actor.userId,
        tenant: actor.tenant,
        tenant_userId: actor.tenant_userId,
      },
      correlationId,
      causationId: opts?.meta?.causationId,
      requestId: opts?.meta?.commandId,
      service: 'channel-writer-repository',
      timestampIso: this.clock.nowIso(),
      eventVersion: '1.0',
      schemaVersion: '2023.1',
      source: 'notification.domain.channel',
    };

    // Create proper ChannelDeletedEvent
    const deletedEvent = ChannelDeletedEvent.create(
      {
        code: code.value,
        deletedAt: this.clock.now(),
        version: opts?.expectedVersion ?? 1,
      },
      eventMetadata,
    );

    // Convert to DomainEvent interface format
    const domainEvent: DomainEvent = {
      type: deletedEvent.eventType,
      version: 1, // Convert string version to number
      occurredAt: this.clock.now(),
      aggregateId: code.value,
      aggregateType: 'Channel',
      data: deletedEvent.payload,
      metadata: eventMetadata,
    };

    const events = [domainEvent];

    // Use ANY if no expected version provided (allows deletion of existing streams)
    const expectedRevision =
      opts?.expectedVersion !== undefined
        ? this.computeExpectedRevision(opts.expectedVersion)
        : ANY;

    try {
      Log.debug(
        this.logger,
        'Appending channel deletion event to EventStoreDB',
        {
          ...logContext,
          stream,
          channelCode: code.value,
          expectedRevision: expectedRevision.toString(),
          eventType: domainEvent.type,
        },
      );

      const appendResult = await this.eventStore.append(
        stream,
        this.toEnvelopes(
          stream,
          events,
          actor,
          'channel-writer-repository',
          SlackRequestServiceConstants.BOUNDED_CONTEXT,
          opts?.meta,
        ),
        expectedRevision,
      );

      const receipt: SaveReceipt = {
        stream,
        aggregateId: code.value,
        tenant: actor.tenant ?? 'default',
        eventCount: 1,
        // newVersion omitted - we don't know it with ANY expectedRevision
        streamRevision: appendResult?.nextExpectedRevision ?? BigInt(0),
        timestampIso: this.clock.nowIso(),
        correlationId,
      };

      // Log successful deletion metrics using shared utility
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: 1,
          dataQuality: 'good',
          sampleData: {
            stream,
            channelCode: code.value,
            streamRevision: appendResult?.nextExpectedRevision?.toString(),
            eventType: 'ChannelDeletedEvent',
          },
        },
      );

      return ok(receipt);
    } catch (error) {
      const e = error as Error;

      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        e,
        'HIGH',
      );

      return err(
        RepositoryErrorFactory.connectionError(
          e.message || 'Unknown error occurred during delete operation',
        ),
      );
    }
  }
}
