// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * Channel State Infrastructure Mappers
 *
 * Bidirectional mapping between pure VO domain state and primitive persistence snapshot.
 * Handles conversion between rich domain objects and raw database data.
 */

import {
  ChannelCode,
  ChannelName,
  ChannelWorkspaceCode,
  ChannelIsPrivate,
  ChannelIsDm,
  ChannelTopic,
  ChannelPurpose,
  ChannelSubscribedEvents,
  ChannelEnabled,
  ChannelCreatedAt,
  ChannelUpdatedAt,
  ChannelVersion,
} from '../../domain/value-objects';
import { Result, ok, err, DomainError } from 'src/shared/errors';
import { ChannelDomainState } from '../../domain/state/channel.state';
import { ChannelSnapshotProps } from '../../domain/props';

/**
 * Infrastructure State Mapper
 *
 * Handles conversion between domain VOs and persistence primitives.
 * This is where primitive obsession is eliminated - converting between
 * rich domain objects and raw database data.
 */
export class ChannelStateMapper {
  /**
   * Convert primitive persistence snapshot to rich domain state
   *
   * @param snapshot - Raw database/persistence data
   * @returns Rich domain state with VOs or error
   */
  static toDomain(
    snapshot: ChannelSnapshotProps,
  ): Result<ChannelDomainState, DomainError> {
    const errors: Array<{ field: string; error: DomainError }> = [];

    // Helper function to validate and collect errors
    const validateField = <T>(
      fieldName: string,
      result: Result<T, DomainError>,
    ): T | null => {
      if (!result.ok) {
        errors.push({ field: fieldName, error: result.error });
        return null;
      }
      return result.value;
    };

    // Convert each primitive to its corresponding VO with error collection
    const code = validateField('code', ChannelCode.from(snapshot.code));
    const name = validateField('name', ChannelName.from(snapshot.name));
    const workspaceCode = validateField(
      'workspaceCode',
      ChannelWorkspaceCode.from(snapshot.workspaceCode),
    );
    const isPrivate = validateField(
      'isPrivate',
      ChannelIsPrivate.from(snapshot.isPrivate),
    );
    const isDm = validateField('isDm', ChannelIsDm.from(snapshot.isDm));
    const topic = snapshot.topic
      ? validateField('topic', ChannelTopic.from(snapshot.topic))
      : undefined;
    const purpose = snapshot.purpose
      ? validateField('purpose', ChannelPurpose.from(snapshot.purpose))
      : undefined;
    const subscribedEvents = snapshot.subscribedEvents
      ? validateField(
          'subscribedEvents',
          ChannelSubscribedEvents.from(snapshot.subscribedEvents),
        )
      : undefined;
    const enabled = validateField(
      'enabled',
      ChannelEnabled.from(snapshot.enabled),
    );
    const version = validateField(
      'version',
      ChannelVersion.from(snapshot.version),
    );
    const createdAt = validateField(
      'createdAt',
      ChannelCreatedAt.from(snapshot.createdAt),
    );
    const updatedAt = validateField(
      'updatedAt',
      ChannelUpdatedAt.from(snapshot.updatedAt),
    );

    // If any validations failed, return aggregated error
    if (errors.length > 0) {
      return err({
        code: 'CHANNEL.MAPPER_VALIDATION_FAILED',
        title: 'Domain State Mapping Failed',
        detail: `Failed to create domain state from persistence snapshot. ${errors.length} validation error(s) occurred.`,
        category: 'infrastructure',
        retryable: false,
        context: {
          validationErrors: errors.map((e) => ({
            field: e.field,
            errorCode: e.error.code,
            errorMessage: e.error.detail,
          })),
          snapshotCode: snapshot.code,
        },
      });
    }

    // All validations passed, construct the rich domain state
    const domainState: ChannelDomainState = {
      code: code!,
      name: name!,
      workspaceCode: workspaceCode!,
      isPrivate: isPrivate!,
      isDm: isDm!,
      topic: topic || undefined,
      purpose: purpose || undefined,
      subscribedEvents: subscribedEvents || undefined,
      enabled: enabled!,
      version: version!,
      createdAt: createdAt!,
      updatedAt: updatedAt!,
    };

    return ok(domainState);
  }

  /**
   * Convert rich domain state to primitive persistence snapshot
   *
   * @param domainState - Rich domain state with VOs
   * @returns Raw persistence data for database storage
   */
  static toSnapshot(domainState: ChannelDomainState): ChannelSnapshotProps {
    return {
      // Extract primitive values from VOs
      code: domainState.code.value,
      name: domainState.name.value,
      workspaceCode: domainState.workspaceCode.value,
      isPrivate: domainState.isPrivate.value,
      isDm: domainState.isDm.value,
      topic: domainState.topic?.value,
      purpose: domainState.purpose?.value,
      subscribedEvents: domainState.subscribedEvents?.toArray(),
      enabled: domainState.enabled.value,
      version: domainState.version.value,
      createdAt: domainState.createdAt.value,
      updatedAt: domainState.updatedAt.value,
    };
  }
}
