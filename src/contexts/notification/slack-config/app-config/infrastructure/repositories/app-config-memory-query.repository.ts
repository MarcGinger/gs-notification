// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Injectable, Inject } from '@nestjs/common';
import { APP_LOGGER, Log, componentLogger, Logger } from 'src/shared/logging';
import { CorrelationUtil } from 'src/shared/utilities/correlation.util';
import { Clock, CLOCK } from 'src/shared/infrastructure/time';
import {
  RepositoryLoggingUtil,
  RepositoryLoggingConfig,
  handleRepositoryError,
  RepositoryOptions,
} from 'src/shared/infrastructure/repositories';
import { Result, DomainError, ok } from 'src/shared/errors';
import { ActorContext } from 'src/shared/application/context';
import { Option } from 'src/shared/domain/types';
import { CacheMetricsCollector } from 'src/shared/infrastructure/projections/cache-optimization';
import { DetailAppConfigResponse } from '../../application/dtos';
import {
  appConfigStore,
  AppConfigProjection,
} from '../stores/app-config.store';
import { IAppConfigQuery } from '../../application/ports';

/**
 * AppConfig Read Model - In-Memory Projection
 * Used internally by the query repository to work with read-optimized data
 * Uses DTOs consistently throughout (proper CQRS pattern - no domain props in read model)
 */
interface AppConfigReadModel {
  id: number;
  workspaceId: string;
  maxRetryAttempts: number;
  retryBackoffSeconds: number;
  defaultLocale: string;
  loggingEnabled: boolean;
  auditChannelId?: string;
  metadata?: Record<string, unknown>;
  createdAt: Date;
  updatedAt: Date;
  version: number;
}

/**
 * Domain Props to DTO Conversion Utilities
 * Used when converting from the in-memory store (domain props) to the read model (DTOs)


/**
 * AppConfig Query Repository - CQRS Read Model Implementation (In-Memory)
 *
 * Bounded Context: Notification/AppConfig
 * Handles complex query operations including pagination, filtering, and search using in-memory projector
 * as the data source. Returns DTOs/ViewModels optimized for read operations, NOT domain props.
 *
 * CQRS Benefits:
 * - Returns read-optimized DTOs (DetailAppConfigResponse, ListAppConfigResponse)
 * - No dependency on domain props (proper read/write model separation)
 * - Zero external database dependencies
 * - Ultra-fast query operations (LRU cache)
 * - Perfect for testing, prototyping, and shadow validation
 * - Comprehensive logging and error handling
 *
 * ISP Benefits:
 * - Clients that need simple reads don't depend on complex query methods
 * - Can be optimized independently using in-memory indexing strategies
 * - Easier to implement caching strategies for query operations
 * - Supports analytical and reporting use cases with in-memory operations
 *
 * @domain Notification Context - AppConfig Query Repository (Read Side)
 * @layer Infrastructure
 * @pattern CQRS + Repository Pattern + Interface Segregation Principle + In-Memory Projector
 */
@Injectable()
export class AppConfigQueryRepository implements IAppConfigQuery {
  private readonly logger: Logger;
  private readonly loggingConfig: RepositoryLoggingConfig;
  private readonly metricsCollector = new CacheMetricsCollector();

  constructor(
    @Inject(APP_LOGGER) baseLogger: Logger,
    @Inject(CLOCK) private readonly clock: Clock,
  ) {
    this.loggingConfig = {
      serviceName: 'AppConfigConfigService',
      component: 'AppConfigQueryRepository',
    };
    this.logger = componentLogger(baseLogger, this.loggingConfig.component);

    Log.info(
      this.logger,
      'AppConfigQueryRepository initialized with in-memory backend',
      {
        component: this.loggingConfig.component,
        architecture: 'in-memory-shared-store',
        dataSource: 'in-memory-projector',
        cacheOptimized: true,
      },
    );
  }

  /**
   * Convert AppConfigProjection to AppConfigReadModel (reusable conversion logic)
   */
  private projectionToReadModel(
    projection: AppConfigProjection,
  ): AppConfigReadModel {
    return {
      id: projection.id,
      workspaceId: projection.workspaceId,
      maxRetryAttempts: projection.maxRetryAttempts,
      retryBackoffSeconds: projection.retryBackoffSeconds,
      defaultLocale: projection.defaultLocale,
      loggingEnabled: projection.loggingEnabled,
      auditChannelId: projection.auditChannelId,
      metadata: projection.metadata,
      createdAt: projection.createdAt || this.clock.now(),
      updatedAt: projection.updatedAt || this.clock.now(),
      version: projection.version || 1,
    };
  }

  /**
   * Get all app-configs for a tenant from the in-memory store
   * Filters out soft-deleted app-configs and converts to read model
   */
  private getAppConfigsForTenant(tenantId: string): AppConfigReadModel[] {
    const allProjections = appConfigStore.getAll();
    const appConfigs: AppConfigReadModel[] = [];

    for (const [key, projection] of allProjections) {
      // Parse key to extract tenant and id
      const [projectionTenantId] = key.split(':');

      // Only include app-configs for the requested tenant
      if (projectionTenantId === tenantId && !projection.deletedAt) {
        // Convert projection to read model using shared conversion logic
        const readModel = this.projectionToReadModel(projection);
        appConfigs.push(readModel);
      }
    }

    return appConfigs;
  }

  /**
   * Transform AppConfigReadModel to DetailAppConfigResponse DTO
   */
  private toDetailResponse(
    appConfig: AppConfigReadModel,
  ): DetailAppConfigResponse {
    return {
      id: appConfig.id,
      workspaceId: appConfig.workspaceId,
      maxRetryAttempts: appConfig.maxRetryAttempts,
      retryBackoffSeconds: appConfig.retryBackoffSeconds,
      defaultLocale: appConfig.defaultLocale,
      loggingEnabled: appConfig.loggingEnabled,
      auditChannelId: appConfig.auditChannelId,
      metadata: appConfig.metadata,
    } as DetailAppConfigResponse;
  }
  /**
   * Helper to create consistent logging context using shared utilities
   */
  private createLogContext(
    operation: string,
    correlationId: string,
    actor: ActorContext,
    additionalContext?: Record<string, unknown>,
  ): Record<string, unknown> {
    return RepositoryLoggingUtil.createLogContext(
      this.loggingConfig,
      this.clock,
      operation,
      correlationId,
      actor,
      additionalContext,
    );
  }

  /**
   * Find a single AppConfig by its unique identifier (for CQRS query operations)
   * @param actor - The actor context containing authentication and request metadata
   * @param id - The unique identifier of the AppConfig
   * @param options - Optional repository options
   * @returns A promise resolving to a Result containing the AppConfig or null if not found
   */
  findById(
    actor: ActorContext,
    id: number,
    options?: RepositoryOptions,
  ): Promise<Result<Option<DetailAppConfigResponse>, DomainError>> {
    const operation = 'findById';
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('appConfig-query-findById');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      appConfigId: id,
    });

    try {
      Log.debug(this.logger, 'Finding appConfig by ID', {
        ...logContext,
        queryDetails: {
          scope: 'shared_appConfig_store',
          method: 'appConfigStore.get',
          tenantId: actor.tenantId,
        },
      });

      // Find the appConfig in the store
      const projection = appConfigStore.get(
        actor.tenantId || 'default-tenant',
        id.toString(),
      );

      if (!projection) {
        Log.debug(this.logger, 'AppConfig not found', logContext);
        return Promise.resolve(ok(Option.none()));
      }

      // Convert projection to read model, then transform to DetailAppConfigResponse DTO
      const readModel = this.projectionToReadModel(projection);
      const detailResponse = this.toDetailResponse(readModel);

      Log.debug(this.logger, 'AppConfig found successfully', {
        ...logContext,
        resultData: {
          appConfigId: detailResponse.id,
        },
      });

      return Promise.resolve(ok(Option.some(detailResponse)));
    } catch (error) {
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'MEDIUM',
      );
      return Promise.resolve(handleRepositoryError(error));
    }
  }
}
