// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

// AppConfig Projector - ESDB to In-Memory Projection
// Optimized for testing, prototyping, shadow validation, and ephemeral scenarios

import {
  Injectable,
  Inject,
  OnModuleInit,
  OnModuleDestroy,
} from '@nestjs/common';
import { performance } from 'node:perf_hooks';
import {
  CatchUpRunner,
  ProjectionEvent,
  RunOptions,
} from 'src/shared/infrastructure/projections/catchup.runner';
import { BaseProjector } from 'src/shared/infrastructure/projections/base.projector';
import {
  CommonProjectorErrorDefinitions,
  createProjectorErrorCatalog,
  TenantExtractor,
} from 'src/shared/infrastructure/projections/projection.utils';
import { APP_LOGGER, Log, Logger } from 'src/shared/logging';
import { Clock, CLOCK } from 'src/shared/infrastructure/time';
import { withContext } from 'src/shared/errors';
import {
  InMemoryCheckpointStore,
  ProjectionMetrics,
  ProjectionMetricsCollector,
} from 'src/shared/infrastructure/stores';
import { AppConfigProjectionKeys } from '../../app-config-projection-keys';
import { DetailAppConfigResponse } from '../../application/dtos';
import {
  appConfigStore,
  AppConfigProjection,
} from '../stores/app-config.store';
import { AppConfigFieldValidatorUtil } from '../utilities/app-config-field-validator.util';

/**
 * AppConfig projector error catalog using shared error definitions
 */
const AppConfigProjectorErrors = createProjectorErrorCatalog(
  'APP_CONFIG_PROJECTOR_INMEMORY',
  CommonProjectorErrorDefinitions,
);

/**
 * Extracted appConfig parameters from event data
 */
interface ExtractedAppConfigParams extends DetailAppConfigResponse {
  tenantId: string;
  version?: number;
}

/**
 * Extended appConfig projection with projector-specific metadata
 */
interface InMemoryAppConfigProjection extends AppConfigProjection {
  // In-memory specific metadata
  projectionTimestamp: Date;
  eventCount: number;
  lastEventType: string;
}

/**
 * AppConfig Projector using In-Memory Architecture
 *
 * Perfect for:
 * - Unit & property tests: Run projection logic fast and hermetically
 * - Local dev / rapid prototyping: No infrastructure dependencies
 * - Shadow/canary validation: Run parallel with production for comparison
 * - Dry-run replays: Simulate outcomes without persistence
 * - Contract evolution checks: Verify producer changes won't break consumers
 * - Benchmarking: Profile logic without I/O noise
 * - Ephemeral caches: Ultra-low latency for small reference data
 * - Gatekeeping validation: Assert invariants before heavy operations
 * - Edge scenarios: When external stores aren't available
 * - Ad hoc analytics: Safe experimentation playground
 *
 * Features:
 * - LRU eviction for bounded memory usage
 * - Comprehensive metrics and observability
 * - Shadow mode with diff capability
 * - Snapshot + incremental patterns
 * - Per-stream isolation
 * - Fast reset and replay capabilities
 * - Zero external dependencies
 */
@Injectable()
export class AppConfigProjector
  extends BaseProjector
  implements OnModuleInit, OnModuleDestroy
{
  // Metrics and observability
  private metrics: ProjectionMetricsCollector;

  // Shadow mode support
  private shadowMode = false;
  private shadowCallback?: (
    key: string,
    primaryResult: InMemoryAppConfigProjection,
    shadowResult?: InMemoryAppConfigProjection,
    comparisonResult?: any,
  ) => void;

  // Deduplication window to prevent processing same event multiple times
  private readonly recentEvents: Map<string, number> = new Map();
  private readonly dedupWindowMs = 5000; // 5 second window

  constructor(
    @Inject(APP_LOGGER) baseLogger: Logger,
    @Inject(CLOCK) private readonly clock: Clock,
    @Inject(CatchUpRunner) private readonly catchUpRunner: CatchUpRunner,
  ) {
    const inMemoryCheckpointStore = new InMemoryCheckpointStore();

    super(
      'app-config-projector-inmemory',
      'app-config-projection-inmemory',
      baseLogger,
      inMemoryCheckpointStore,
    );

    // Initialize metrics
    this.metrics = new ProjectionMetricsCollector();

    Log.info(
      this.logger,
      'AppConfigProjectorInMemory initialized using shared appConfig store',
      {
        method: 'constructor',
        subscriptionGroup: this.subscriptionGroup,
        architecture: 'in-memory-shared-store',
        features: [
          'shared-store',
          'shadow-mode',
          'metrics-collection',
          'zero-dependencies',
        ],
        useCases: [
          'unit-testing',
          'rapid-prototyping',
          'shadow-validation',
          'dry-run-replays',
          'benchmarking',
        ],
      },
    );
  }

  /**
   * Enable shadow mode for parallel validation with production projector
   */
  enableShadowMode(
    callback: (
      key: string,
      inMemoryProjection: InMemoryAppConfigProjection,
      expectedProjection?: any,
    ) => void,
  ): void {
    this.shadowMode = true;
    this.shadowCallback = callback;

    Log.info(this.logger, 'Shadow mode enabled for parallel validation', {
      method: 'enableShadowMode',
      shadowMode: true,
    });
  }

  /**
   * Disable shadow mode
   */
  disableShadowMode(): void {
    this.shadowMode = false;
    this.shadowCallback = undefined;

    Log.info(this.logger, 'Shadow mode disabled', {
      method: 'disableShadowMode',
      shadowMode: false,
    });
  }

  /**
   * Load snapshot data for snapshot + incremental pattern
   */
  loadSnapshot(snapshot: Map<string, InMemoryAppConfigProjection>): void {
    appConfigStore.clear();

    for (const [key, projection] of snapshot) {
      const [tenantId, , id] = key.split(':');
      appConfigStore.set(tenantId, id.toString(), projection);
    }

    this.updateMetrics();

    Log.info(this.logger, 'Snapshot loaded successfully', {
      method: 'loadSnapshot',
      entitiesLoaded: snapshot.size,
      memoryUsage: this.estimateMemoryUsage(),
    });
  }

  /**
   * Create snapshot for persistence or comparison
   */
  createSnapshot(): Map<string, InMemoryAppConfigProjection> {
    const snapshot = new Map<string, InMemoryAppConfigProjection>();

    for (const [key, projection] of appConfigStore.getAll()) {
      // Add projector-specific metadata to base projection
      const extendedProjection: InMemoryAppConfigProjection = {
        ...projection,
        projectionTimestamp: new Date(),
        eventCount: 1, // Default values for snapshot
        lastEventType: 'snapshot',
      };
      snapshot.set(key, { ...extendedProjection }); // Deep copy for safety
    }

    Log.info(this.logger, 'Snapshot created', {
      method: 'createSnapshot',
      entitiesSnapshotted: snapshot.size,
    });

    return snapshot;
  }

  /**
   * Get current metrics
   */
  getMetrics(): ProjectionMetrics {
    this.updateMetrics();
    return this.metrics.getMetrics();
  }

  /**
   * Get projection by key with hit/miss tracking
   */
  getProjection(key: string): InMemoryAppConfigProjection | undefined {
    const [tenantId, , id] = key.split(':');
    const projection = appConfigStore.get(tenantId, id.toString());

    if (projection) {
      this.metrics.recordCacheHit();
      // Add projector-specific metadata to base projection
      return {
        ...projection,
        projectionTimestamp: new Date(),
        eventCount: 1, // Default value
        lastEventType: 'get',
      };
    } else {
      this.metrics.recordCacheMiss();
      return undefined;
    }
  }

  /**
   * Get all projections (for testing and inspection)
   */
  getAllProjections(): Array<[string, InMemoryAppConfigProjection]> {
    return appConfigStore.getAll().map(([key, projection]) => [
      key,
      {
        ...projection,
        projectionTimestamp: new Date(),
        eventCount: 1, // Default value
        lastEventType: 'getAll',
      },
    ]);
  }

  /**
   * Clear all projections and reset metrics
   */
  clear(): void {
    appConfigStore.clear();
    void this.checkpointStore.clear();

    // Clear deduplication window
    this.recentEvents.clear();

    // Reset metrics
    this.metrics = new ProjectionMetricsCollector();

    Log.info(this.logger, 'In-memory projector cleared', {
      method: 'clear',
      status: 'reset',
    });
  }

  /**
   * Start the projector using CatchUpRunner
   */
  onModuleInit(): void {
    Log.info(
      this.logger,
      'Starting AppConfig Projector (In-Memory) with CatchUpRunner',
      {
        method: 'onModuleInit',
        subscriptionGroup: this.subscriptionGroup,
        architecture: 'in-memory',
        maxCacheSize: 5000, // From appConfig store
      },
    );

    try {
      const runOptions: RunOptions = {
        prefixes: [AppConfigProjectionKeys.getEventStoreStreamPrefix()],
        batchSize: 1000, // Higher batch size for in-memory processing
        stopOnCaughtUp: false,
        maxRetries: 3,
        retryDelayMs: 100, // Faster retries for in-memory
        checkpointBatchSize: 100,
      };

      // Start the projection in the background
      this.catchUpRunner
        .runSafe(
          this.subscriptionGroup,
          this.projectEvent.bind(this) as (
            event: ProjectionEvent,
          ) => Promise<void>,
          runOptions,
        )
        .then((result) => {
          if (!result.ok) {
            this.updateHealthStatusOnError(
              result.error.detail || 'Unknown error',
            );
            Log.error(this.logger, 'Projection failed to start', {
              method: 'onModuleInit',
              error: result.error.detail || 'Unknown error',
            });
          } else {
            Log.info(this.logger, 'Projection completed successfully', {
              method: 'onModuleInit',
              status: 'completed',
              finalMetrics: this.getMetrics(),
            });
          }
        })
        .catch((error) => {
          const e = error as Error;
          this.updateHealthStatusOnError(e.message);
          Log.error(this.logger, 'Projection failed with exception', {
            method: 'onModuleInit',
            error: e.message,
            stack: e.stack,
          });
        });

      this.setRunning(true);
      this.updateHealthStatusOnSuccess();

      Log.info(
        this.logger,
        'AppConfig Projector (In-Memory) started successfully',
        {
          method: 'onModuleInit',
          status: 'running',
          initialMetrics: this.getMetrics(),
        },
      );
    } catch (error) {
      const e = error as Error;
      this.updateHealthStatusOnError(e.message);
      this.metrics.recordError();

      Log.error(
        this.logger,
        'Failed to start AppConfig Projector (In-Memory)',
        {
          method: 'onModuleInit',
          error: e.message,
          stack: e.stack,
        },
      );
      throw error;
    }
  }

  /**
   * Stop the projector using CatchUpRunner shutdown
   */
  onModuleDestroy(): void {
    Log.info(this.logger, 'Stopping AppConfig Projector (In-Memory)', {
      method: 'onModuleDestroy',
      subscriptionGroup: this.subscriptionGroup,
      finalMetrics: this.getMetrics(),
    });

    try {
      this.catchUpRunner.stop(this.subscriptionGroup);
      this.setRunning(false);

      Log.info(
        this.logger,
        'AppConfig Projector (In-Memory) stopped successfully',
        {
          method: 'onModuleDestroy',
          status: 'stopped',
          totalEventsProcessed: this.metrics.getMetrics().totalEvents,
          finalCacheSize: appConfigStore.size(),
        },
      );
    } catch (error) {
      const e = error as Error;
      Log.error(this.logger, 'Error stopping AppConfig Projector (In-Memory)', {
        method: 'onModuleDestroy',
        error: e.message,
        stack: e.stack,
      });
    }
  }

  /**
   * Project individual event using in-memory storage with LRU eviction
   */
  private projectEvent(event: ProjectionEvent): void {
    const start = performance.now();

    // Deduplication check - prevent processing same event multiple times
    const eventId = `${event.streamId}:${event.revision}`;
    const now = Date.now();
    const lastProcessed = this.recentEvents.get(eventId);

    if (lastProcessed && now - lastProcessed < this.dedupWindowMs) {
      Log.debug(this.logger, 'Duplicate event detected, skipping', {
        method: 'projectEvent',
        eventId,
        streamId: event.streamId,
        revision: event.revision,
        timeSinceLastMs: now - lastProcessed,
      });
      return;
    }

    // Clean up old entries periodically (simple cleanup every 100 events)
    if (this.recentEvents.size > 100) {
      const cutoff = now - this.dedupWindowMs;
      for (const [id, timestamp] of this.recentEvents) {
        if (timestamp < cutoff) {
          this.recentEvents.delete(id);
        }
      }
    }

    // Record this event processing
    this.recentEvents.set(eventId, now);

    const tenant = this.extractTenant(event);
    const pos = event.position
      ? `${event.position.commit}:${event.position.prepare}`
      : undefined;

    try {
      const params = this.extractAppConfigParams(event, 'project');
      const key = this.buildProjectionKey(tenant, params.id);

      const projection = this.applyEventToMemory(event, params);

      // Store in shared appConfig store
      appConfigStore.set(tenant, params.id.toString(), projection);

      // Shadow mode: compare with expected projection
      if (this.shadowMode && this.shadowCallback) {
        this.shadowCallback(key, projection, undefined, undefined);
      }

      const latencyMs = performance.now() - start;
      this.metrics.recordEvent(latencyMs);

      // Update metrics after all write operations complete
      this.updateMetrics();

      Log.debug(this.logger, 'Event projected to in-memory', {
        method: 'projectEvent',
        eventType: event.type,
        streamId: event.streamId,
        revision: event.revision,
        tenant,
        id: params.id,
        version: projection.version,
        latencyMs,
        cacheSize: appConfigStore.size(),
        outcome: 'applied',
      });

      this.updateHealthStatusOnSuccess(pos);
    } catch (err) {
      const e = err as Error;
      this.updateHealthStatusOnError(e.message);
      this.metrics.recordError();
      Log.error(this.logger, 'Failed to project in-memory', {
        method: 'projectEvent',
        eventType: event.type,
        streamId: event.streamId,
        revision: event.revision,
        tenant,
        error: e.message,
        stack: e.stack,
        latencyMs: performance.now() - start,
      });
      throw new Error(
        withContext(AppConfigProjectorErrors.DATABASE_OPERATION_FAILED, {
          eventType: event.type,
          streamId: event.streamId,
          originalError: e.message,
        }).detail,
        { cause: e },
      );
    }
  }

  /**
   * Apply event to in-memory projection
   */
  private applyEventToMemory(
    event: ProjectionEvent,
    params: ExtractedAppConfigParams,
  ): InMemoryAppConfigProjection {
    // Prefer event timestamp when available, fallback to clock
    const hasTimestamp = (e: unknown): e is { timestamp: string | number } => {
      return typeof e === 'object' && e !== null && 'timestamp' in e;
    };
    const eventTs =
      hasTimestamp(event) && event.timestamp
        ? new Date(event.timestamp)
        : this.clock.now();
    const existing = appConfigStore.get(params.tenantId, params.id.toString());

    // Stale/duplicate guard
    const incomingVersion = params.version ?? event.revision;
    if (existing && incomingVersion <= existing.version) {
      // Still advance health + metrics; do not mutate state
      this.metrics.recordEvent(0); // Tiny synthetic latency
      Log.debug(this.logger, 'Stale/duplicate event ignored', {
        method: 'applyEventToMemory',
        streamId: event.streamId,
        revision: event.revision,
        current: existing.version,
        incoming: incomingVersion,
      });
      // Convert to extended projection for return
      return {
        ...existing,
        projectionTimestamp: new Date(),
        eventCount: 1,
        lastEventType: 'stale-ignored',
      };
    }

    switch (event.type) {
      case 'NotificationSlackConfigAppConfigCreated.v1':
        return this.handleAppConfigCreated(params, event, eventTs);
      case 'NotificationSlackConfigAppConfigUpdated.v1':
        return this.handleAppConfigUpdated(params, event, eventTs);
      case 'NotificationSlackConfigAppConfigDeleted.v1':
        return this.handleAppConfigDeleted(params, event, eventTs);
      default:
        Log.warn(this.logger, 'Unknown event type in in-memory projection', {
          method: 'applyEventToMemory',
          eventType: event.type,
          streamId: event.streamId,
        });
        // Return current projection or create minimal one
        return this.createMinimalProjection(params, event, eventTs);
    }
  }

  /**
   * Handle AppConfigCreated event
   */
  private handleAppConfigCreated(
    params: ExtractedAppConfigParams,
    event: ProjectionEvent,
    timestamp: Date,
  ): InMemoryAppConfigProjection {
    return {
      ...params,
      version: params.version || event.revision,
      createdAt: timestamp,
      updatedAt: timestamp,
      deletedAt: null,
      lastStreamRevision: event.revision.toString(),
      projectionTimestamp: timestamp,
      eventCount: 1,
      lastEventType: event.type,
    };
  }

  /**
   * Handle AppConfigUpdated event
   */
  private handleAppConfigUpdated(
    params: ExtractedAppConfigParams,
    event: ProjectionEvent,
    timestamp: Date,
  ): InMemoryAppConfigProjection {
    const existing = appConfigStore.get(params.tenantId, params.id.toString());

    return {
      ...params,
      version: params.version || event.revision,
      createdAt: existing?.createdAt || timestamp,
      updatedAt: timestamp,
      deletedAt: null,
      lastStreamRevision: event.revision.toString(),
      projectionTimestamp: timestamp,
      eventCount: 1, // Simplified for now
      lastEventType: event.type,
    };
  }

  /**
   * Handle AppConfigDeleted event
   */
  private handleAppConfigDeleted(
    params: ExtractedAppConfigParams,
    event: ProjectionEvent,
    timestamp: Date,
  ): InMemoryAppConfigProjection {
    const existing = appConfigStore.get(params.tenantId, params.id.toString());

    return {
      ...params,
      version: params.version || event.revision,
      createdAt: existing?.createdAt || timestamp,
      updatedAt: timestamp,
      deletedAt: timestamp,
      lastStreamRevision: event.revision.toString(),
      projectionTimestamp: timestamp,
      eventCount: 1, // Simplified for now
      lastEventType: event.type,
    };
  }

  /**
   * Create minimal projection for unknown events
   */
  private createMinimalProjection(
    params: ExtractedAppConfigParams,
    event: ProjectionEvent,
    timestamp: Date,
  ): InMemoryAppConfigProjection {
    return {
      ...params,
      version: params.version || event.revision,
      createdAt: timestamp,
      updatedAt: timestamp,
      deletedAt: null,
      lastStreamRevision: event.revision.toString(),
      projectionTimestamp: timestamp,
      eventCount: 1,
      lastEventType: event.type,
    };
  }

  /**
   * Build projection key for tenant isolation
   */
  private buildProjectionKey(tenantId: string, id: number): string {
    return `${tenantId}:app-config:${id.toString()}`;
  }

  /**
   * Extract tenant ID from event using shared utility
   */
  private extractTenant(event: ProjectionEvent): string {
    return TenantExtractor.extractTenant(event);
  }

  /**
   * Extract appConfig parameters from event data using AppConfigFieldValidatorUtil
   *
   * Uses AppConfigFieldValidatorUtil to create validated DetailAppConfigResponse for consistent
   * validation across repository and projector, and TenantExtractor for reliable tenant identification.
   */
  private extractAppConfigParams(
    event: ProjectionEvent,
    operation: string,
  ): ExtractedAppConfigParams {
    try {
      const eventData = event.data as Record<string, any>;

      // Extract tenant using shared utility
      const tenantId = TenantExtractor.extractTenant(event);

      // Use AppConfigFieldValidatorUtil to create validated initiation fee snapshot
      const appConfigSnapshot =
        AppConfigFieldValidatorUtil.createAppConfigSnapshotFromEventData(
          eventData,
        );

      // Add projector-specific fields for in-memory storage
      return {
        ...appConfigSnapshot,
        tenantId,
      };
    } catch (error) {
      const e = error as Error;
      throw new Error(
        withContext(AppConfigProjectorErrors.INVALID_EVENT_DATA, {
          eventType: event.type,
          streamId: event.streamId,
          operation,
          originalError: e.message,
        }).detail,
      );
    }
  }

  /**
   * Update metrics with current state
   */
  private updateMetrics(): void {
    this.metrics.updateEntityCount(appConfigStore.size());
    this.metrics.updateMemoryUsage(this.estimateMemoryUsage());
  }

  /**
   * Estimate memory usage (rough approximation)
   */
  private estimateMemoryUsage(): number {
    // Rough estimate: 1KB per projection + overhead
    return appConfigStore.size() * 1024;
  }
}
