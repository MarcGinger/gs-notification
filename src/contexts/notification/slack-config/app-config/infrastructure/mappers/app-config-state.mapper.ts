// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * AppConfig State Infrastructure Mappers
 *
 * Bidirectional mapping between pure VO domain state and primitive persistence snapshot.
 * Handles conversion between rich domain objects and raw database data.
 */

import {
  AppConfigCreatedAt,
  AppConfigUpdatedAt,
  AppConfigVersion,
  AppConfigWorkspaceCode,
  AppConfigMaxRetryAttempts,
  AppConfigRetryBackoffSeconds,
  AppConfigDefaultLocale,
  AppConfigLoggingEnabled,
  AppConfigAuditChannelId,
  AppConfigMetadata,
} from '../../domain/value-objects';
import { Result, ok, err, DomainError } from 'src/shared/errors';
import { AppConfigDomainState } from '../../domain/state/app-config.state';
import { AppConfigSnapshotProps } from '../../domain/props';

/**
 * Infrastructure State Mapper
 *
 * Handles conversion between domain VOs and persistence primitives.
 * This is where primitive obsession is eliminated - converting between
 * rich domain objects and raw database data.
 */
export class AppConfigStateMapper {
  /**
   * Convert primitive persistence snapshot to rich domain state
   *
   * @param snapshot - Raw database/persistence data
   * @returns Rich domain state with VOs or error
   */
  static toDomain(
    snapshot: AppConfigSnapshotProps,
  ): Result<AppConfigDomainState, DomainError> {
    const errors: Array<{ field: string; error: DomainError }> = [];

    // Helper function to validate and collect errors
    const validateField = <T>(
      fieldName: string,
      result: Result<T, DomainError>,
    ): T | null => {
      if (!result.ok) {
        errors.push({ field: fieldName, error: result.error });
        return null;
      }
      return result.value;
    };

    // Convert each primitive to its corresponding VO with error collection
    const workspaceCode = validateField(
      'workspaceCode',
      AppConfigWorkspaceCode.from(snapshot.workspaceCode),
    );
    const maxRetryAttempts = validateField(
      'maxRetryAttempts',
      AppConfigMaxRetryAttempts.from(snapshot.maxRetryAttempts),
    );
    const retryBackoffSeconds = validateField(
      'retryBackoffSeconds',
      AppConfigRetryBackoffSeconds.from(snapshot.retryBackoffSeconds),
    );
    const defaultLocale = validateField(
      'defaultLocale',
      AppConfigDefaultLocale.from(snapshot.defaultLocale),
    );
    const loggingEnabled = validateField(
      'loggingEnabled',
      AppConfigLoggingEnabled.from(snapshot.loggingEnabled),
    );
    const auditChannelId = snapshot.auditChannelId
      ? validateField(
          'auditChannelId',
          AppConfigAuditChannelId.from(snapshot.auditChannelId),
        )
      : undefined;
    const metadata = snapshot.metadata
      ? validateField('metadata', AppConfigMetadata.from(snapshot.metadata))
      : undefined;
    const version = validateField(
      'version',
      AppConfigVersion.from(snapshot.version),
    );
    const createdAt = validateField(
      'createdAt',
      AppConfigCreatedAt.from(snapshot.createdAt),
    );
    const updatedAt = validateField(
      'updatedAt',
      AppConfigUpdatedAt.from(snapshot.updatedAt),
    );

    // If any validations failed, return aggregated error
    if (errors.length > 0) {
      return err({
        code: 'APP_CONFIG.MAPPER_VALIDATION_FAILED',
        title: 'Domain State Mapping Failed',
        detail: `Failed to create domain state from persistence snapshot. ${errors.length} validation error(s) occurred.`,
        category: 'infrastructure',
        retryable: false,
        context: {
          validationErrors: errors.map((e) => ({
            field: e.field,
            errorCode: e.error.code,
            errorMessage: e.error.detail,
          })),
          snapshotCode: snapshot.workspaceCode,
        },
      });
    }

    // All validations passed, construct the rich domain state
    const domainState: AppConfigDomainState = {
      workspaceCode: workspaceCode!,
      maxRetryAttempts: maxRetryAttempts!,
      retryBackoffSeconds: retryBackoffSeconds!,
      defaultLocale: defaultLocale!,
      loggingEnabled: loggingEnabled!,
      auditChannelId: auditChannelId || undefined,
      metadata: metadata || undefined,
      version: version!,
      createdAt: createdAt!,
      updatedAt: updatedAt!,
    };

    return ok(domainState);
  }

  /**
   * Convert rich domain state to primitive persistence snapshot
   *
   * @param domainState - Rich domain state with VOs
   * @returns Raw persistence data for database storage
   */
  static toSnapshot(domainState: AppConfigDomainState): AppConfigSnapshotProps {
    return {
      // Extract primitive values from VOs
      workspaceCode: domainState.workspaceCode.value,
      maxRetryAttempts: domainState.maxRetryAttempts.value,
      retryBackoffSeconds: domainState.retryBackoffSeconds.value,
      defaultLocale: domainState.defaultLocale.value,
      loggingEnabled: domainState.loggingEnabled.value,
      auditChannelId: domainState.auditChannelId?.value,
      metadata: domainState.metadata?.value,
      version: domainState.version.value,
      createdAt: domainState.createdAt.value,
      updatedAt: domainState.updatedAt.value,
    };
  }
}
