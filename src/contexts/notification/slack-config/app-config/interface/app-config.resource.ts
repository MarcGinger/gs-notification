// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * AppConfig Resource Decorators - Domain-Driven Authorization
 *
 * Clean integration with domain-driven permissions infrastructure.
 * All business rules and risk assessments come from the domain layer.
 *
 * ARCHITECTURAL PRINCIPLE: No business logic duplication
 * ✅ Risk levels: AppConfigPermissionHelpers.getRiskLevel()
 * ✅ Justification rules: AppConfigPermissionHelpers.requiresJustification()
 * ✅ Categories: AppConfigPermissionRegistry[permission].category
 * ✅ Policy paths: AppConfigPermissionHelpers.getPolicyPath()
 * ✅ Audit requirements: AppConfigPermissionRegistry[permission].auditRequired
 *
 * This keeps the HTTP layer thin and ensures business rules
 * live in the domain where they belong.
 */

import { Resource } from 'src/shared/security/opa';
import { Request } from 'express';
import {
  AppConfigPermission,
  AppConfigPermissionHelpers,
  AppConfigPermissionRegistry,
} from '../domain/permissions';

/**
 * Domain-driven AppConfig resource decorator
 *
 * All business rules come from the domain layer - no duplication!
 */
export const AppConfigResource = (permission: AppConfigPermission) =>
  Resource({
    type: 'app-config',
    action: permission,
    extractId: (req: Request) => req.params?.id || req.params?.id,
    extractAttributes: (req: Request) => {
      const body = req.body as Record<string, unknown> | undefined;
      const query = req.query as Record<string, unknown> | undefined;

      // Business data extraction
      const workspaceId = body?.workspaceId || query?.workspaceId;
      const maxRetryAttempts =
        body?.maxRetryAttempts || query?.maxRetryAttempts;
      const retryBackoffSeconds =
        body?.retryBackoffSeconds || query?.retryBackoffSeconds;
      const defaultLocale = body?.defaultLocale || query?.defaultLocale;
      const loggingEnabled = body?.loggingEnabled || query?.loggingEnabled;
      const auditChannelId = body?.auditChannelId || query?.auditChannelId;

      const baseAttributes = {
        workspaceId,
        maxRetryAttempts,
        retryBackoffSeconds,
        defaultLocale,
        loggingEnabled,
        auditChannelId,
      };

      // Domain-driven permission context (no hardcoded business rules!)
      const permissionMeta = AppConfigPermissionRegistry[permission];
      const permissionContext = {
        permission,
        riskLevel: AppConfigPermissionHelpers.getRiskLevel(permission),
        requiresJustification:
          AppConfigPermissionHelpers.requiresJustification(permission),
        category: permissionMeta?.category as string,
        policyPath: AppConfigPermissionHelpers.getPolicyPath(permission),
        auditRequired: AppConfigPermissionHelpers.requiresAudit(permission),
      };

      return {
        ...baseAttributes,
        _permissionContext: permissionContext,
      };
    },
  });

/**
 * Specialized decorators for high-risk operations
 */
export const AppConfigDeleteResource = () =>
  AppConfigResource(AppConfigPermission.DOMAIN_APP_CONFIG_DELETE);

export const AppConfigCreateResource = () =>
  AppConfigResource(AppConfigPermission.DOMAIN_APP_CONFIG_CREATE);

export const AppConfigUpdateResource = () =>
  AppConfigResource(AppConfigPermission.DOMAIN_APP_CONFIG_UPDATE);

export const AppConfigReadResource = () =>
  AppConfigResource(AppConfigPermission.DOMAIN_APP_CONFIG_READ);
