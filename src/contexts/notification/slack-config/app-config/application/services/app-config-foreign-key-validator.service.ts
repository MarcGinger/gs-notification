// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Injectable, Inject } from '@nestjs/common';
import { Result, ok, err, DomainError, withContext } from 'src/shared/errors';
import { Log, Logger } from 'src/shared/logging';
import { ActorContext } from 'src/shared/application/context';
import { Option } from 'src/shared/domain/types';
import { AppConfigErrors } from '../../domain/errors';
import { SlackConfigServiceConstants } from '../../../service-constants';
import {
  WORKSPACE_REFERENCE_READER_TOKEN,
  WorkspaceReference,
  IWorkspaceReader,
} from '../ports';

export interface ForeignKeyValidationContext {
  correlationId?: string;
  userId?: string;
  operation: string;
  component: string;
}

/**
 * AppConfig Foreign Key Validation Service
 *
 * Provides centralized validation for foreign key references used in AppConfig domain.
 * This service validates that referenced entities exist before AppConfig creation or updates.
 *
 * Benefits:
 * - Single responsibility for foreign key validation
 * - Reusable across create and update use cases
 * - Consistent error handling and logging
 * - Fail-fast validation to avoid expensive operations
 */
@Injectable()
export class AppConfigForeignKeyValidatorService {
  constructor(
    @Inject(WORKSPACE_REFERENCE_READER_TOKEN)
    private readonly workspaceReader: IWorkspaceReader,
  ) {}
  /**
   * Validates workspaceCode existence
   * @param actor - User context for authorization
   * @param workspaceCode - Workspace code to validate
   * @param context - Validation context for logging and error handling
   * @param logger - Logger instance for structured logging
   * @returns Result indicating validation success or failure
   */
  async validateWorkspaceCode(
    actor: ActorContext,
    workspaceCode: string | undefined,
    context: ForeignKeyValidationContext,
    logger: Logger,
  ): Promise<Result<WorkspaceReference | undefined, DomainError>> {
    if (!workspaceCode) {
      return ok(undefined);
    }
    Log.debug(logger, 'Validating workspaceCode foreign key', {
      application: SlackConfigServiceConstants.SERVICE_NAME,
      component: context.component,
      method: 'validateWorkspaceCode',
      correlationId: context.correlationId,
      userId: context.userId,
      workspaceCode,
      operation: context.operation,
    });

    const workspaceCodeResult = await this.workspaceReader.findWorkspaceByCode(
      actor,
      workspaceCode,
    );

    if (!workspaceCodeResult.ok) {
      Log.error(logger, 'Workspace lookup failed during validation', {
        application: SlackConfigServiceConstants.SERVICE_NAME,
        component: context.component,
        method: 'validateWorkspaceCode',
        correlationId: context.correlationId,
        userId: context.userId,
        workspaceCode,
        operation: context.operation,
        error: workspaceCodeResult.error,
      });
      return err(workspaceCodeResult.error);
    }

    const workspace = workspaceCodeResult.value;

    if (Option.isNone(workspace)) {
      Log.warn(logger, 'Workspace not found during validation', {
        application: SlackConfigServiceConstants.SERVICE_NAME,
        component: context.component,
        method: 'validateWorkspaceCode',
        correlationId: context.correlationId,
        userId: context.userId,
        workspaceCode,
        operation: context.operation,
      });
      return err(
        withContext(AppConfigErrors.INVALID_WORKSPACE_CODE, {
          correlationId: context.correlationId,
          userId: context.userId,
          operation: context.operation,
          workspaceCode,
          reason: 'Workspace code does not exist in the system',
        }),
      );
    }

    Log.debug(logger, 'Workspace existence validation passed', {
      application: SlackConfigServiceConstants.SERVICE_NAME,
      component: context.component,
      method: 'validateWorkspaceCode',
      correlationId: context.correlationId,
      userId: context.userId,
      workspaceCode,
      operation: context.operation,
    });

    return ok(workspace.value);
  }

  /**
   * Validates all foreign keys for appConfig props
   * @param actor - User context for authorization
   * @param props - AppConfig properties containing foreign key fields
   * @param context - Validation context for logging and error handling
   * @param logger - Logger instance for structured logging
   * @returns Result indicating validation success or failure
   */
  async validateAppConfigForeignKeys(
    actor: ActorContext,
    props: {
      workspaceCode?: string;
    },
    context: ForeignKeyValidationContext,
    logger: Logger,
  ): Promise<
    Result<
      {
        workspaceCode?: WorkspaceReference;
      },
      DomainError
    >
  > {
    // Validate workspaceCode if provided
    const workspaceCodeValidation = await this.validateWorkspaceCode(
      actor,
      props.workspaceCode,
      context,
      logger,
    );
    if (!workspaceCodeValidation.ok) {
      return workspaceCodeValidation;
    }

    return ok({
      workspaceCode: workspaceCodeValidation.value,
    });
  }

  /**
   * Generic alias for validateAppConfigForeignKeys to match shared runner interface
   * @param actor - Actor context for permissions and auditing
   * @param props - Props containing foreign key fields to validate
   * @param context - Validation context for logging and error handling
   * @param logger - Logger instance for structured logging
   * @returns Result indicating validation success or failure
   */
  async validateForeignKeys(
    actor: ActorContext,
    props: {
      workspaceCode?: string;
    },
    context: ForeignKeyValidationContext,
    logger: Logger,
  ): Promise<
    Result<
      {
        workspaceCode?: WorkspaceReference;
      },
      DomainError
    >
  > {
    return this.validateAppConfigForeignKeys(actor, props, context, logger);
  }
}
