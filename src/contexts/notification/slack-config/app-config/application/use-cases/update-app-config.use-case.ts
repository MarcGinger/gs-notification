// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

// Framework imports
import { Injectable, Inject } from '@nestjs/common';
import { Result, DomainError, ok, err, withContext } from 'src/shared/errors';
import { ActorContext } from 'src/shared/application/context';

// Shared utilities and infrastructure
import { APP_LOGGER, componentLogger, Logger } from 'src/shared/logging';
import { Clock, CLOCK } from 'src/shared/infrastructure/time';
import { Option } from 'src/shared/domain/types';
import { runUseCaseWithSecurity } from 'src/shared/application/utils';
import { extractDefinedFields } from 'src/shared/utilities';
import {
  UseCaseLoggingUtil,
  UseCaseLoggingConfig,
} from 'src/shared/application/utils/use-case-logging.util';
import { IUserToken } from 'src/shared/security';

// Service configuration
import { SlackConfigServiceConstants } from '../../../service-constants';

// Domain types and errors
import { AppConfigAggregate } from '../../domain/aggregates';
import { AppConfigId } from '../../domain/value-objects';
import { updateAppConfigAggregateFromSnapshot } from '../../domain/factories';
import { AppConfigErrors } from '../../domain/errors';
import { UpdateAppConfigProps } from '../../domain/props';

// Application layer
import { UpdateAppConfigCommand } from '../commands';
import {
  IAppConfigReader,
  IAppConfigWriter,
  APP_CONFIG_READER_TOKEN,
  APP_CONFIG_WRITER_TOKEN,
} from '../ports';
import {
  AppConfigForeignKeyValidatorService,
  AppConfigAuthorizationAdapter,
} from '../services';
import { DetailAppConfigResponse } from '../dtos';
import { AppConfigDtoAssembler } from '../assemblers';
import { IUpdateAppConfigUseCase } from './contracts';
// Shared compliance services
import {
  PIIClassificationService,
  PIIProtectionService,
  DataRetentionService,
} from 'src/shared/services/compliance';
type AppConfigSnapshot = Parameters<
  typeof updateAppConfigAggregateFromSnapshot
>[0];

@Injectable()
export class UpdateAppConfigUseCase implements IUpdateAppConfigUseCase {
  private readonly logger: Logger;
  private readonly loggingConfig: UseCaseLoggingConfig;

  constructor(
    @Inject(APP_CONFIG_READER_TOKEN)
    private readonly appConfigReader: IAppConfigReader,
    @Inject(APP_CONFIG_WRITER_TOKEN)
    private readonly appConfigWriter: IAppConfigWriter,
    private readonly foreignKeyValidator: AppConfigForeignKeyValidatorService,
    private readonly authorizationService: AppConfigAuthorizationAdapter,
    @Inject(APP_LOGGER)
    readonly moduleLogger: Logger,
    @Inject(CLOCK)
    private readonly clock: Clock,
    private readonly piiClassificationService: PIIClassificationService,
    private readonly piiProtectionService: PIIProtectionService,
    private readonly dataRetentionService: DataRetentionService,
  ) {
    this.loggingConfig = {
      serviceName: SlackConfigServiceConstants.SERVICE_NAME,
      component: 'UpdateAppConfigUseCase',
      domain: 'slack-config',
      entityType: 'app-config',
    };
    this.logger = componentLogger(moduleLogger, this.loggingConfig.component);
  }
  async execute(params: {
    user: IUserToken;
    id: number;
    props: UpdateAppConfigProps;
    correlationId: string;
    authorizationReason: string;
  }): Promise<Result<DetailAppConfigResponse, DomainError>> {
    const operation = 'update_app_config';
    const startTime = this.clock.nowMs();

    // Create a command-like object for internal use
    const command = {
      user: params.user,
      id: params.id,
      props: params.props,
      correlationId: params.correlationId,
      authorizationReason: params.authorizationReason,
      securityContext: {
        tenantId: params.user.tenant,
        userId: params.user.sub,
        roles: params.user.roles,
      },
      timestamp: this.clock.now(),
    };

    // Step 1: Validate command (before creating any log context to avoid PII logging)
    const validation = UseCaseLoggingUtil.validateCommand(
      this.logger,
      command,
      {}, // Empty context to avoid PII logging during validation
    );
    if (!validation.ok) {
      return err(validation.error);
    }

    // Step 2: Check PII compliance for input data with domain context
    const classification = this.piiClassificationService.classifyData(
      {},
      {
        domain: 'slack-config',
        tenantId: command.user.tenant,
        // entityType: 'AppConfig' // Future: for entity-level rules
      },
    );

    // Step 3: Create safe log context (no raw command that might contain PII)
    const safeLogContext = UseCaseLoggingUtil.createLogContext(
      this.loggingConfig,
      this.clock,
      operation,
      {
        correlationId: command.correlationId,
        user: command.user,
        securityContext: command.securityContext,
        timestamp: command.timestamp,
      },
      {
        appConfigId: command.id,
        operationRisk: UseCaseLoggingUtil.assessOperationRisk(operation),
      },
    );

    // Log compliance check with detailed audit trail
    UseCaseLoggingUtil.logComplianceCheck(
      this.logger,
      operation,
      safeLogContext,
      classification,
    );

    // Step 4: Mask payload for logging if PII detected (no domain mutation)
    const rawProps = command.props; // Keep original for domain processing

    if (classification.containsPII) {
      const maskedForLog = this.piiProtectionService.maskForLog(
        rawProps as unknown as Record<string, unknown>,
        classification,
      );
      this.logger.debug(
        { ...safeLogContext, payload: maskedForLog },
        'masked input for audit',
      );
    }

    // Step 5: Robust audit generation with error handling
    if (classification.containsPII) {
      try {
        this.piiProtectionService.generateProtectionAudit(
          [], // No protection log since we're not mutating domain data
          {
            userId: command.user.sub,
            tenantId: command.user.tenant,
            operation: 'update_app_config',
            domain: 'slack-config',
            entityType: 'app_config',
          },
        );
      } catch (e) {
        this.logger.warn(
          { err: e as Error, ...safeLogContext },
          'protection audit failed (non-fatal)',
        );
      }
    }

    // Extract fields for field-level authorization using shared utility
    const fieldsToUpdate = extractDefinedFields(rawProps || {});

    // Step 3: Update aggregate with protected data
    const aggregateResult = await runUseCaseWithSecurity<
      UpdateAppConfigCommand,
      AppConfigAggregate,
      AppConfigSnapshot
      // { AppConfigs?: AppConfigReference[] }
    >({
      serviceName: SlackConfigServiceConstants.SERVICE_NAME,
      component: 'UpdateAppConfigUseCase',
      operation: 'update_app_config',
      source: 'slack-config.application.update-app-config',
      command,
      logger: this.logger,
      clock: this.clock,
      repo: {
        save: async (
          actor: ActorContext,
          appConfig: AppConfigAggregate,
          expectedVersion?: number,
        ) => {
          const result = await this.appConfigWriter.save(
            actor,
            appConfig,
            expectedVersion,
          );
          return result.ok ? ok(undefined) : result;
        },
      },
      fkValidator: this.foreignKeyValidator,
      propsMissingError: AppConfigErrors.INVALID_APP_CONFIG_DATA,

      // Security configuration
      authorizationService: this.authorizationService,
      authorization: {
        type: 'update',
        operation: 'update',
        resourceId: String(command.id), // Convert numeric ID to string
        fields: fieldsToUpdate.map(String),
      },
      authContext: {
        userId: command.user.sub,
        tenantId: command.user.tenant,
        roles: command.user.roles,
        operationType: 'update',
      },

      // Load existing snapshot or return APP_CONFIG_NOT_FOUND with context
      loadExisting: async (actor, cmd) => {
        const codeR = AppConfigId.from(cmd.id);
        if (!codeR.ok) return err(codeR.error);

        const foundR = await this.appConfigReader.findById(actor, codeR.value);
        if (!foundR.ok) {
          return err(
            withContext(AppConfigErrors.APP_CONFIG_NOT_FOUND, {
              correlationId: cmd.correlationId,
              userId: cmd.user.sub,
              operation: 'update_app_config',
              id: cmd.id,
            }),
          );
        }

        if (Option.isNone(foundR.value)) {
          return err(
            withContext(AppConfigErrors.APP_CONFIG_NOT_FOUND, {
              correlationId: cmd.correlationId,
              userId: cmd.user.sub,
              operation: 'update_app_config',
              id: cmd.id,
            }),
          );
        }

        return ok(foundR.value.value); // snapshot
      },

      // Merge + validate via domain factory using protected props
      runDomain: ({ existing, metadata, clock }) => {
        // Use classification for metadata only, not to mutate props
        const enhancedMetadata = {
          ...metadata,
          dataClassification: classification.containsPII
            ? ('confidential' as const)
            : ('internal' as const),
          encryptionRequired:
            classification.containsPII && classification.requiresEncryption,
          // Include compact audit summary (no raw values)
          dataClassificationSummary: {
            categories: classification.piiCategories,
            confidentiality: classification.confidentialityLevel,
            risk: classification.riskScore ?? undefined,
          },
        };

        return updateAppConfigAggregateFromSnapshot(
          existing!,
          rawProps || {},
          enhancedMetadata,
          clock,
        );
      },
    });

    // Step 4: Transform aggregate to DTO for API response
    if (!aggregateResult.ok) {
      UseCaseLoggingUtil.logOperationError(
        this.logger,
        operation,
        safeLogContext,
        aggregateResult.error,
        'HIGH',
      );
      return aggregateResult;
    }

    const aggregate = aggregateResult.value;

    // Step 6: Generate retention metadata now that entityId is known
    if (classification.containsPII) {
      try {
        const retention =
          await this.dataRetentionService.generateRetentionMetadata(
            classification,
            {
              tenantId: command.user.tenant,
              userId: command.user.sub,
              entityType: 'app_config',
              entityId: aggregate.id.toString(), // Now we have the actual ID
              domain: 'slack-config',
            },
          );

        // Log comprehensive compliance protection details
        UseCaseLoggingUtil.logComplianceProtection(
          this.logger,
          operation,
          safeLogContext,
          {
            fieldsProtected: 0, // No fields mutated at domain level
            strategiesUsed: ['classification-only'],
            auditGenerated: true,
            retentionApplied: true,
            retentionExpiry: new Date(retention.retentionExpiry),
            legalBasis: retention.legalBasis,
            automaticDeletion: retention.automaticDeletion,
            auditRecord: retention.auditRecord.tenantId,
          },
        );
      } catch (e) {
        this.logger.warn(
          { err: e as Error, ...safeLogContext },
          'retention metadata generation failed (non-fatal)',
        );
      }
    }

    // Step 7: Get domain state directly from aggregate (clean architecture)
    const domainState = aggregate.toDomainState();
    const dto = AppConfigDtoAssembler.toDetailResponse(domainState);

    // Log operation success with comprehensive metrics
    const executionTime = this.clock.nowMs() - startTime;
    UseCaseLoggingUtil.logOperationSuccess(
      this.logger,
      operation,
      safeLogContext,
      {
        executionTimeMs: executionTime,
        aggregateVersion: aggregate.version,
        eventCount: aggregate.uncommittedEvents?.length ?? 0,
        businessData: {
          appConfigCode: dto.id,
          complianceApplied: classification.containsPII,
          fieldsUpdated: Object.keys(fieldsToUpdate).length,
        },
      },
    );

    return ok(dto);
  }
}
