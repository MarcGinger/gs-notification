// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { DomainError, Result, err, withContext, ok } from 'src/shared/errors';
import { Clock } from 'src/shared/domain/clock';
import { EventMetadata } from 'src/shared/domain/events';
import { AppConfigAggregate } from '../aggregates';
import { CreateAppConfigProps } from '../props';
import { AppConfigDomainState } from '../state';
import {
  AppConfigCreatedAt,
  AppConfigUpdatedAt,
  AppConfigVersion,
  AppConfigWorkspaceCode,
  AppConfigMaxRetryAttempts,
  AppConfigRetryBackoffSeconds,
  AppConfigDefaultLocale,
  AppConfigLoggingEnabled,
  AppConfigAuditChannelId,
  AppConfigMetadata,
} from '../value-objects';

/**
 * Enhanced appConfig entity factory with comprehensive validation and security context
 * Moved from application layer to properly separate business concerns
 */
export function createAppConfigAggregateFromProps(
  props: CreateAppConfigProps,
  metadata: EventMetadata,
  clock: Clock,
  // validatedEntities?: {
  //  channels?: ChannelReference[];
  // },
): Result<AppConfigAggregate, DomainError> {
  // Validate each property by creating value objects
  const workspaceCodeResult = AppConfigWorkspaceCode.from(props.workspaceCode);
  if (!workspaceCodeResult.ok) {
    return err(
      withContext(workspaceCodeResult.error, {
        ...workspaceCodeResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_app_config',
        workspaceCode: props.workspaceCode,
      }),
    );
  }

  const maxRetryAttemptsResult = AppConfigMaxRetryAttempts.from(
    props.maxRetryAttempts,
  );
  if (!maxRetryAttemptsResult.ok) {
    return err(
      withContext(maxRetryAttemptsResult.error, {
        ...maxRetryAttemptsResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_app_config',
        maxRetryAttempts: props.maxRetryAttempts,
      }),
    );
  }

  const retryBackoffSecondsResult = AppConfigRetryBackoffSeconds.from(
    props.retryBackoffSeconds,
  );
  if (!retryBackoffSecondsResult.ok) {
    return err(
      withContext(retryBackoffSecondsResult.error, {
        ...retryBackoffSecondsResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_app_config',
        retryBackoffSeconds: props.retryBackoffSeconds,
      }),
    );
  }

  const defaultLocaleResult = AppConfigDefaultLocale.from(props.defaultLocale);
  if (!defaultLocaleResult.ok) {
    return err(
      withContext(defaultLocaleResult.error, {
        ...defaultLocaleResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_app_config',
        defaultLocale: props.defaultLocale,
      }),
    );
  }

  const loggingEnabledResult = AppConfigLoggingEnabled.from(
    props.loggingEnabled,
  );
  if (!loggingEnabledResult.ok) {
    return err(
      withContext(loggingEnabledResult.error, {
        ...loggingEnabledResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_app_config',
        loggingEnabled: props.loggingEnabled,
      }),
    );
  }

  const auditChannelIdResult = AppConfigAuditChannelId.from(
    props.auditChannelId,
  );
  if (!auditChannelIdResult.ok) {
    return err(
      withContext(auditChannelIdResult.error, {
        ...auditChannelIdResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_app_config',
        auditChannelId: props.auditChannelId,
      }),
    );
  }

  const metadataResult = AppConfigMetadata.from(props.metadata);
  if (!metadataResult.ok) {
    return err(
      withContext(metadataResult.error, {
        ...metadataResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_app_config',
        metadata: props.metadata,
      }),
    );
  }

  const createdAtResult = AppConfigCreatedAt.create(clock.now());
  if (!createdAtResult.ok) {
    return err(createdAtResult.error);
  }

  const updatedAtResult = AppConfigUpdatedAt.create(clock.now());
  if (!updatedAtResult.ok) {
    return err(updatedAtResult.error);
  }

  const versionResult = AppConfigVersion.create(1); // Initial version is 1
  if (!versionResult.ok) {
    return err(versionResult.error);
  }

  // Create the entity properties with validated value objects
  const entityProps: AppConfigDomainState = {
    workspaceCode: workspaceCodeResult.value,
    maxRetryAttempts: maxRetryAttemptsResult.value,
    retryBackoffSeconds: retryBackoffSecondsResult.value,
    defaultLocale: defaultLocaleResult.value,
    loggingEnabled: loggingEnabledResult.value,
    auditChannelId: auditChannelIdResult.value,
    metadata: metadataResult.value,
    createdAt: createdAtResult.value,
    updatedAt: updatedAtResult.value,
    version: versionResult.value,
  };

  // Create the entity using the constructor
  return AppConfigAggregate.create(entityProps, clock, metadata);
}
