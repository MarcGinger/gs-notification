// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import {
  PermissionRiskLevel,
  PermissionTenantScope,
  PermissionOperationType,
  BasePermissionMeta,
} from 'src/shared/domain/permissions';
import {
  createPermissionRegistry,
  createRoleHierarchy,
  assertRegistryComplete,
} from 'src/shared/domain/permissions/utils';
import { createDomainPermissionHelpers } from 'src/shared/domain/permissions/domain-permission-helpers.factory';

export enum AppConfigPermission {
  DOMAIN_APP_CONFIG_CREATE = 'DOMAIN_APP_CONFIG_CREATE',
  DOMAIN_APP_CONFIG_READ = 'DOMAIN_APP_CONFIG_READ',
  DOMAIN_APP_CONFIG_UPDATE = 'DOMAIN_APP_CONFIG_UPDATE',
  DOMAIN_APP_CONFIG_DELETE = 'DOMAIN_APP_CONFIG_DELETE',
  DOMAIN_APP_CONFIG_ADMIN = 'DOMAIN_APP_CONFIG_ADMIN',
  DOMAIN_APP_CONFIG_BULK_IMPORT = 'DOMAIN_APP_CONFIG_BULK_IMPORT',
  DOMAIN_APP_CONFIG_BULK_EXPORT = 'DOMAIN_APP_CONFIG_BULK_EXPORT',
  DOMAIN_APP_CONFIG_AUDIT_LOG = 'DOMAIN_APP_CONFIG_AUDIT_LOG',
}

// Permission registry using shared utilities
export const AppConfigPermissionRegistry = createPermissionRegistry<
  string,
  Record<string, BasePermissionMeta>
>({
  [AppConfigPermission.DOMAIN_APP_CONFIG_CREATE]: {
    description: 'Create appConfig records',
    riskLevel: PermissionRiskLevel.MEDIUM,
    requiresJustification: false,
    relatedPermissions: [],
    policyPath: 'TENANT.app-config.app_config_create',
    category: 'Core Operations',
    auditRequired: true,
    name: 'DOMAIN_APP_CONFIG_CREATE',
    action: 'app_config_create',
    tags: ['crud', 'create'],
    operationType: PermissionOperationType.CRUD,
    policyRuleId: 'app-config_app_config_create',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.app-config.app_config_create',
  },
  [AppConfigPermission.DOMAIN_APP_CONFIG_READ]: {
    description: 'Read appConfig records',
    riskLevel: PermissionRiskLevel.LOW,
    requiresJustification: false,
    relatedPermissions: [],
    policyPath: 'TENANT.app-config.app_config_read',
    category: 'Core Operations',
    auditRequired: false,
    name: 'DOMAIN_APP_CONFIG_READ',
    action: 'app_config_read',
    tags: ['crud', 'read'],
    operationType: PermissionOperationType.CRUD,
    policyRuleId: 'app-config_app_config_read',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.app-config.app_config_read',
  },
  [AppConfigPermission.DOMAIN_APP_CONFIG_UPDATE]: {
    description: 'Update appConfig records',
    riskLevel: PermissionRiskLevel.MEDIUM,
    requiresJustification: false,
    relatedPermissions: [AppConfigPermission.DOMAIN_APP_CONFIG_READ],
    policyPath: 'TENANT.app-config.app_config_update',
    category: 'Core Operations',
    auditRequired: true,
    name: 'DOMAIN_APP_CONFIG_UPDATE',
    action: 'app_config_update',
    tags: ['crud', 'update'],
    operationType: PermissionOperationType.CRUD,
    policyRuleId: 'app-config_app_config_update',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.app-config.app_config_update',
  },
  [AppConfigPermission.DOMAIN_APP_CONFIG_DELETE]: {
    description: 'Delete appConfig records',
    riskLevel: PermissionRiskLevel.HIGH,
    requiresJustification: true,
    relatedPermissions: [
      AppConfigPermission.DOMAIN_APP_CONFIG_READ,
      AppConfigPermission.DOMAIN_APP_CONFIG_UPDATE,
    ],
    policyPath: 'TENANT.app-config.app_config_delete',
    category: 'Core Operations',
    auditRequired: true,
    name: 'DOMAIN_APP_CONFIG_DELETE',
    action: 'app_config_delete',
    tags: ['crud', 'delete'],
    operationType: PermissionOperationType.CRUD,
    policyRuleId: 'app-config_app_config_delete',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.app-config.app_config_delete',
  },
  [AppConfigPermission.DOMAIN_APP_CONFIG_ADMIN]: {
    description: 'Full administrative access to appConfig',
    riskLevel: PermissionRiskLevel.CRITICAL,
    requiresJustification: true,
    relatedPermissions: [
      AppConfigPermission.DOMAIN_APP_CONFIG_CREATE,
      AppConfigPermission.DOMAIN_APP_CONFIG_READ,
      AppConfigPermission.DOMAIN_APP_CONFIG_UPDATE,
      AppConfigPermission.DOMAIN_APP_CONFIG_DELETE,
    ],
    policyPath: 'TENANT.app-config.app_config_admin',
    category: 'Administrative',
    auditRequired: true,
    name: 'DOMAIN_APP_CONFIG_ADMIN',
    action: 'app_config_admin',
    tags: ['admin', 'full-access'],
    operationType: PermissionOperationType.ADMIN,
    policyRuleId: 'app-config_app_config_admin',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.app-config.app_config_admin',
  },
  [AppConfigPermission.DOMAIN_APP_CONFIG_BULK_IMPORT]: {
    description: 'Bulk import appConfig records',
    riskLevel: PermissionRiskLevel.HIGH,
    requiresJustification: true,
    relatedPermissions: [],
    policyPath: 'TENANT.app-config.app_config_bulk_import',
    category: 'Bulk Operations',
    auditRequired: true,
    name: 'DOMAIN_APP_CONFIG_BULK_IMPORT',
    action: 'app_config_bulk_import',
    tags: ['bulk', 'import'],
    operationType: PermissionOperationType.BULK,
    policyRuleId: 'app-config_app_config_bulk_import',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.app-config.app_config_bulk_import',
  },
  [AppConfigPermission.DOMAIN_APP_CONFIG_BULK_EXPORT]: {
    description: 'Bulk export appConfig records',
    riskLevel: PermissionRiskLevel.HIGH,
    requiresJustification: true,
    relatedPermissions: [],
    policyPath: 'TENANT.app-config.app_config_bulk_export',
    category: 'Bulk Operations',
    auditRequired: true,
    name: 'DOMAIN_APP_CONFIG_BULK_EXPORT',
    action: 'app_config_bulk_export',
    tags: ['bulk', 'export'],
    operationType: PermissionOperationType.BULK,
    policyRuleId: 'app-config_app_config_bulk_export',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.app-config.app_config_bulk_export',
  },
  [AppConfigPermission.DOMAIN_APP_CONFIG_AUDIT_LOG]: {
    description: 'Access appConfig audit logs',
    riskLevel: PermissionRiskLevel.HIGH,
    requiresJustification: true,
    relatedPermissions: [],
    policyPath: 'TENANT.app-config.app_config_audit_log',
    category: 'Audit & Compliance',
    auditRequired: true,
    name: 'DOMAIN_APP_CONFIG_AUDIT_LOG',
    action: 'app_config_audit_log',
    tags: ['audit', 'logs'],
    operationType: PermissionOperationType.SENSITIVE,
    policyRuleId: 'app-config_app_config_audit_log',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.app-config.app_config_audit_log',
  },
});

// Role hierarchy using shared utilities
export const AppConfigPermissionHierarchy = createRoleHierarchy<
  string,
  Record<string, readonly string[]>
>({
  AppConfigViewer: [AppConfigPermission.DOMAIN_APP_CONFIG_READ],
  AppConfigEditor: [
    AppConfigPermission.DOMAIN_APP_CONFIG_CREATE,
    AppConfigPermission.DOMAIN_APP_CONFIG_READ,
    AppConfigPermission.DOMAIN_APP_CONFIG_UPDATE,
  ],
  AppConfigManager: [
    AppConfigPermission.DOMAIN_APP_CONFIG_CREATE,
    AppConfigPermission.DOMAIN_APP_CONFIG_READ,
    AppConfigPermission.DOMAIN_APP_CONFIG_UPDATE,
    AppConfigPermission.DOMAIN_APP_CONFIG_DELETE,
    AppConfigPermission.DOMAIN_APP_CONFIG_BULK_IMPORT,
    AppConfigPermission.DOMAIN_APP_CONFIG_BULK_EXPORT,
    AppConfigPermission.DOMAIN_APP_CONFIG_AUDIT_LOG,
  ],
  AppConfigAdmin: [
    AppConfigPermission.DOMAIN_APP_CONFIG_CREATE,
    AppConfigPermission.DOMAIN_APP_CONFIG_READ,
    AppConfigPermission.DOMAIN_APP_CONFIG_UPDATE,
    AppConfigPermission.DOMAIN_APP_CONFIG_DELETE,
    AppConfigPermission.DOMAIN_APP_CONFIG_ADMIN,
    AppConfigPermission.DOMAIN_APP_CONFIG_BULK_IMPORT,
    AppConfigPermission.DOMAIN_APP_CONFIG_BULK_EXPORT,
    AppConfigPermission.DOMAIN_APP_CONFIG_AUDIT_LOG,
  ],
});

// Runtime completeness validation
const ALL_APP_CONFIG_PERMISSIONS = Object.values(AppConfigPermission);
assertRegistryComplete(ALL_APP_CONFIG_PERMISSIONS, AppConfigPermissionRegistry);

/**
 * AppConfig-specific field permission matrix for field-level security
 */
const APP_CONFIG_FIELD_PERMISSION_MATRIX = {
  metadata: [AppConfigPermission.DOMAIN_APP_CONFIG_ADMIN],
  bulkImport: [AppConfigPermission.DOMAIN_APP_CONFIG_BULK_IMPORT],
  bulkExport: [AppConfigPermission.DOMAIN_APP_CONFIG_BULK_EXPORT],
} as const;

/**
 * Factory-generated AppConfigPermissionHelpers with full functionality
 * This includes all methods needed by the authorization system:
 * - getRiskLevel, requiresJustification, isHighRisk
 * - getPolicyPath, requiresAudit (needed by app-config.resource.ts)
 * - getByRiskLevel, expandWithRelated, etc.
 * - Field-level permission logic with FIELD_PERMISSION_MATRIX
 */
export const AppConfigPermissionHelpers = createDomainPermissionHelpers({
  domain: 'app-config',
  permissions: AppConfigPermission,
  registry: AppConfigPermissionRegistry,
  fieldMatrix: APP_CONFIG_FIELD_PERMISSION_MATRIX,
});

// Add domain-specific convenience methods
export const AppConfigPermissionUtils = {
  /**
   * Get minimum permissions for basic appConfig management
   */
  getBasicManagementPermissions(): AppConfigPermission[] {
    return [
      AppConfigPermission.DOMAIN_APP_CONFIG_READ,
      AppConfigPermission.DOMAIN_APP_CONFIG_CREATE,
      AppConfigPermission.DOMAIN_APP_CONFIG_UPDATE,
    ];
  },

  /**
   * Check if user can perform bulk operations
   */
  canPerformBulkOperations(userPermissions: AppConfigPermission[]): boolean {
    return [
      AppConfigPermission.DOMAIN_APP_CONFIG_BULK_IMPORT,
      AppConfigPermission.DOMAIN_APP_CONFIG_BULK_EXPORT,
    ].some((perm) => userPermissions.includes(perm));
  },
} as const;
