// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { EventMetadata } from 'src/shared/domain/events';
import type { AppConfigSnapshotProps } from '../props';

/**
 * AppConfig change tracking interface
 * Used to track field-level changes in appConfig updates
 */
export interface AppConfigChangeSet {
  workspaceId?: { old: string; new: string };
  maxRetryAttempts?: { old: number; new: number };
  retryBackoffSeconds?: { old: number; new: number };
  defaultLocale?: { old: string; new: string };
  loggingEnabled?: { old: boolean; new: boolean };
  auditChannelId?: { old?: string | undefined; new?: string | undefined };
  metadata?: {
    old?: Record<string, unknown> | undefined;
    new?: Record<string, unknown> | undefined;
  };
}

/**
 * AppConfig Updated Event Payload
 * Contains information about what fields were changed in the appConfig
 */
export interface AppConfigUpdatedEventPayload {
  id: number;
  before: AppConfigSnapshotProps;
  after: AppConfigSnapshotProps;
  changes: AppConfigChangeSet;
  version: number;
  updatedAt: Date;
  metadata: EventMetadata;
}

/**
 * AppConfig Updated Domain Event
 *
 * Emitted when appConfig information is modified.
 * Contains change tracking information and update metadata.
 */
export class AppConfigUpdatedEvent {
  public readonly eventType = 'NotificationSlackConfigAppConfigUpdated.v1';
  public readonly eventVersion = 'v1';

  constructor(public readonly payload: AppConfigUpdatedEventPayload) {}

  // Factory method with security context
  static create(
    data: Omit<AppConfigUpdatedEventPayload, 'metadata'>,
    baseMetadata: EventMetadata,
  ): AppConfigUpdatedEvent {
    const metadata: EventMetadata = {
      ...baseMetadata,
      eventVersion: '1.0',
      source: 'notification.domain.app-config',
    };

    return new AppConfigUpdatedEvent({
      ...data,
      metadata,
    });
  }

  get id(): number {
    return this.payload.id;
  }

  get changes(): AppConfigChangeSet {
    return this.payload.changes;
  }

  get version(): number {
    return this.payload.version;
  }

  get updatedAt(): Date {
    return this.payload.updatedAt;
  }

  get metadata(): EventMetadata {
    return this.payload.metadata;
  }
}
