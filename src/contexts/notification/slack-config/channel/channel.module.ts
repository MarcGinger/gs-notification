// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Module } from '@nestjs/common';
import { SlackConfigSharedModule } from '../slack-config-shared.module';
import { ChannelController } from './interface/http/controllers';
import {
  ChannelApplicationService,
  ChannelAuthorizationService,
  ChannelAuthorizationAdapter,
  ChannelForeignKeyValidatorService,
} from './application/services';
import {
  ICreateChannelUseCase,
  CreateChannelUseCase,
  IUpdateChannelUseCase,
  UpdateChannelUseCase,
  IDeleteChannelUseCase,
  DeleteChannelUseCase,
  IGetChannelUseCase,
  GetChannelUseCase,
} from './application/use-cases';

// import { IChannelRepository } from './application/ports';
import {
  ChannelReaderRepository,
  ChannelWriterRepository,
} from './infrastructure/repositories';
import { WorkspaceReaderRepository } from '../workspace/infrastructure/repositories';

// Tokens for injection - imported directly from port files
import {
  CHANNEL_READER_TOKEN,
  CHANNEL_WRITER_TOKEN,
} from './application/ports';
import { WORKSPACE_READER_TOKEN } from '../workspace/application/ports';
@Module({
  imports: [
    SlackConfigSharedModule, // Provides all common infrastructure and services
  ],
  controllers: [ChannelController],
  providers: [
    // Repository implementations with tokens (before services that depend on them)
    {
      provide: CHANNEL_READER_TOKEN,
      useClass: ChannelReaderRepository,
    },
    {
      provide: CHANNEL_WRITER_TOKEN,
      useClass: ChannelWriterRepository,
    },

    // Bounded Context Reader Repositories
    {
      provide: WORKSPACE_READER_TOKEN,
      useClass: WorkspaceReaderRepository,
    },

    // Services that depend on repositories
    ChannelApplicationService,
    ChannelAuthorizationService,
    ChannelAuthorizationAdapter,
    ChannelForeignKeyValidatorService,

    // Use case implementations
    {
      provide: ICreateChannelUseCase,
      useClass: CreateChannelUseCase,
    },
    {
      provide: IUpdateChannelUseCase,
      useClass: UpdateChannelUseCase,
    },
    {
      provide: IDeleteChannelUseCase,
      useClass: DeleteChannelUseCase,
    },
    {
      provide: IGetChannelUseCase,
      useClass: GetChannelUseCase,
    },
  ],
  exports: [
    // Repository tokens for external module consumption
    CHANNEL_READER_TOKEN,
    CHANNEL_WRITER_TOKEN,
    // Bounded Context Reader tokens
    WORKSPACE_READER_TOKEN,
  ],
})
export class ChannelModule {}
