// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { EventMetadata } from 'src/shared/domain/events';
import type { ChannelSnapshotProps } from '../props';

/**
 * Channel change tracking interface
 * Used to track field-level changes in channel updates
 */
export interface ChannelChangeSet {
  name?: { old: string; new: string };
  workspaceId?: { old: string[]; new: string[] };
  isPrivate?: { old: boolean; new: boolean };
  isDm?: { old: boolean; new: boolean };
  topic?: { old?: string | undefined; new?: string | undefined };
  purpose?: { old?: string | undefined; new?: string | undefined };
  subscribedEvents?: {
    old?: Record<string, unknown> | undefined;
    new?: Record<string, unknown> | undefined;
  };
  enabled?: { old: boolean; new: boolean };
}

/**
 * Channel Updated Event Payload
 * Contains information about what fields were changed in the channel
 */
export interface ChannelUpdatedEventPayload {
  id: string;
  before: ChannelSnapshotProps;
  after: ChannelSnapshotProps;
  changes: ChannelChangeSet;
  version: number;
  updatedAt: Date;
  metadata: EventMetadata;
}

/**
 * Channel Updated Domain Event
 *
 * Emitted when channel information is modified.
 * Contains change tracking information and update metadata.
 */
export class ChannelUpdatedEvent {
  public readonly eventType = 'NotificationSlackConfigChannelUpdated.v1';
  public readonly eventVersion = 'v1';

  constructor(public readonly payload: ChannelUpdatedEventPayload) {}

  // Factory method with security context
  static create(
    data: Omit<ChannelUpdatedEventPayload, 'metadata'>,
    baseMetadata: EventMetadata,
  ): ChannelUpdatedEvent {
    const metadata: EventMetadata = {
      ...baseMetadata,
      eventVersion: '1.0',
      source: 'notification.domain.channel',
    };

    return new ChannelUpdatedEvent({
      ...data,
      metadata,
    });
  }

  get id(): string {
    return this.payload.id;
  }

  get changes(): ChannelChangeSet {
    return this.payload.changes;
  }

  get version(): number {
    return this.payload.version;
  }

  get updatedAt(): Date {
    return this.payload.updatedAt;
  }

  get metadata(): EventMetadata {
    return this.payload.metadata;
  }
}
