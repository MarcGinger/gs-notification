// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * Channel Updated Event Payload
 * Domain-shaped payload with no PII
 * Same shape as Created event for consistent replayability
 */
export interface ChannelUpdatedEventPayload {
  id: string;
  name: string;
  workspaceId: string[];
  isPrivate: boolean;
  isDm: boolean;
  topic?: string;
  purpose?: string;
  subscribedEvents?: Record<string, unknown>;
  enabled: boolean;
}

/**
 * Channel Updated Domain Event
 *
 * Emitted when channel information is modified.
 * Contains complete domain state (same shape as Created event) for replayability.
 */
export class ChannelUpdatedEvent {
  public readonly eventType = 'NotificationSlackConfigChannelUpdated.v1';
  public readonly eventVersion = 'v1';

  constructor(public readonly payload: ChannelUpdatedEventPayload) {}

  // Factory method - simple domain data, no metadata in payload
  static create(data: ChannelUpdatedEventPayload): ChannelUpdatedEvent {
    return new ChannelUpdatedEvent(data);
  }

  get id(): string {
    return this.payload.id;
  }

  get name(): string {
    return this.payload.name;
  }

  get workspaceId(): string[] {
    return this.payload.workspaceId;
  }

  get isPrivate(): boolean {
    return this.payload.isPrivate;
  }

  get isDm(): boolean {
    return this.payload.isDm;
  }

  get topic(): string | undefined {
    return this.payload.topic;
  }

  get purpose(): string | undefined {
    return this.payload.purpose;
  }

  get subscribedEvents(): Record<string, unknown> | undefined {
    return this.payload.subscribedEvents;
  }

  get enabled(): boolean {
    return this.payload.enabled;
  }
}
