// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * Channel Created Event Payload
 * Contains only business facts - no envelope metadata, timestamps, or versioning
 */
export interface ChannelCreatedEventPayload {
  code: string;
  name: string;
  workspaceCode: string;
  isPrivate: boolean;
  isDm: boolean;
  topic?: string;
  purpose?: string;
  subscribedEvents?: string[];
  enabled: boolean;
}

/**
 * Channel Created Domain Event
 *
 * Emitted when a new channel is successfully created.
 * Contains complete channel information and creation metadata.
 * Enhanced with security metadata and PII protection capabilities.
 */
export class ChannelCreatedEvent {
  public readonly eventType = 'NotificationSlackConfigChannelCreated.v1';
  public readonly eventVersion = 'v1';

  constructor(public readonly payload: ChannelCreatedEventPayload) {}

  // Factory method - no metadata needed, just business data
  static create(data: ChannelCreatedEventPayload): ChannelCreatedEvent {
    return new ChannelCreatedEvent(data);
  }

  get code(): string {
    return this.payload.code;
  }

  get name(): string {
    return this.payload.name;
  }

  get workspaceCode(): string {
    return this.payload.workspaceCode;
  }

  get isPrivate(): boolean {
    return this.payload.isPrivate;
  }

  get isDm(): boolean {
    return this.payload.isDm;
  }

  get topic(): string | undefined {
    return this.payload.topic;
  }

  get purpose(): string | undefined {
    return this.payload.purpose;
  }

  get subscribedEvents(): string[] | undefined {
    return this.payload.subscribedEvents;
  }

  get enabled(): boolean {
    return this.payload.enabled;
  }
}
