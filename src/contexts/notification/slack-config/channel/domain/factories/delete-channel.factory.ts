// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { DomainError, Result, err, ok, withContext } from 'src/shared/errors';
import { Clock } from 'src/shared/domain/clock';
import { EventMetadata } from 'src/shared/domain/events';
import { ChannelAggregate } from '../aggregates';
import { ChannelEntity } from '../entities';
import { ChannelSnapshotProps } from '../props';

/**
 * Delete Channel Aggregate Factory
 *
 * Handles the complete deletion flow for Channel aggregates:
 * 1. Loads existing aggregate from snapshot
 * 2. Executes domain deletion logic with proper business rule enforcement
 * 3. Generates appropriate domain events (ChannelDeleted)
 * 4. Returns updated aggregate ready for persistence
 *
 * This factory provides:
 * - Consistent deletion pattern matching create/update operations
 * - Centralized domain logic and business rule enforcement
 * - Proper event generation and aggregate state management
 * - Enhanced error context and logging integration
 * - Domain-driven design compliance
 */
export function deleteChannelAggregateFromSnapshot(
  existingSnapshot: ChannelSnapshotProps,
  metadata: EventMetadata,
  clock: Clock,
): Result<ChannelAggregate, DomainError> {
  // 1. Reconstitute existing aggregate from snapshot
  const entityResult = ChannelEntity.fromSnapshot(existingSnapshot);
  if (!entityResult.ok) {
    return err(
      withContext(entityResult.error, {
        operation: 'delete_channel_reconstitute',
        correlationId: metadata.correlationId,
        userId: metadata.actor?.userId,
        aggregateId: existingSnapshot.id,
      }),
    );
  }

  const existingAggregate = ChannelAggregate.reconstitute(
    entityResult.value,
    clock,
    metadata,
  );

  // 2. Execute domain deletion logic with business rule validation
  const deleteResult = existingAggregate.delete();
  if (!deleteResult.ok) {
    return err(
      withContext(deleteResult.error, {
        operation: 'delete_channel_domain_operation',
        correlationId: metadata.correlationId,
        userId: metadata.actor?.userId,
        aggregateId: existingSnapshot.id,
        aggregateVersion: existingAggregate.version,
      }),
    );
  }

  // 3. Return the aggregate with deletion event applied
  return ok(existingAggregate);
}
