// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { INestApplication } from '@nestjs/common';
import { SwaggerConfigUtil } from 'src/docs/swagger-config.util';
import { ChannelModule } from '../channel.module';
/**
 * Channel documentation endpoints interface
 */
export interface ChannelDocumentationUrls {
  channel: string;
}

/**
 * Channel Documentation
 * This module handles the Swagger documentation for channels
 *
 */
export class ChannelDocumentation {
  static setup(app: INestApplication, port: string | number): void {
    const config = new DocumentBuilder()
      .addBearerAuth(
        { type: 'http', scheme: 'bearer', bearerFormat: 'JWT' },
        'bearer',
      )
      .setTitle('üì± Channel Management API')
      .setDescription(
        `
## bounded context: notification
[‚Üê Back to documentation](/api/docs/notification)

### application: slack-config
[‚Üê Back to documentation](/api/docs/notification/slack-config)
## üßµ SlackChannel

### **Purpose**

The \`SlackChannel\` aggregate defines which channels or direct message endpoints within a workspace are authorized for communication. Each entry in this aggregate corresponds to a Slack channel (\`#alerts\`, \`#approvals\`, etc.) or DM (\`@username\`) where notifications can be posted.

This aggregate allows fine-grained control over what events each channel receives and ensures that messages are routed to valid and approved destinations.

### **Responsibilities**

* Register and maintain authorized Slack channels per workspace.
* Define subscription rules (e.g., which event types can post to which channels).
* Store metadata about channels (e.g., \`isPrivate\`, \`isDm\`, \`topic\`, \`purpose\`).
* Allow enabling/disabling individual channels without removing configuration.
* Ensure messages are delivered only to permitted targets.

### **Why It Matters**

\`SlackChannel\` acts as the **delivery policy** layer. It prevents unauthorized posting, provides flexibility in event routing, and allows tenants to configure business-specific notification targets.
`,
      )
      .setVersion('1.0.0')
      .addTag('Channels', `Configuration for channel table`);

    // Add dynamic server configuration
    SwaggerConfigUtil.addServers(config, port);

    const document = SwaggerModule.createDocument(app, config.build(), {
      include: [ChannelModule],
      extraModels: [],
    });

    SwaggerModule.setup(
      'api/docs/notification/slack-config/channel',
      app,
      document,
    );
  }

  /**
   * Setup all channel-related documentation endpoints
   * This method centralizes the setup of all channel module documentation
   */
  static setupAll(
    app: INestApplication,
    port: string | number,
  ): ChannelDocumentationUrls {
    // Setup main channel documentation
    ChannelDocumentation.setup(app, port);

    // Setup sub-module documentation

    // Return all endpoint URLs
    return {
      channel: ChannelDocumentation.getEndpoint(port),
    };
  }

  static getEndpoint(port: string | number): string {
    return `${SwaggerConfigUtil.getServerUrl(port)}/api/docs/notification/slack-config/channel`;
  }
}
