// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { ChannelDomainState } from '../../domain/state';
import { DetailChannelResponse } from '../dtos';

/**
 * Channel DTO Assembler
 *
 * Converts ChannelDomainState (pure VOs) to transport DTOs.
 * Bridges the gap between rich domain objects and API response format.
 * Uses existing generated DTOs and follows established patterns.
 */

/**
 * Assembles DTOs from ChannelDomainState for API transport
 */
export class ChannelDtoAssembler {
  /**
   * Convert ChannelDomainState to detailed response DTO
   *
   * @param domainState - Rich domain state with VOs
   * @returns Clean DTO for API response
   */
  static toDetailResponse(
    domainState: ChannelDomainState,
  ): DetailChannelResponse {
    const dto = new DetailChannelResponse();

    // Extract primitive values from VOs
    dto.id = domainState.id.value;
    dto.name = domainState.name.value;
    dto.workspaceId = domainState.workspaceId.value;
    dto.isPrivate = domainState.isPrivate.value;
    dto.isDm = domainState.isDm.value;
    dto.topic = domainState.topic?.value;
    dto.purpose = domainState.purpose?.value;
    dto.subscribedEvents = domainState.subscribedEvents?.toArray();
    dto.enabled = domainState.enabled.value;

    return dto;
  }
  /**
   * Convert array of ChannelDomainState to array of detail DTOs
   *
   * @param domainStates - Array of rich domain states
   * @returns Array of clean DTOs for detail API response
   */
  static toDetailResponseArray(
    domainStates: ChannelDomainState[],
  ): DetailChannelResponse[] {
    return domainStates.map((domainState) =>
      this.toDetailResponse(domainState),
    );
  }
}
