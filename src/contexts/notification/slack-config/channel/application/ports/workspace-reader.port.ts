// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Result, DomainError } from 'src/shared/errors';
import { ActorContext } from 'src/shared/application/context';
import { RepositoryOptions } from 'src/shared/infrastructure/repositories';
import { Option } from 'src/shared/domain/types';
import { WorkspaceReference } from './references';

export const WORKSPACE_READER_TOKEN = 'IWorkspaceReader' as const;

// FK validation result types
export interface WorkspaceValidationResult {
  found: WorkspaceReference[];
  missing: string[];
}

/**
 * Workspace Reader Port (Bounded Context: Notification)
 *
 * Handles workspace reference data lookups for FK validation.
 * Clean ownership of workspace-related operations with swappable implementations.
 */
export interface IWorkspaceReader {
  /**
   * Find valid Workspace Ids for Workspace configuration
   * @param actor - The authenticated user context
   * @param options - Optional repository options
   * @returns Result containing available Workspace Ids
   */
  findValidWorkspaceIds(
    actor: ActorContext,
    options?: RepositoryOptions,
  ): Promise<Result<string[], DomainError>>;

  /**
   * Find Workspace configuration by Workspace id
   * @param actor - The authenticated user context
   * @param  - The   to lookup
   * @param options - Optional repository options
   * @returns Result containing Workspace configuration or null if not found
   */
  findWorkspaceById(
    actor: ActorContext,
    id: string,
    options?: RepositoryOptions,
  ): Promise<Result<Option<WorkspaceReference>, DomainError>>;

  /**
   * Find Workspace configurations by Workspace Ids
   * @param actor - The authenticated user context
   * @param ids - The Workspace Ids to lookup
   * @param options - Optional repository options
   * @returns Result containing Workspace configurations or empty array if not found
   */
  findWorkspacesByIds(
    actor: ActorContext,
    ids: string[],
    options?: RepositoryOptions,
  ): Promise<Result<WorkspaceValidationResult, DomainError>>;
}
