// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Injectable, Inject } from '@nestjs/common';
import { Result, ok, err, DomainError, withContext } from 'src/shared/errors';
import { Log, Logger } from 'src/shared/logging';
import { ActorContext } from 'src/shared/application/context';
import { Option } from 'src/shared/domain/types';
import { ChannelErrors } from '../../domain/errors';
import { SlackConfigServiceConstants } from '../../../service-constants';
import {
  WORKSPACE_REFERENCE_READER_TOKEN,
  WorkspaceReference,
  IWorkspaceReader,
} from '../ports';

export interface ForeignKeyValidationContext {
  correlationId?: string;
  userId?: string;
  operation: string;
  component: string;
}

/**
 * Channel Foreign Key Validation Service
 *
 * Provides centralized validation for foreign key references used in Channel domain.
 * This service validates that referenced entities exist before Channel creation or updates.
 *
 * Benefits:
 * - Single responsibility for foreign key validation
 * - Reusable across create and update use cases
 * - Consistent error handling and logging
 * - Fail-fast validation to avoid expensive operations
 */
@Injectable()
export class ChannelForeignKeyValidatorService {
  constructor(
    @Inject(WORKSPACE_REFERENCE_READER_TOKEN)
    private readonly workspaceReader: IWorkspaceReader,
  ) {}
  /**
   * Validates workspaceId existence
   * @param actor - User context for authorization
   * @param workspaceId - Array of id values to validate
   * @param context - Validation context for logging and error handling
   * @param logger - Logger instance for structured logging
   * @returns Result indicating validation success or failure
   */
  async validateWorkspaceId(
    actor: ActorContext,
    workspaceId: string[] | undefined,
    context: ForeignKeyValidationContext,
    logger: Logger,
  ): Promise<Result<WorkspaceReference[], DomainError>> {
    if (!workspaceId || workspaceId.length === 0) {
      return ok([]);
    }

    Log.debug(logger, 'Validating workspaceId foreign keys', {
      application: SlackConfigServiceConstants.SERVICE_NAME,
      component: context.component,
      method: 'validateWorkspaceId',
      correlationId: context.correlationId,
      userId: context.userId,
      workspaceId,
      operation: context.operation,
    });

    const workspacesResult = await this.workspaceReader.findWorkspacesByIds(
      actor,
      workspaceId,
    );

    if (!workspacesResult.ok) {
      Log.error(logger, 'Workspace codes lookup failed during validation', {
        application: SlackConfigServiceConstants.SERVICE_NAME,
        component: context.component,
        method: 'validateWorkspaceId',
        correlationId: context.correlationId,
        userId: context.userId,
        workspaceId,
        operation: context.operation,
        error: workspacesResult.error,
      });
      return err(workspacesResult.error);
    }

    const validationResult = workspacesResult.value;
    const foundWorkspaceIds = validationResult.found.map((c) => c.id);
    const missingWorkspaceIds = validationResult.missing;

    if (missingWorkspaceIds.length > 0) {
      Log.warn(logger, 'Some workspace ids not found during validation', {
        application: SlackConfigServiceConstants.SERVICE_NAME,
        component: context.component,
        method: 'validateWorkspaceId',
        correlationId: context.correlationId,
        userId: context.userId,
        requestedIds: workspaceId,
        missingIds: missingWorkspaceIds,
        operation: context.operation,
      });
      return err(
        withContext(ChannelErrors.INVALID_WORKSPACE_IDS, {
          correlationId: context.correlationId,
          userId: context.userId,
          operation: context.operation,
          requestedIds: workspaceId,
          missingIds: missingWorkspaceIds,
          reason: 'Some workspace ids do not exist in the system',
        }),
      );
    }

    Log.debug(logger, 'Workspace ids existence validation passed', {
      application: SlackConfigServiceConstants.SERVICE_NAME,
      component: context.component,
      method: 'validateWorkspaceId',
      correlationId: context.correlationId,
      userId: context.userId,
      workspaceIdsCount: validationResult.found.length,
      operation: context.operation,
    });

    return ok(validationResult.found);
  }

  /**
   * Validates all foreign keys for channel props
   * @param actor - User context for authorization
   * @param props - Channel properties containing foreign key fields
   * @param context - Validation context for logging and error handling
   * @param logger - Logger instance for structured logging
   * @returns Result indicating validation success or failure
   */
  async validateChannelForeignKeys(
    actor: ActorContext,
    props: {
      workspaceId?: string[];
    },
    context: ForeignKeyValidationContext,
    logger: Logger,
  ): Promise<
    Result<
      {
        workspaceId?: WorkspaceReference[];
      },
      DomainError
    >
  > {
    // Validate workspaceId if provided
    const workspaceIdValidation = await this.validateWorkspaceId(
      actor,
      props.workspaceId,
      context,
      logger,
    );
    if (!workspaceIdValidation.ok) {
      return workspaceIdValidation;
    }

    return ok({
      workspaceId: workspaceIdValidation.value,
    });
  }

  /**
   * Generic alias for validateChannelForeignKeys to match shared runner interface
   * @param actor - Actor context for permissions and auditing
   * @param props - Props containing foreign key fields to validate
   * @param context - Validation context for logging and error handling
   * @param logger - Logger instance for structured logging
   * @returns Result indicating validation success or failure
   */
  async validateForeignKeys(
    actor: ActorContext,
    props: {
      workspaceId?: string[];
    },
    context: ForeignKeyValidationContext,
    logger: Logger,
  ): Promise<
    Result<
      {
        workspaceId?: WorkspaceReference[];
      },
      DomainError
    >
  > {
    return this.validateChannelForeignKeys(actor, props, context, logger);
  }
}
