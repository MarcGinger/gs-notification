// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

// Framework imports
import { Injectable, Inject } from '@nestjs/common';
import { Result, ok, err, DomainError, withContext } from 'src/shared/errors';

// Shared utilities and infrastructure
import { APP_LOGGER, componentLogger, Logger } from 'src/shared/logging';
import { Clock, CLOCK } from 'src/shared/infrastructure/time';
import { IUserToken } from 'src/shared/security';
import { ActorContextAdapter } from 'src/shared/application/actor-context.adapter';
import { validateSortFields, toTakeSkip } from 'src/shared/domain/properties';
import {
  DEFAULT_PAGINATION_CONFIG,
  DEFAULT_LIST_CACHE_CONFIG,
} from 'src/shared/domain/pagination.config';
import {
  UseCaseLoggingUtil,
  UseCaseLoggingConfig,
} from 'src/shared/application/utils/use-case-logging.util';

import { SlackConfigServiceConstants } from '../../../service-constants';

// Service configuration
// Using string literals for service constants

// Application layer
import { ListChannelQuery } from '../queries';
import { IChannelQuery, CHANNEL_QUERY_TOKEN } from '../ports';
import { ChannelAuthorizationAdapter } from '../services';
import { ListChannelFilterRequest, ChannelPageResponse } from '../dtos';
import { IListChannelUseCase } from './contracts';

// Shared compliance services (lightweight for list operations)
import {
  PIIClassificationService,
  PIIProtectionService,
  DataRetentionService,
} from 'src/shared/services/compliance';

/**
 * ✅ Enhanced List Channel Use Case with Enterprise Logging and Compliance
 *
 * Features:
 * - Classification-only PII approach (no domain data mutation)
 * - Safe logging contexts to prevent accidental PII disclosure
 * - Enhanced error handling with structured domain errors
 * - Authorization-based filtering with batch processing
 * - Comprehensive audit trails and compliance tracking
 * - Pagination validation and security controls
 */
@Injectable()
export class ListChannelUseCase implements IListChannelUseCase {
  private readonly logger: Logger;
  private readonly loggingConfig: UseCaseLoggingConfig;

  constructor(
    @Inject(CHANNEL_QUERY_TOKEN)
    private readonly query: IChannelQuery,
    private readonly authorizationService: ChannelAuthorizationAdapter,
    @Inject(APP_LOGGER) moduleLogger: Logger,
    @Inject(CLOCK) private readonly clock: Clock,
    private readonly piiClassificationService: PIIClassificationService,
    private readonly piiProtectionService: PIIProtectionService,
    private readonly dataRetentionService: DataRetentionService,
  ) {
    this.loggingConfig = {
      serviceName: SlackConfigServiceConstants.SERVICE_NAME,
      component: 'ListChannelUseCase',
      domain: 'slack_config',
      entityType: 'channel',
    };
    this.logger = componentLogger(moduleLogger, this.loggingConfig.component);
  }

  /**
   * Execute the list channel query with enhanced pagination, validation, and compliance
   */
  async execute(params: {
    user: IUserToken;
    filter?: ListChannelFilterRequest;
    correlationId: string;
  }): Promise<Result<ChannelPageResponse, DomainError>> {
    const operation = 'list_channel';
    const startTime = this.clock.nowMs();

    // Create query object from params for internal use
    // Ensure we always have a proper ListChannelFilterRequest instance with prototype methods
    const filter = params.filter
      ? Object.assign(new ListChannelFilterRequest(), params.filter)
      : new ListChannelFilterRequest();
    const query = new ListChannelQuery(
      params.user,
      filter,
      params.correlationId,
    );

    // Step 1: Create safe logging context (no PII, deferred retention metadata)
    const safeLogContext = UseCaseLoggingUtil.createLogContext(
      this.loggingConfig,
      this.clock,
      operation,
      query as any, // Query adapted for use case logging
      {
        operationRisk: UseCaseLoggingUtil.assessOperationRisk(operation),
        listOperation: true,
        page: query.filter.page ?? DEFAULT_PAGINATION_CONFIG.defaultPage,
        size: query.filter.size ?? DEFAULT_PAGINATION_CONFIG.defaultPageSize,
        hasFilters: Object.keys(query.filter.sortBy ?? {}).length > 0,
      },
    );

    // Step 2: Validate query with enhanced logging
    const validation = UseCaseLoggingUtil.validateCommand(
      this.logger,
      query as any,
      safeLogContext,
    );
    if (!validation.ok) {
      return err(validation.error);
    }

    try {
      // Step 1: Validate sort fields for security using inherited configuration
      const sortFieldConfig = query.filter.getSortFieldConfig();
      const allowedFields = Object.keys(sortFieldConfig).filter(
        (field) => sortFieldConfig[field].sortable,
      );
      const sortValidation = validateSortFields(
        query.filter.sortBy ?? {},
        allowedFields,
      );
      if (!sortValidation.ok) {
        UseCaseLoggingUtil.logOperationError(
          this.logger,
          operation,
          safeLogContext,
          sortValidation.error,
          'MEDIUM',
        );
        return err(sortValidation.error);
      }

      // Step 2: Convert pagination to repository parameters
      const takeSkipResult = toTakeSkip(
        query.filter.page ?? DEFAULT_PAGINATION_CONFIG.defaultPage,
        query.filter.size ?? DEFAULT_PAGINATION_CONFIG.defaultPageSize,
        DEFAULT_PAGINATION_CONFIG.maxPageSize,
      );
      if (!takeSkipResult.ok) {
        UseCaseLoggingUtil.logOperationError(
          this.logger,
          operation,
          safeLogContext,
          takeSkipResult.error,
          'MEDIUM',
        );
        return err(takeSkipResult.error);
      }

      // Step 3: Execute the repository query
      const channelResult = await this.fetchChannel(query);
      if (!channelResult.ok) {
        UseCaseLoggingUtil.logOperationError(
          this.logger,
          operation,
          safeLogContext,
          channelResult.error,
          'HIGH',
        );
        return err(channelResult.error);
      }

      // Step 4: Filter Channel based on authorization
      const correlationId = query.correlationId ?? 'unknown';
      const authorizedChannelResult = await this.filterAuthorizedChannels(
        channelResult.value,
        query.user.sub,
        correlationId,
        {
          tenant: query.user.tenant,
          roles: query.user.roles,
          operationType: 'list',
        },
      );

      if (!authorizedChannelResult.ok) {
        UseCaseLoggingUtil.logOperationError(
          this.logger,
          operation,
          safeLogContext,
          authorizedChannelResult.error,
          'HIGH',
        );
        return err(authorizedChannelResult.error);
      }

      // Step 5: Light compliance check for list operations (audit log only)
      const finalResult = authorizedChannelResult.value;
      if (finalResult.data && finalResult.data.length > 0) {
        // For list operations, we log bulk data access for compliance audit
        const sampleData = finalResult.data[0]; // Use first item for classification
        const listClassification = this.piiClassificationService.classifyData(
          {},
          {
            domain: 'slack-config',
            tenant: query.user.tenant,
            // entityType: 'Channel' // Future: for entity-level rules
          },
        );

        if (listClassification.containsPII) {
          // Log bulk data access for audit trail
          UseCaseLoggingUtil.logComplianceCheck(
            this.logger,
            operation,
            safeLogContext,
            listClassification,
          );
        }
      }

      // Step 6: Log operation success with comprehensive metrics
      const executionTime = this.clock.nowMs() - startTime;
      UseCaseLoggingUtil.logOperationSuccess(
        this.logger,
        operation,
        safeLogContext,
        {
          executionTimeMs: executionTime,
          businessData: {
            totalItems: finalResult.meta?.totalItems ?? 0,
            returnedItems: finalResult.data?.length ?? 0,
            page: query.filter.page ?? DEFAULT_PAGINATION_CONFIG.defaultPage,
            pageSize:
              query.filter.size ?? DEFAULT_PAGINATION_CONFIG.defaultPageSize,
            hasFilters: Object.keys(query.filter.sortBy ?? {}).length > 0,
            cacheEnabled: true,
            cacheTtl: DEFAULT_LIST_CACHE_CONFIG.defaultTtl,
          },
        },
      );

      return authorizedChannelResult;
    } catch (error) {
      const domainError = withContext(
        {
          code: 'NOTIFICATION_SLACK_CONFIG.LIST_CHANNELS_FAILED',
          title: 'Failed to list channel',
          category: 'infrastructure' as const,
          retryable: true,
        },
        {
          ...safeLogContext,
          error: error instanceof Error ? error.message : String(error),
        },
      );

      UseCaseLoggingUtil.logOperationError(
        this.logger,
        operation,
        safeLogContext,
        domainError,
        'CRITICAL',
      );

      return err(domainError);
    }
  }

  /**
   * ✅ Fetch channel from repository with error handling
   */
  private async fetchChannel(
    query: ListChannelQuery,
  ): Promise<Result<ChannelPageResponse, DomainError>> {
    try {
      // ✅ Use enhanced repository with proper Result handling
      const repositoryOptions = {
        correlationId: query.correlationId,
        source: 'list-channel-use-case',
        cache: {
          ttl: DEFAULT_LIST_CACHE_CONFIG.defaultTtl, // Use configurable cache TTL
          skipCache: false,
        },
      };

      // ✅ Convert IUserToken to ActorContext for enhanced repository methods
      const actor = ActorContextAdapter.fromUserToken(query.user);

      // ✅ Use findPaginated directly since we have IChannelQuery
      const channelResult = await this.query.findPaginated(
        actor,
        query.filter,
        repositoryOptions,
      );

      if (!channelResult.ok) {
        return err(channelResult.error);
      }

      return ok(channelResult.value);
    } catch (error) {
      return err(
        withContext(
          {
            code: 'NOTIFICATION_SLACK_CONFIG.REPOSITORY_FETCH_FAILED',
            title: 'Failed to fetch channel from repository',
            category: 'infrastructure',
            retryable: true,
          },
          {
            operation: 'fetch_channel',
            error: error instanceof Error ? error.message : String(error),
          },
        ),
      );
    }
  }

  /**
   * Filter channels based on user authorization
   */
  private async filterAuthorizedChannels(
    channelPage: ChannelPageResponse,
    userId: string,
    correlationId: string,
    context: Record<string, any>,
  ): Promise<Result<ChannelPageResponse, DomainError>> {
    try {
      if (!channelPage.data || channelPage.data.length === 0) {
        return ok(channelPage); // Empty page, nothing to filter
      }

      // Extract channel codes for batch authorization check
      const codes = channelPage.data
        .map((item) => item.code)
        .filter((code): code is string => code !== undefined && code !== null);
      if (codes.length === 0) {
        return ok(channelPage); // No valid channel codes
      }

      // Perform batch authorization check
      const authResult = await this.authorizationService.authorizeChannelList(
        userId,
        codes,
        correlationId,
        'read',
        context,
      );

      if (!authResult.ok) {
        return err(authResult.error);
      }

      const { authorized } = authResult.value;

      // Filter items to only include authorized channels
      const authorizedItems = channelPage.data.filter((item) =>
        authorized.includes(item.code),
      );

      // Update the page response with filtered results
      const filteredPage = ChannelPageResponse.create(
        authorizedItems,
        channelPage.meta, // Keep original metadata for now
      );

      // Log filtering results
      if (authorizedItems.length < channelPage.data.length) {
        this.logger.info(
          `Filtered channel list: originalCount=${channelPage.data.length} authorizedCount=${authorizedItems.length} userId=${userId} correlationId=${correlationId}`,
        );
      }

      return ok(filteredPage);
    } catch (error) {
      return err({
        code: 'CHANNEL.LIST_AUTHORIZATION_FAILED',
        title: 'Failed to authorize channel list',
        category: 'security',
        context: {
          userId,
          correlationId,
          error: error instanceof Error ? error.message : String(error),
        },
      });
    }
  }
}

/**
 * ✅ Type-safe use case result
 */
export type ListChannelUseCaseResult = ChannelPageResponse;

/**
 * ✅ Use case execution context for dependency injection
 */
export interface ListChannelUseCaseContext {
  correlationId?: string;
  userId?: string;
  tenant?: string;
}

/**
 * ✅ Factory function for creating queries with context
 */
export function createListChannelQuery(
  user: IUserToken,
  filter: ListChannelFilterRequest,
  context: ListChannelUseCaseContext,
): ListChannelQuery {
  return new ListChannelQuery(user, filter, context.correlationId);
}
