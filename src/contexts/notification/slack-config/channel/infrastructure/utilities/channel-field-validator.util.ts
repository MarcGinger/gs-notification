// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import {
  safeParseJSON,
  safeParseJSONArray,
} from 'src/shared/infrastructure/repositories';
import { DetailChannelResponse } from '../../application/dtos';

/**
 * Channel Field Validator Utility
 *
 * Centralized utility for parsing and validating Channel aggregate data from EventStore events.
 * Provides consistent field validation patterns that can be reused across repositories
 * and projectors for Channel domain operations.
 *
 * @domain Notification Context - Channel Field Validation Utility
 * @layer Infrastructure
 * @pattern Utility Pattern + Field Validation
 */
export class ChannelFieldValidatorUtil {
  /**
   * Create a validated DetailChannelResponse from raw EventStore event data
   *
   * Uses modern safeParseJSON utilities and DTOs to maintain CQRS compliance.
   * This creates read model data for projections, not domain props.
   *
   * @param aggregateData - Raw event data from EventStore
   * @returns Validated DetailChannelResponse DTO with all required fields
   * @throws Error if required fields are missing or invalid
   */
  static createChannelSnapshotFromEventData(
    aggregateData: Record<string, any>,
  ): DetailChannelResponse & {
    version: number;
    createdAt: Date;
    updatedAt: Date;
  } {
    // Parse array fields using safeParseJSONArray utility
    const workspaceId = safeParseJSONArray(
      aggregateData.workspaceId,
      'workspaceId',
      (x): x is string => typeof x === 'string',
    );

    const subscribedEvents = safeParseJSON<Record<string, unknown>>(
      aggregateData.subscribedEvents,
      'subscribedEvents',
    );
    // Extract simple fields directly from event data
    const id = aggregateData.id as string;
    const name = aggregateData.name as string;
    const isPrivate =
      aggregateData.isPrivate === 'true' || aggregateData.isPrivate === true;
    const isDm = aggregateData.isDm === 'true' || aggregateData.isDm === true;
    const topic = aggregateData.topic as string;
    const purpose = aggregateData.purpose as string;
    const enabled =
      aggregateData.enabled === 'true' || aggregateData.enabled === true;

    // Extract version and timestamps with proper type conversion
    const version =
      typeof aggregateData.version === 'string'
        ? parseInt(aggregateData.version, 10)
        : (aggregateData.version as number);
    const createdAt =
      typeof aggregateData.createdAt === 'string'
        ? new Date(aggregateData.createdAt)
        : (aggregateData.createdAt as Date);
    const updatedAt =
      typeof aggregateData.updatedAt === 'string'
        ? new Date(aggregateData.updatedAt)
        : (aggregateData.updatedAt as Date);

    // safeParseJSON utilities provide error handling for invalid JSON,
    // direct field access provides type safety and truthful representation
    return {
      id,
      name,
      workspaceId,
      isPrivate,
      isDm,
      topic,
      purpose,
      subscribedEvents,
      enabled,
      version,
      createdAt,
      updatedAt,
    };
  }
}
