// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Injectable, Inject } from '@nestjs/common';
import { Redis } from 'ioredis';
import { APP_LOGGER, Log, componentLogger, Logger } from 'src/shared/logging';
import { CorrelationUtil } from 'src/shared/utilities/correlation.util';
import { Clock, CLOCK } from 'src/shared/infrastructure/time';
import {
  RepositoryLoggingUtil,
  RepositoryLoggingConfig,
  handleRepositoryError,
  safeParseJSON,
  safeParseJSONArray,
  RepositoryOptions,
} from 'src/shared/infrastructure/repositories';
import { Result, DomainError, err, ok } from 'src/shared/errors';
import { Option } from 'src/shared/domain/types';
import { ActorContext } from 'src/shared/application/context';
import { RepositoryErrorFactory } from 'src/shared/domain/errors/repository.error';
import { CacheMetricsCollector } from 'src/shared/infrastructure/projections/cache-optimization';
import { SLACK_CONFIG_DI_TOKENS } from '../../../slack-config.constants';
import { DetailChannelResponse } from '../../application/dtos';
import { IChannelQuery } from '../../application/ports';

/**
 * Internal channel data structure for Redis operations
 * Extends DetailChannelResponse with additional fields needed for caching and versioning
 */
interface ChannelCacheData extends DetailChannelResponse {
  version: number;
  createdAt: Date;
  updatedAt: Date;
}

/**
 * Channel Query Repository - Interface Segregation Principle Implementation
 *
 * Bounded Context: Notification/Channel
 * Handles complex query operations including pagination, filtering, and search.
 * This repository focuses solely on advanced data retrieval operations using Redis projections.
 *
 * ISP Benefits:
 * - Clients that need simple reads don't depend on complex query methods
 * - Can be optimized independently using Redis indexing strategies
 * - Easier to implement caching strategies for query operations
 * - Supports analytical and reporting use cases with Redis sorted sets
 *
 * Redis Features Used:
 * - Hash-based channel storage with cluster-safe keys
 * - Sorted set indexing for efficient pagination and sorting
 * - Pattern matching for id and name filtering
 * - SCAN operations for tenant isolation
 * - Production-ready caching with metrics collection
 *
 * @domain Notification Context - Channel Query Repository (Redis)
 * @layer Infrastructure
 * @pattern Repository Pattern + Interface Segregation Principle + Redis Projector
 */
@Injectable()
export class ChannelQueryRepository implements IChannelQuery {
  private readonly logger: Logger;
  private readonly loggingConfig: RepositoryLoggingConfig;
  private readonly metricsCollector = new CacheMetricsCollector();

  constructor(
    @Inject(APP_LOGGER) baseLogger: Logger,
    @Inject(CLOCK) private readonly clock: Clock,
    @Inject(SLACK_CONFIG_DI_TOKENS.IO_REDIS)
    private readonly redis: Redis,
  ) {
    this.loggingConfig = {
      serviceName: 'ChannelConfigService',
      component: 'ChannelQueryRepository',
    };
    this.logger = componentLogger(baseLogger, this.loggingConfig.component);

    Log.info(
      this.logger,
      'ChannelQueryRepository initialized with Redis backend',
      {
        component: this.loggingConfig.component,
        redisStatus: this.redis.status,
        clusterSafe: true,
        cacheOptimized: true,
      },
    );
  }

  /**
   * Find a single channel by id using Redis hash lookup
   *
   * Leverages the established Redis patterns from ChannelProjector
   * with cluster-safe keys and production-ready caching.
   *
   * Features:
   * - Cluster-safe Redis keys with hash tags for co-location
   * - Direct hash lookup for optimal performance (O(1))
   * - Tenant isolation using Redis key patterns
   * - Comprehensive logging and error handling
   * - Production-ready metrics collection
   * - Soft delete awareness
   *
   * @param actor - The actor context containing authentication and request metadata.
   * @param id - The channel id to search for.
   * @param options - Optional repository options (e.g., timeout, correlation).
   * @returns A promise resolving to a Result containing the Channel response or a DomainError.
   */
  async findById(
    actor: ActorContext,
    id: string,
    options?: RepositoryOptions,
  ): Promise<Result<Option<DetailChannelResponse>, DomainError>> {
    const operation = 'findById';
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('channel-query-findById');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      channelId: id,
      dataSource: 'redis-projector',
    });

    // Validate actor context with enhanced security logging
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) return err(validation.error);

    // Guard tenant explicitly
    if (!actor.tenantId) {
      return err(
        RepositoryErrorFactory.validationError('tenantId', 'Missing tenant id'),
      );
    }

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      {
        operationType: 'channel_query_findById',
        scope: 'redis_single_lookup',
        tenantId: actor.tenantId,
      },
    );

    try {
      // Generate cluster-safe Redis key
      const channelKey = this.generateChannelKey(actor.tenantId, id);

      Log.debug(this.logger, 'Executing Redis hash lookup', {
        ...logContext,
        queryDetails: {
          scope: 'redis_hgetall',
          method: 'redis.hgetall',
          key: channelKey,
          clusterSafe: true,
        },
      });

      // Fetch channel hash from Redis
      const hashData = await this.redis.hgetall(channelKey);

      if (!hashData || Object.keys(hashData).length === 0) {
        Log.debug(this.logger, 'Channel not found in Redis', logContext);
        return ok(Option.none());
      }

      // Parse Redis hash to channel data
      const channel = this.parseRedisHashToChannel(hashData);

      if (!channel) {
        // Channel exists but is soft deleted or malformed
        Log.debug(
          this.logger,
          'Channel exists but is soft deleted or malformed',
          {
            ...logContext,
            softDeleted: !!hashData.deletedAt,
          },
        );
        return ok(Option.none());
      }

      // Transform to DetailChannelResponse DTO (excluding internal fields)
      const detailResponse: DetailChannelResponse = {
        id: channel.id,
        name: channel.name,
        workspaceId: channel.workspaceId,
        isPrivate: channel.isPrivate,
        isDm: channel.isDm,
        topic: channel.topic,
        purpose: channel.purpose,
        subscribedEvents: channel.subscribedEvents,
        enabled: channel.enabled,
      };

      Log.debug(this.logger, 'Channel found successfully in Redis', {
        ...logContext,
        resultData: {
          channelId: detailResponse.id,
          channelName: detailResponse.name,
          cacheHit: true,
        },
      });

      return ok(Option.some(detailResponse));
    } catch (error) {
      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'MEDIUM',
      );

      // Handle and return the classified error using shared utility
      return handleRepositoryError(error);
    }
  }

  /**
   * Generate cluster-safe Redis keys with hash tags for locality
   * Uses same pattern as ChannelProjector for consistency
   */
  private generateChannelKey(tenantId: string, id: string): string {
    // âœ… Hash-tags ensure key routes to same Redis Cluster slot as projector
    return `channel-projector:{${tenantId}}:channel:${id}`;
  }

  /**
   * Generate tenant index key for pagination and sorting
   */
  private generateTenantIndexKey(tenantId: string): string {
    return `channel-projector:{${tenantId}}:channel-index`;
  }

  /**
   * Parse Redis hash data into DetailChannelResponse DTO
   * Uses DTO instead of domain props for CQRS compliance
   */
  private parseRedisHashToChannel(
    hashData: Record<string, string>,
  ): ChannelCacheData | null {
    try {
      if (!hashData || Object.keys(hashData).length === 0) {
        return null;
      }

      // Check for soft deletion
      if (hashData.deletedAt) {
        return null;
      }

      // Parse array fields using safeParseJSONArray utility
      const workspaceId = safeParseJSONArray(
        hashData.workspaceId,
        'workspaceId',
        (x): x is string => typeof x === 'string',
      );
      const subscribedEvents = safeParseJSON<Record<string, unknown>>(
        hashData.subscribedEvents,
        'subscribedEvents',
      );

      return {
        id: hashData.id,
        name: hashData.name,
        workspaceId,
        isPrivate: hashData.isPrivate === 'true',
        isDm: hashData.isDm === 'true',
        topic: hashData.topic || undefined,
        purpose: hashData.purpose || undefined,
        subscribedEvents,
        enabled: hashData.enabled === 'true',
        version: parseInt(hashData.version, 10),
        createdAt: new Date(hashData.createdAt),
        updatedAt: new Date(hashData.updatedAt),
      };
    } catch (error) {
      Log.error(
        this.logger,
        'Failed to parse Redis hash data to ChannelSnapshot',
        {
          method: 'parseRedisHashToChannel',
          error: (error as Error).message,
          id: hashData?.id,
        },
      );
      return null;
    }
  }
  /**
   * Helper to create consistent logging context using shared utilities
   */
  private createLogContext(
    operation: string,
    correlationId: string,
    actor: ActorContext,
    additionalContext?: Record<string, unknown>,
  ): Record<string, unknown> {
    return RepositoryLoggingUtil.createLogContext(
      this.loggingConfig,
      this.clock,
      operation,
      correlationId,
      actor,
      additionalContext,
    );
  }
}
