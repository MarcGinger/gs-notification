// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Injectable, Inject } from '@nestjs/common';
import { Redis } from 'ioredis';
import { APP_LOGGER, Log, componentLogger, Logger } from 'src/shared/logging';
import { CorrelationUtil } from 'src/shared/utilities/correlation.util';
import { Clock, CLOCK } from 'src/shared/infrastructure/time';
import {
  RepositoryLoggingUtil,
  RepositoryLoggingConfig,
  handleRepositoryError,
  safeParseJSON,
  safeParseJSONArray,
  RepositoryOptions,
  isString,
} from 'src/shared/infrastructure/repositories';
import { Result, DomainError, err, ok } from 'src/shared/errors';
import { Option } from 'src/shared/domain/types';
import { ActorContext } from 'src/shared/application/context';
import { RepositoryErrorFactory } from 'src/shared/domain/errors/repository.error';
import { CacheMetricsCollector } from 'src/shared/infrastructure/projections/cache-optimization';
import { SLACK_CONFIG_DI_TOKENS } from '../../../slack-config.constants';
import { ChannelProjectionKeys } from '../../channel-projection-keys';
import {
  ChannelPageResponse,
  ListChannelFilterRequest,
  ListChannelResponse,
  DetailChannelResponse,
} from '../../application/dtos';
import { PaginationMetaResponse } from 'src/shared/application/dtos';
import { IChannelQuery } from '../../application/ports';

/**
 * Internal channel data structure for Redis operations
 * Extends DetailChannelResponse with additional fields needed for caching and versioning
 */
interface ChannelCacheData extends DetailChannelResponse {
  version: number;
  createdAt: Date;
  updatedAt: Date;
}

/**
 * Channel Query Repository - Interface Segregation Principle Implementation
 *
 * Bounded Context: Notification/Channel
 * Handles complex query operations including pagination, filtering, and search.
 * This repository focuses solely on advanced data retrieval operations using Redis projections.
 *
 * ISP Benefits:
 * - Clients that need simple reads don't depend on complex query methods
 * - Can be optimized independently using Redis indexing strategies
 * - Easier to implement caching strategies for query operations
 * - Supports analytical and reporting use cases with Redis sorted sets
 *
 * Redis Features Used:
 * - Hash-based channel storage with cluster-safe keys
 * - Sorted set indexing for efficient pagination and sorting
 * - Pattern matching for code and name filtering
 * - SCAN operations for tenant isolation
 * - Production-ready caching with metrics collection
 *
 * @domain Notification Context - Channel Query Repository (Redis)
 * @layer Infrastructure
 * @pattern Repository Pattern + Interface Segregation Principle + Redis Projector
 */
@Injectable()
export class ChannelQueryRepository implements IChannelQuery {
  private readonly logger: Logger;
  private readonly loggingConfig: RepositoryLoggingConfig;
  private readonly metricsCollector = new CacheMetricsCollector();

  constructor(
    @Inject(APP_LOGGER) baseLogger: Logger,
    @Inject(CLOCK) private readonly clock: Clock,
    @Inject(SLACK_CONFIG_DI_TOKENS.IO_REDIS)
    private readonly redis: Redis,
  ) {
    this.loggingConfig = {
      serviceName: 'ChannelConfigService',
      component: 'ChannelQueryRepository',
    };
    this.logger = componentLogger(baseLogger, this.loggingConfig.component);

    Log.info(
      this.logger,
      'ChannelQueryRepository initialized with Redis backend',
      {
        component: this.loggingConfig.component,
        redisStatus: this.redis.status,
        clusterSafe: true,
        cacheOptimized: true,
      },
    );
  }

  /**
   * Find a single channel by code using Redis hash lookup
   *
   * Leverages the established Redis patterns from ChannelProjector
   * with cluster-safe keys and production-ready caching.
   *
   * Features:
   * - Cluster-safe Redis keys with hash tags for co-location
   * - Direct hash lookup for optimal performance (O(1))
   * - Tenant isolation using Redis key patterns
   * - Comprehensive logging and error handling
   * - Production-ready metrics collection
   * - Soft delete awareness
   *
   * @param actor - The actor context containing authentication and request metadata.
   * @param code - The channel code to search for.
   * @param options - Optional repository options (e.g., timeout, correlation).
   * @returns A promise resolving to a Result containing the Channel response or a DomainError.
   */
  async findById(
    actor: ActorContext,
    code: string,
    options?: RepositoryOptions,
  ): Promise<Result<Option<DetailChannelResponse>, DomainError>> {
    const operation = 'findById';
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('channel-query-findById');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      channelCode: code,
      dataSource: 'redis-projector',
    });

    // Validate actor context with enhanced security logging
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) return err(validation.error);

    // Guard tenant explicitly
    if (!actor.tenant) {
      return err(
        RepositoryErrorFactory.validationError('tenant', 'Missing tenant id'),
      );
    }

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      {
        operationType: 'channel_query_findById',
        scope: 'redis_single_lookup',
        tenant: actor.tenant,
      },
    );

    try {
      // Generate cluster-safe Redis key
      const channelKey = this.generateChannelKey(actor.tenant, code);

      Log.debug(this.logger, 'Executing Redis hash lookup', {
        ...logContext,
        queryDetails: {
          scope: 'redis_hgetall',
          method: 'redis.hgetall',
          key: channelKey,
          clusterSafe: true,
        },
      });

      // Fetch channel hash from Redis
      const hashData = await this.redis.hgetall(channelKey);

      if (!hashData || Object.keys(hashData).length === 0) {
        Log.debug(this.logger, 'Channel not found in Redis', logContext);
        return ok(Option.none());
      }

      // Parse Redis hash to channel data
      const channel = this.parseRedisHashToChannel(hashData);

      if (!channel) {
        // Channel exists but is soft deleted or malformed
        Log.debug(
          this.logger,
          'Channel exists but is soft deleted or malformed',
          {
            ...logContext,
            softDeleted: !!hashData.deletedAt,
          },
        );
        return ok(Option.none());
      }

      // Transform to DetailChannelResponse DTO (excluding internal fields)
      const detailResponse: DetailChannelResponse = {
        code: channel.code,
        name: channel.name,
        workspaceCode: channel.workspaceCode,
        isPrivate: channel.isPrivate,
        isDm: channel.isDm,
        topic: channel.topic,
        purpose: channel.purpose,
        subscribedEvents: channel.subscribedEvents,
        enabled: channel.enabled,
      };

      Log.debug(this.logger, 'Channel found successfully in Redis', {
        ...logContext,
        resultData: {
          channelCode: detailResponse.code,
          channelName: detailResponse.name,
          cacheHit: true,
        },
      });

      return ok(Option.some(detailResponse));
    } catch (error) {
      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'MEDIUM',
      );

      // Handle and return the classified error using shared utility
      return handleRepositoryError(error);
    }
  }

  /**
   * Generate cluster-safe Redis keys using centralized ChannelProjectionKeys
   * Ensures consistency with projector key patterns
   */
  private generateChannelKey(tenant: string, id: string): string {
    // âœ… Use centralized key generation for consistency
    return ChannelProjectionKeys.getRedisChannelKey(tenant, id);
  }

  /**
   * Generate tenant index key for pagination and sorting using centralized keys
   */
  private generateTenantIndexKey(tenant: string): string {
    return ChannelProjectionKeys.getRedisChannelIndexKey(tenant);
  }

  /**
   * Parse Redis hash data into DetailChannelResponse DTO
   * Uses DTO instead of domain props for CQRS compliance
   */
  private parseRedisHashToChannel(
    hashData: Record<string, string>,
  ): ChannelCacheData | null {
    try {
      if (!hashData || Object.keys(hashData).length === 0) {
        return null;
      }

      // Check for soft deletion
      if (hashData.deletedAt) {
        return null;
      }

      // Parse array fields using safeParseJSONArray utility

      const subscribedEvents = safeParseJSONArray(
        hashData.subscribedEvents,
        'subscribedEvents',
        isString,
      );

      // Parse object fields using safeParseJSON utility
      // Extract basic fields directly from hash data

      return {
        code: hashData.code,
        name: hashData.name,
        workspaceCode: hashData.workspaceCode,
        isPrivate: hashData.isPrivate === 'true',
        isDm: hashData.isDm === 'true',
        topic: hashData.topic || undefined,
        purpose: hashData.purpose || undefined,
        subscribedEvents,
        enabled: hashData.enabled === 'true',
        version: parseInt(hashData.version, 10),
        createdAt: new Date(hashData.createdAt),
        updatedAt: new Date(hashData.updatedAt),
      };
    } catch (error) {
      Log.error(
        this.logger,
        'Failed to parse Redis hash data to ChannelSnapshot',
        {
          method: 'parseRedisHashToChannel',
          error: (error as Error).message,
          code: hashData?.code,
        },
      );
      return null;
    }
  }

  /**
   * Transform Channel CacheData to ListChannelResponse DTO
   */
  private toListResponse(channel: ChannelCacheData): ListChannelResponse {
    return {
      code: channel.code,
      name: channel.name,
      workspaceCode: channel.workspaceCode,
      isPrivate: channel.isPrivate,
      isDm: channel.isDm,
      topic: channel.topic,
      purpose: channel.purpose,
      subscribedEvents: channel.subscribedEvents,
      enabled: channel.enabled,
    } as ListChannelResponse;
  }

  /**
   * Apply filters to channel data using Redis pattern matching and client-side filtering
   */
  private matchesFilter(
    channel: ChannelCacheData,
    filter?: ListChannelFilterRequest,
  ): boolean {
    if (!filter) return true;

    // Filter by name (partial match)
    if (filter.code) {
      if (!channel.code.toLowerCase().includes(filter.code.toLowerCase())) {
        return false;
      }
    }
    // Filter by name (partial match)
    if (filter.name) {
      if (!channel.name.toLowerCase().includes(filter.name.toLowerCase())) {
        return false;
      }
    }
    // Filter by name (partial match)
    if (filter.workspaceCode) {
      if (
        !channel.workspaceCode
          .toLowerCase()
          .includes(filter.workspaceCode.toLowerCase())
      ) {
        return false;
      }
    }
    return true;
  }

  /**
   * Sort channels based on sort criteria
   */
  private sortChannels(
    channels: ChannelCacheData[],
    sortBy?: Record<string, string>,
  ): ChannelCacheData[] {
    if (!sortBy || Object.keys(sortBy).length === 0) {
      // No sorting criteria provided, return as-is
      return channels;
    }

    return channels.sort((a, b) => {
      for (const [field, direction] of Object.entries(sortBy)) {
        let aVal: number | Date | string;
        let bVal: number | Date | string;

        switch (field) {
          case 'code':
            aVal = a.code;
            bVal = b.code;
            break;
          case 'name':
            aVal = a.name;
            bVal = b.name;
            break;
          case 'workspaceCode':
            aVal = a.workspaceCode;
            bVal = b.workspaceCode;
            break;
          case 'createdAt':
            aVal = a.createdAt;
            bVal = b.createdAt;
            break;
          case 'updatedAt':
            aVal = a.updatedAt;
            bVal = b.updatedAt;
            break;
          default:
            continue;
        }

        if (aVal === bVal) continue;

        const comparison = aVal < bVal ? -1 : 1;
        return direction?.toLowerCase() === 'desc' ? -comparison : comparison;
      }
      return 0;
    });
  }
  /**
   * Helper to create consistent logging context using shared utilities
   */
  private createLogContext(
    operation: string,
    correlationId: string,
    actor: ActorContext,
    additionalContext?: Record<string, unknown>,
  ): Record<string, unknown> {
    return RepositoryLoggingUtil.createLogContext(
      this.loggingConfig,
      this.clock,
      operation,
      correlationId,
      actor,
      additionalContext,
    );
  }

  /**
   * Find Channel records with pagination and filtering using Redis projections.
   *
   * Leverages the established Redis patterns from ChannelProjector and ChannelReaderRepository
   * with cluster-safe keys and production-ready caching.
   *
   * Features:
   * - Cluster-safe Redis keys with hash tags for co-location
   * - Client-side filtering for code patterns and name search
   * - Efficient in-memory sorting with configurable directions
   * - Pagination with total count calculation
   * - Tenant isolation using Redis key patterns
   * - Comprehensive logging and error handling
   * - Production-ready metrics collection
   *
   * @param actor - The actor context containing authentication and request metadata.
   * @param filter - Optional filter criteria for the channel search.
   * @param options - Optional repository options (e.g., pagination, sorting).
   * @returns A promise resolving to a Result containing paginated Channel responses or a DomainError.
   */
  async findPaginated(
    actor: ActorContext,
    filter?: ListChannelFilterRequest,
    options?: RepositoryOptions,
  ): Promise<Result<ChannelPageResponse, DomainError>> {
    const operation = 'findPaginated';
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('channel-query-paginated');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      filterCode: filter?.code,
      filterName: filter?.name,
      filterWorkspaceCode: filter?.workspaceCode,
      page: filter?.page,
      size: filter?.size,
      sortBy: filter?.sortBy,
      dataSource: 'redis-projector',
    });

    // Validate actor context with enhanced security logging
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) return err(validation.error);

    // Guard tenant explicitly
    if (!actor.tenant) {
      return err(
        RepositoryErrorFactory.validationError('tenant', 'Missing tenant id'),
      );
    }

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      {
        operationType: 'channel_query_paginated',
        scope: 'redis_projection_search',
        tenant: actor.tenant,
      },
    );

    try {
      const page = filter?.page ?? 1;
      const size = Math.min(filter?.size ?? 20, 100); // Cap at 100 items per page

      // Generate the proper Redis key pattern using centralized ChannelProjectionKeys
      const pattern = ChannelProjectionKeys.getRedisTenantChannelPattern(
        actor.tenant,
      );

      Log.debug(this.logger, 'Scanning Redis for tenant channels', {
        ...logContext,
        queryDetails: {
          scope: 'redis_scan',
          method: 'redis.scan',
          pattern,
          clusterSafe: true,
        },
      });

      // Use Redis SCAN to find all channel keys for the tenant
      const channelKeys: string[] = [];
      const scanIterator = this.redis.scanStream({
        match: pattern,
        count: 1000, // Batch size for scanning
      });

      for await (const keys of scanIterator) {
        channelKeys.push(...(keys as string[]));
      }

      if (channelKeys.length === 0) {
        // No channels found for tenant
        const meta = new PaginationMetaResponse({
          page,
          size,
          totalItems: 0,
          totalPages: 0,
          hasNextPage: false,
          hasPreviousPage: false,
        });

        const response = ChannelPageResponse.create([], meta);

        Log.debug(this.logger, 'No channels found for tenant', {
          ...logContext,
          totalItems: 0,
        });

        return ok(response);
      }

      // Batch fetch all channel hashes using pipeline for efficiency
      const pipeline = this.redis.pipeline();
      channelKeys.forEach((key) => {
        pipeline.hgetall(key);
      });

      const results = await pipeline.exec();

      if (!results) {
        throw new Error('Redis pipeline execution failed');
      }

      // Parse all channels from Redis hashes
      const allChannels: ChannelCacheData[] = [];
      for (let i = 0; i < results.length; i++) {
        const [error, hashData] = results[i];
        if (!error && hashData) {
          const channel = this.parseRedisHashToChannel(
            hashData as Record<string, string>,
          );
          if (channel) {
            allChannels.push(channel);
          }
        }
      }

      // Apply client-side filtering
      const filteredChannels = allChannels.filter((channel) =>
        this.matchesFilter(channel, filter),
      );

      // Apply client-side sorting
      const sortedChannels = this.sortChannels(
        filteredChannels,
        filter?.sortBy,
      );

      // Calculate pagination metadata
      const totalItems = sortedChannels.length;
      const totalPages = Math.ceil(totalItems / size);
      const hasNextPage = page < totalPages;
      const hasPreviousPage = page > 1;

      // Apply pagination
      const startIndex = (page - 1) * size;
      const endIndex = startIndex + size;
      const paginatedChannels = sortedChannels.slice(startIndex, endIndex);

      // Transform to DTOs
      const channelResponses = paginatedChannels.map((channel) =>
        this.toListResponse(channel),
      );

      const meta = new PaginationMetaResponse({
        page,
        size,
        totalItems,
        totalPages,
        hasNextPage,
        hasPreviousPage,
      });

      const response = ChannelPageResponse.create(channelResponses, meta);

      // Log successful query metrics
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: paginatedChannels.length,
          dataQuality: paginatedChannels.length > 0 ? 'good' : 'empty',
          sampleData: {
            totalItems,
            totalKeysScanned: channelKeys.length,
            filteredCount: filteredChannels.length,
            page,
            size,
            hasFilters: !!(
              filter?.code ||
              filter?.name ||
              filter?.workspaceCode
            ),
            sortFields: Object.keys(filter?.sortBy ?? {}),
          },
        },
      );

      return ok(response);
    } catch (error) {
      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'HIGH',
      );

      // Handle and return the classified error using shared utility
      return handleRepositoryError(error);
    }
  }
}
