// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * TypeORM Migration: CreateTemplatesTable
 *
 * ARCHITECTURE OVERVIEW:
 * This migration creates a read model table for the Template domain.
 *
 * EVENT SOURCING ARCHITECTURE:
 * - EventStoreDB serves as the source of truth for all domain events
 * - This PostgreSQL table acts as a read model projection for query optimization
 * - Data flows: EventStoreDB -> Projector -> PostgreSQL Read Model
 *
 * PROJECTION STRATEGY:
 * - Events from EventStoreDB are projected into this table by domain projectors
 * - The projector handles event replay and real-time projection updates
 * - This table should only be modified through the projection process
 *
 * PERFORMANCE CONSIDERATIONS:
 * - Indexes are optimized for multi-tenant query patterns
 * - JSONB columns provide flexible storage for complex domain data
 * - Composite indexes support efficient filtering and sorting operations
 */

import { MigrationInterface, QueryRunner } from 'typeorm';

// 0 ms â†’ 1970-01-01 00:00:00 UTC
// CREATE TABLE IF NOT EXISTS "templates" (

export class CreateTemplatesTable0000000000002 implements MigrationInterface {
  name = 'CreateTemplatesTable0000000000002';

  public async up(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(`
      CREATE TABLE "slack_config"."templates" (
        "code" VARCHAR(128) NOT NULL,
        "workspace_id" JSONB NOT NULL DEFAULT '[]',
        "name" VARCHAR(255) NOT NULL,
        "description" TEXT,
        "content_blocks" JSONB NOT NULL,
        "variables" JSONB,
        "sample_payload" JSONB,
        "enabled" BOOLEAN NOT NULL,
        "tenant_id" VARCHAR(100) NOT NULL,
        "version" INTEGER NOT NULL DEFAULT 0,
        "created_at" TIMESTAMP NOT NULL DEFAULT NOW(),
        "updated_at" TIMESTAMP NOT NULL DEFAULT NOW(),
        "deleted_at" TIMESTAMP,
        "last_stream_revision" VARCHAR(50),
        PRIMARY KEY ("tenant_id", "code")
      );
    `);

    // Create performance indexes for multi-tenant architecture
    await queryRunner.query(`
      CREATE INDEX "idx_templates_tenant_id" ON "slack_config"."templates" ("tenant_id");
    `);

    await queryRunner.query(`
      CREATE INDEX "idx_templates_created_at" ON "slack_config"."templates" ("created_at");
    `);

    await queryRunner.query(`
      CREATE INDEX "idx_templates_updated_at" ON "slack_config"."templates" ("updated_at");
    `);

    // Add unique constraints if needed

    // Add table comment for documentation
    await queryRunner.query(`
      COMMENT ON TABLE "slack_config"."templates" IS 'Read model projection for Template domain. Source of truth: EventStoreDB. Updated via domain projectors.';
    `);

    // Add column comments for better documentation
    await queryRunner.query(`
      COMMENT ON COLUMN "slack_config"."templates"."code" IS 'Unique template identifier used for programmatic template selection. Must follow snake_case naming convention for consistency with application code.';
    `);
    await queryRunner.query(`
      COMMENT ON COLUMN "slack_config"."templates"."workspace_id" IS 'Foreign key linking template to its workspace. Enables workspace-specific template customization and multi-tenant template isolation.';
    `);
    await queryRunner.query(`
      COMMENT ON COLUMN "slack_config"."templates"."name" IS 'User-friendly template name displayed in admin interfaces and template selection menus. Should clearly describe the template's purpose and usage context.';
    `);
    await queryRunner.query(`
      COMMENT ON COLUMN "slack_config"."templates"."description" IS 'Detailed description of the template's purpose, when to use it, and any special considerations. Helps administrators choose appropriate templates for specific notification scenarios.';
    `);
    await queryRunner.query(`
      COMMENT ON COLUMN "slack_config"."templates"."content_blocks" IS 'Slack Block Kit JSON structure defining the visual layout and interactive elements of the message. Supports rich formatting, buttons, and dynamic content replacement.';
    `);
    await queryRunner.query(`
      COMMENT ON COLUMN "slack_config"."templates"."variables" IS 'Array of variable names that can be dynamically replaced in the template content. Each variable corresponds to a placeholder in content_blocks using {{variableName}} syntax.';
    `);
    await queryRunner.query(`
      COMMENT ON COLUMN "slack_config"."templates"."sample_payload" IS 'Example data structure showing realistic values for all template variables. Used for template testing, preview generation, and developer documentation.';
    `);
    await queryRunner.query(`
      COMMENT ON COLUMN "slack_config"."templates"."enabled" IS 'Template availability toggle. Disabled templates cannot be used for new notifications but existing scheduled notifications will continue to use them.';
    `);

    await queryRunner.query(`
      COMMENT ON COLUMN "slack_config"."templates"."tenant_id" IS 'Multi-tenant isolation key - identifies which tenant this channel belongs to.';
    `);
    await queryRunner.query(`
      COMMENT ON COLUMN "slack_config"."templates"."version" IS 'Aggregate version for optimistic concurrency control and event ordering.';
    `);
    await queryRunner.query(`
      COMMENT ON COLUMN "slack_config"."templates"."deleted_at" IS 'Soft delete timestamp - NULL means active channel, non-NULL means logically deleted.';
    `);
    await queryRunner.query(`
      COMMENT ON COLUMN "slack_config"."templates"."last_stream_revision" IS 'EventStore stream revision for idempotency and duplicate event detection.';
    `);
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(`DROP TABLE "slack_config"."templates"`);
  }
}
