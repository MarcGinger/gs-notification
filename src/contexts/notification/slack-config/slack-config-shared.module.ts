// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Module, Global } from '@nestjs/common';
import { CqrsModule } from '@nestjs/cqrs';
import { TimeModule } from 'src/shared/infrastructure/time';
import { LoggingModule } from 'src/shared/logging';
import { OpaModule } from 'src/shared/security';
import { ComplianceModule } from 'src/shared/services/compliance';
import { ComplianceInfrastructureModule } from 'src/shared/infrastructure/compliance';
import { InfrastructureModule } from 'src/shared/infrastructure/infrastructure.module';
import { TypeOrmDatabaseModule } from 'src/shared/infrastructure/database/typeorm.module';
import {
  DATA_SOURCE,
  CACHE_SERVICE,
  IO_REDIS,
} from 'src/shared/constants/injection-tokens';

// Shared infrastructure
import { MetadataFactory } from 'src/shared/application/factories/metadata.factory';
import { RepositoryMetricsService } from 'src/shared/application/metrics/repository-metrics.service';
import { Clock, CLOCK } from 'src/shared/infrastructure/time';
import {
  APP_LOGGER,
  LOGGER_FACTORY,
  ServiceLoggerFactory,
} from 'src/shared/logging';
import { NoopAuthorizationService } from 'src/shared/security/noop-authorization.service';
import { SlackConfigServiceConstants } from './service-constants';
import { SLACK_CONFIG_DI_TOKENS } from './slack-config.constants';

// Slack Domain Services
import { SlackConfigPolicyService } from './slack-config-policy.service';
/**
 * Slack Shared Module
 *
 * Provides common infrastructure and services for all slack-config domain modules.
 * This module is marked as @Global to avoid re-importing in every domain module.
 *
 * Shared Services:
 * - SlackConfigPolicyService: PII policy registration for the entire domain
 * - MetadataFactory: Common metadata creation with catalog service context
 * - RepositoryMetricsService: Shared repository metrics collection
 * - APP_LOGGER: Application-scoped logger with proper bounded context
 * - SLACK_CONFIG_DI_TOKENS.AUTHORIZATION_SERVICE: Noop/Opa-AuthorizationService for development
 *
 * Shared Infrastructure:
 * - CqrsModule, TimeModule, LoggingModule, OpaModule
 * - ComplianceModule, ComplianceInfrastructureModule
 * - InfrastructureModule (provides Redis, Cache, etc.)
 */
@Global()
@Module({
  imports: [
    CqrsModule,
    TimeModule,
    LoggingModule,
    OpaModule,
    ComplianceModule,
    ComplianceInfrastructureModule,
    InfrastructureModule,
    TypeOrmDatabaseModule,
  ],
  providers: [
    // Domain-specific policy service
    SlackConfigPolicyService,

    // Domain-specific infrastructure token mappings
    {
      provide: SLACK_CONFIG_DI_TOKENS.IO_REDIS,
      useExisting: IO_REDIS,
    },
    {
      provide: SLACK_CONFIG_DI_TOKENS.DATA_SOURCE,
      useExisting: DATA_SOURCE,
    },
    {
      provide: SLACK_CONFIG_DI_TOKENS.CACHE_SERVICE,
      useExisting: CACHE_SERVICE,
    },

    // Common infrastructure services
    {
      provide: SLACK_CONFIG_DI_TOKENS.AUTHORIZATION_SERVICE,
      useClass: NoopAuthorizationService,
    },
    {
      provide: MetadataFactory,
      inject: [CLOCK],
      useFactory: (clock: Clock) =>
        new MetadataFactory(SlackConfigServiceConstants.SERVICE_NAME, clock),
    },
    RepositoryMetricsService,

    // Application-scoped logger using centralized constants
    {
      provide: APP_LOGGER,
      inject: [LOGGER_FACTORY],
      useFactory: (loggerFactory: ServiceLoggerFactory) => {
        return loggerFactory.getLogger({
          boundedContext: SlackConfigServiceConstants.BOUNDED_CONTEXT,
          application: SlackConfigServiceConstants.SERVICE_NAME,
        });
      },
    },
  ],
  exports: [
    // Export modules for re-use
    CqrsModule,
    TimeModule,
    LoggingModule,
    OpaModule,
    ComplianceModule,
    ComplianceInfrastructureModule,
    InfrastructureModule,

    // Export shared services
    SlackConfigPolicyService,
    SLACK_CONFIG_DI_TOKENS.AUTHORIZATION_SERVICE,
    SLACK_CONFIG_DI_TOKENS.IO_REDIS,
    SLACK_CONFIG_DI_TOKENS.DATA_SOURCE,
    SLACK_CONFIG_DI_TOKENS.CACHE_SERVICE,
    MetadataFactory,
    RepositoryMetricsService,
    APP_LOGGER,
  ],
})
export class SlackConfigSharedModule {}
