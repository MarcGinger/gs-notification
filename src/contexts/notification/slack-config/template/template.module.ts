// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Module } from '@nestjs/common';
import { SlackConfigSharedModule } from '../slack-config-shared.module';
import { TemplateController } from './interface/http/controllers';
import {
  TemplateApplicationService,
  TemplateAuthorizationService,
  TemplateAuthorizationAdapter,
  TemplateForeignKeyValidatorService,
} from './application/services';
import {
  IUpsertTemplateUseCase,
  UpsertTemplateUseCase,
  IGetTemplateUseCase,
  GetTemplateUseCase,
} from './application/use-cases';

// import { ITemplateRepository } from './application/ports';
import {
  TemplateQueryRepository,
  TemplateReaderRepository,
  TemplateWriterRepository,
  WorkspaceReaderRepository,
} from './infrastructure/repositories';

// Tokens for injection - imported directly from port files
import {
  TEMPLATE_READER_TOKEN,
  TEMPLATE_WRITER_TOKEN,
  WORKSPACE_REFERENCE_READER_TOKEN,
  TEMPLATE_QUERY_TOKEN,
} from './application/ports';
@Module({
  imports: [
    SlackConfigSharedModule, // Provides all common infrastructure and services
  ],
  controllers: [TemplateController],
  providers: [
    // Repository implementations with tokens (before services that depend on them)
    {
      provide: TEMPLATE_READER_TOKEN,
      useClass: TemplateReaderRepository,
    },
    {
      provide: TEMPLATE_WRITER_TOKEN,
      useClass: TemplateWriterRepository,
    },
    {
      provide: TEMPLATE_QUERY_TOKEN,
      useClass: TemplateQueryRepository,
    },

    // Bounded Context Reader Repositories
    {
      provide: WORKSPACE_REFERENCE_READER_TOKEN,
      useClass: WorkspaceReaderRepository,
    },

    // Services that depend on repositories
    TemplateApplicationService,
    TemplateAuthorizationService,
    TemplateAuthorizationAdapter,
    TemplateForeignKeyValidatorService,

    // Use case implementations
    {
      provide: IUpsertTemplateUseCase,
      useClass: UpsertTemplateUseCase,
    },
    {
      provide: IGetTemplateUseCase,
      useClass: GetTemplateUseCase,
    },
  ],
  exports: [
    // Repository tokens for external module consumption
    TEMPLATE_READER_TOKEN,
    TEMPLATE_WRITER_TOKEN,
    TEMPLATE_QUERY_TOKEN,
    // Bounded Context Reader tokens
    WORKSPACE_REFERENCE_READER_TOKEN,
  ],
})
export class TemplateModule {}
