// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * Abstract Use Case Contracts for Template Operations
 *
 * These abstract classes are used instead of interfaces to work with NestJS DI.
 * TypeScript interfaces are erased at runtime and cannot be injected.
 */

import { Result, DomainError } from 'src/shared/errors';
import type { IUserToken } from 'src/shared/security';
import type { UpsertTemplateProps } from '../../domain/props';
import type { DetailTemplateResponse } from '../dtos';

export abstract class IUpsertTemplateUseCase {
  abstract execute(params: {
    user: IUserToken;
    code: string;
    props: UpsertTemplateProps;
    correlationId: string;
    authorizationReason: string;
  }): Promise<Result<DetailTemplateResponse, DomainError>>;
}

export abstract class IGetTemplateUseCase {
  abstract execute(params: {
    user: IUserToken;
    code: string;
    correlationId: string;
  }): Promise<Result<DetailTemplateResponse | null, DomainError>>;
}
