// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { TemplatePermission } from '../../domain/permissions/template.permissions';

/**
 * Field-level permission matrix for Template updates.
 * Maps template fields to the required permissions for modification.
 */
export class TemplateFieldPermissionMatrix {
  private static readonly fieldPermissions: Record<
    string,
    TemplatePermission[]
  > = {
    // Basic template information fields - require standard update permission
    name: [TemplatePermission.DOMAIN_TEMPLATE_UPDATE],
    description: [TemplatePermission.DOMAIN_TEMPLATE_UPDATE],
    category: [TemplatePermission.DOMAIN_TEMPLATE_UPDATE],

    // Status fields - may require special permissions or admin rights
    active: [
      TemplatePermission.DOMAIN_TEMPLATE_UPDATE,
      TemplatePermission.DOMAIN_TEMPLATE_ADMIN,
    ],
    status: [
      TemplatePermission.DOMAIN_TEMPLATE_UPDATE,
      TemplatePermission.DOMAIN_TEMPLATE_ADMIN,
    ],

    // Financial fields - typically require higher permissions
    fees: [TemplatePermission.DOMAIN_TEMPLATE_UPDATE],
    rates: [TemplatePermission.DOMAIN_TEMPLATE_UPDATE],
    pricing: [TemplatePermission.DOMAIN_TEMPLATE_UPDATE],

    // Configuration fields
    channelCodes: [TemplatePermission.DOMAIN_TEMPLATE_UPDATE],
    railCodes: [TemplatePermission.DOMAIN_TEMPLATE_UPDATE],
    configuration: [TemplatePermission.DOMAIN_TEMPLATE_UPDATE],

    // Administrative fields - require admin permissions
    tenantId: [TemplatePermission.DOMAIN_TEMPLATE_ADMIN],
    auditInfo: [TemplatePermission.DOMAIN_TEMPLATE_ADMIN],
    metadata: [TemplatePermission.DOMAIN_TEMPLATE_UPDATE],
  };

  /**
   * Get required permissions for a specific field.
   * Returns empty array if field has no special permission requirements.
   */
  static getRequiredPermissions(fieldName: string): TemplatePermission[] {
    return this.fieldPermissions[fieldName] || [];
  }

  /**
   * Check if a field has specific permission requirements.
   */
  static hasSpecialPermissions(fieldName: string): boolean {
    return fieldName in this.fieldPermissions;
  }

  /**
   * Get all fields that require a specific permission.
   */
  static getFieldsForPermission(permission: TemplatePermission): string[] {
    return Object.entries(this.fieldPermissions)
      .filter(([, perms]) => perms.includes(permission))
      .map(([field]) => field);
  }

  /**
   * Get all defined field permissions.
   */
  static getAllFieldPermissions(): Record<string, TemplatePermission[]> {
    return { ...this.fieldPermissions };
  }

  /**
   * Add or update permission requirements for a field.
   */
  static setFieldPermissions(
    fieldName: string,
    permissions: TemplatePermission[],
  ): void {
    this.fieldPermissions[fieldName] = [...permissions];
  }
}
