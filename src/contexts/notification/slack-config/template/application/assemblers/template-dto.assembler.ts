// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { TemplateDomainState } from '../../domain/state';
import { DetailTemplateResponse } from '../dtos';

/**
 * Template DTO Assembler
 *
 * Converts TemplateDomainState (pure VOs) to transport DTOs.
 * Bridges the gap between rich domain objects and API response format.
 * Uses existing generated DTOs and follows established patterns.
 */

/**
 * Assembles DTOs from TemplateDomainState for API transport
 */
export class TemplateDtoAssembler {
  /**
   * Convert TemplateDomainState to detailed response DTO
   *
   * @param domainState - Rich domain state with VOs
   * @returns Clean DTO for API response
   */
  static toDetailResponse(
    domainState: TemplateDomainState,
  ): DetailTemplateResponse {
    const dto = new DetailTemplateResponse();

    // Extract primitive values from VOs
    dto.code = domainState.code.value;
    dto.workspaceId = domainState.workspaceId.toArray();
    dto.name = domainState.name.value;
    dto.description = domainState.description?.value;
    dto.contentBlocks = domainState.contentBlocks.toArray();
    dto.variables = domainState.variables?.toArray();
    dto.samplePayload = domainState.samplePayload?.value;
    dto.enabled = domainState.enabled.value;

    return dto;
  }
  /**
   * Convert array of TemplateDomainState to array of detail DTOs
   *
   * @param domainStates - Array of rich domain states
   * @returns Array of clean DTOs for detail API response
   */
  static toDetailResponseArray(
    domainStates: TemplateDomainState[],
  ): DetailTemplateResponse[] {
    return domainStates.map((domainState) =>
      this.toDetailResponse(domainState),
    );
  }
}
