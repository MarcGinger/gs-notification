// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * Template Resource Decorators - Domain-Driven Authorization
 *
 * Clean integration with domain-driven permissions infrastructure.
 * All business rules and risk assessments come from the domain layer.
 *
 * ARCHITECTURAL PRINCIPLE: No business logic duplication
 * ✅ Risk levels: TemplatePermissionHelpers.getRiskLevel()
 * ✅ Justification rules: TemplatePermissionHelpers.requiresJustification()
 * ✅ Categories: TemplatePermissionRegistry[permission].category
 * ✅ Policy paths: TemplatePermissionHelpers.getPolicyPath()
 * ✅ Audit requirements: TemplatePermissionRegistry[permission].auditRequired
 *
 * This keeps the HTTP layer thin and ensures business rules
 * live in the domain where they belong.
 */

import { Resource } from 'src/shared/security/opa';
import { Request } from 'express';
import {
  TemplatePermission,
  TemplatePermissionHelpers,
  TemplatePermissionRegistry,
} from '../domain/permissions';

/**
 * Domain-driven Template resource decorator
 *
 * All business rules come from the domain layer - no duplication!
 */
export const TemplateResource = (permission: TemplatePermission) =>
  Resource({
    type: 'template',
    action: permission,
    extractId: (req: Request) => req.params?.code || req.params?.id,
    extractAttributes: (req: Request) => {
      const body = req.body as Record<string, unknown> | undefined;
      const query = req.query as Record<string, unknown> | undefined;

      // Business data extraction
      const workspaceCode = body?.workspaceCode || query?.workspaceCode;
      const name = body?.name || query?.name;
      const description = body?.description || query?.description;
      const contentBlocks = body?.contentBlocks || query?.contentBlocks;
      const variables = body?.variables || query?.variables;
      const enabled = body?.enabled || query?.enabled;

      const baseAttributes = {
        workspaceCode,
        name,
        description,
        contentBlocks,
        variables,
        enabled,
      };

      // Domain-driven permission context (no hardcoded business rules!)
      const permissionMeta = TemplatePermissionRegistry[permission];
      const permissionContext = {
        permission,
        riskLevel: TemplatePermissionHelpers.getRiskLevel(permission),
        requiresJustification:
          TemplatePermissionHelpers.requiresJustification(permission),
        category: permissionMeta?.category as string,
        policyPath: TemplatePermissionHelpers.getPolicyPath(permission),
        auditRequired: TemplatePermissionHelpers.requiresAudit(permission),
      };

      return {
        ...baseAttributes,
        _permissionContext: permissionContext,
      };
    },
  });

/**
 * Specialized decorators for high-risk operations
 */
export const TemplateDeleteResource = () =>
  TemplateResource(TemplatePermission.DOMAIN_TEMPLATE_DELETE);

export const TemplateCreateResource = () =>
  TemplateResource(TemplatePermission.DOMAIN_TEMPLATE_CREATE);

export const TemplateUpdateResource = () =>
  TemplateResource(TemplatePermission.DOMAIN_TEMPLATE_UPDATE);

export const TemplateReadResource = () =>
  TemplateResource(TemplatePermission.DOMAIN_TEMPLATE_READ);
