// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Delete,
  HttpStatus,
  HttpCode,
  Param,
  UseInterceptors,
  UseGuards,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiNoContentResponse,
  ApiCreatedResponse,
  ApiBody,
  ApiHeader,
  ApiParam,
  ApiOkResponse,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { IdempotencyKey } from 'src/shared/interfaces/decorators';
import { IdempotencyKeyPipe } from 'src/shared/interfaces/pipes';
import { TemplateApplicationService } from '../../../application/services';
import { CurrentUser, IUserToken, JwtAuthGuard } from 'src/shared/security';
import {
  DetailTemplateResponse,
  CreateTemplateRequest,
  UpdateTemplateRequest,
} from '../../../application/dtos';
import { Result, ResultInterceptor, DomainError } from 'src/shared/errors';
import {
  TemplateReadResource,
  TemplateCreateResource,
  TemplateUpdateResource,
  TemplateDeleteResource,
} from '../../template.resource';
import { ApiCommonErrors } from 'src/shared/interfaces/http';

@Controller('templates')
@ApiTags('Templates')
@ApiBearerAuth()
@UseGuards(JwtAuthGuard)
@UseInterceptors(ResultInterceptor)
export class TemplateController {
  constructor(
    private readonly templateApplicationService: TemplateApplicationService,
  ) {}

  @Get(':code')
  @TemplateReadResource()
  @ApiOperation({
    summary: 'Get Template by ID',
    description:
      'Retrieves a single Template by its unique identifier. Requires READ permission (LOW risk).',
  })
  @ApiParam({
    name: 'code',
    type: 'string',
    description: 'Template unique identifier',
  })
  @ApiOkResponse({
    description: 'Template details retrieved successfully',
    type: DetailTemplateResponse,
  })
  @ApiCommonErrors()
  async get(
    @CurrentUser() user: IUserToken,
    @Param('code') code: string,
  ): Promise<Result<DetailTemplateResponse | null, DomainError>> {
    const result = await this.templateApplicationService.getTemplateById(
      user,
      code,
    );

    return result;
  }
  // ========================================
  // Core CRUD Operations
  // ========================================

  @Post()
  @TemplateCreateResource()
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: 'Create a new Template',
    description:
      'Creates a new Template in the catalog. Requires CREATE permission (MEDIUM risk).',
  })
  @ApiHeader({
    name: 'Idempotency-Key',
    required: false,
    description:
      'Ensures the request is processed only once. Accepts both Idempotency-Key and x-idempotency-key headers.',
  })
  @ApiCreatedResponse({
    type: DetailTemplateResponse,
    description: 'Template successfully created',
    headers: {
      Location: {
        description: 'URI of the newly created resource',
        schema: {
          type: 'string',
          example: '/templates/123e4567-e89b-12d3-a456-426614174000',
        },
      },
    },
  })
  @ApiCommonErrors()
  @ApiBody({ type: CreateTemplateRequest })
  async create(
    @CurrentUser() user: IUserToken,
    @Body() createTemplateRequest: CreateTemplateRequest,
    @IdempotencyKey(new IdempotencyKeyPipe())
    idempotencyKey: string | undefined,
  ): Promise<Result<DetailTemplateResponse, DomainError>> {
    // idempotencyKey is validated by the IdempotencyKeyPipe

    // Call service with options including idempotency key
    const result = await this.templateApplicationService.createTemplate(
      user,
      createTemplateRequest,
      {
        idempotencyKey,
      },
    );

    return result;
  }

  @Patch(':code')
  @TemplateUpdateResource()
  @ApiOperation({
    summary: 'Update a Template',
    description:
      'Updates an existing Template with new data. Supports partial updates. Requires UPDATE permission (MEDIUM risk).',
  })
  @ApiParam({
    name: 'code',
    type: 'string',
    description: 'Template unique identifier',
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: 'Template updated successfully',
    type: DetailTemplateResponse,
  })
  @ApiCommonErrors({
    include422: true,
    extra: [
      { status: 429, description: 'Too Many Requests' },
      { status: 503, description: 'Upstream dependency unavailable' },
    ],
  })
  @ApiBody({
    type: UpdateTemplateRequest,
    description: 'Template update data. Only provided fields will be updated.',
  })
  async update(
    @CurrentUser() user: IUserToken,
    @Param('code') code: string,
    @Body() updateTemplateRequest: UpdateTemplateRequest,
  ): Promise<Result<DetailTemplateResponse, DomainError>> {
    const result = await this.templateApplicationService.updateTemplate(
      user,
      code,
      updateTemplateRequest,
    );

    return result;
  }

  @Delete(':code')
  @TemplateDeleteResource()
  @HttpCode(HttpStatus.NO_CONTENT)
  @ApiOperation({
    summary: 'Delete a Template',
    description:
      'Soft-deletes a Template (marks as deleted). Requires DELETE permission (HIGH risk, justification required).',
  })
  @ApiParam({
    name: 'code',
    type: 'string',
    description: 'Template unique identifier',
  })
  @ApiCommonErrors()
  @ApiNoContentResponse({
    description: 'Template deleted successfully. No content returned.',
  })
  async remove(
    @CurrentUser() user: IUserToken,
    @Param('code') code: string,
  ): Promise<Result<void, DomainError>> {
    const result = await this.templateApplicationService.deleteTemplate(
      user,
      code,
    );
    return result;
  }
}
