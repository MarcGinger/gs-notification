// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { SlackConfigServiceConstants } from '../service-constants';
/**
 * Domain value object for Template projection keys
 * Centralizes all key patterns to prevent duplication and ensure consistency
 * Follows DDD principle of explicit domain concepts
 */
export class TemplateProjectionKeys {
  // EventStore DB patterns
  static readonly ESDB_BOUNDED_CONTEXT =
    SlackConfigServiceConstants.BOUNDED_CONTEXT;
  static readonly ESDB_AGGREGATE_NAME = 'template';
  static readonly ESDB_VERSION = 'v1';

  /**
   * Get EventStore stream prefix for individual streams
   * Format: <boundedContext>.<aggregate>.<version>
   * Example: slack-config.template.v1
   */
  static getEventStoreStreamPrefix(): string {
    return `${this.ESDB_BOUNDED_CONTEXT}.${this.ESDB_AGGREGATE_NAME}.${this.ESDB_VERSION}`;
  }

  /**
   * Get EventStore category projection pattern for catchup
   * Format: $ce-<boundedContext>.<aggregate>.<version>
   * Example: $ce-slack-config.template.v1
   */
  static getEventStoreCategoryPattern(): string {
    return `$ce-${this.getEventStoreStreamPrefix()}`;
  }

  /**
   * Get individual EventStore stream name for specific tenant and code
   * Format: <boundedContext>.<aggregate>.<version>-{tenant}-{code}
   * Example: slack-config.template.v1-tenant-12345
   */
  static getEventStoreStreamName(tenant: string, code: string): string {
    return `${this.getEventStoreStreamPrefix()}-${tenant}-${code}`;
  }

  /**
   * Extract tenant and code from EventStore stream name
   * Validates format: <boundedContext>.<aggregate>.<version>-{tenant}-{code}
   */
  static extractFromStreamName(
    streamName: string,
  ): { tenant: string; code: string } | null {
    const prefix = this.getEventStoreStreamPrefix();
    const pattern = new RegExp(
      `^${prefix.replace(/\./g, '\\.')}-([^-]+)-(.+)$`,
    );
    const match = streamName.match(pattern);
    if (!match) return null;

    const [, tenant, code] = match;
    return { tenant, code };
  }

  /**
   * Validate if stream name matches template pattern
   */
  static isTemplateStream(streamName: string): boolean {
    return this.extractFromStreamName(streamName) !== null;
  }

  /**
   * Get stream pattern for tenant-specific catchup
   * Format: <boundedContext>.<aggregate>.<version>-{tenant}-*
   */
  static getTenantStreamPattern(tenant: string): string {
    return `${this.getEventStoreStreamPrefix()}-${tenant}-*`;
  }

  /**
   * Get global stream pattern for all tenants
   * Format: <boundedContext>.<aggregate>.<version>-*
   */
  static getGlobalStreamPattern(): string {
    return `${this.getEventStoreStreamPrefix()}-*`;
  }

  // Redis projection key patterns
  static readonly REDIS_KEY_PREFIX = 'template:projection';
  static readonly REDIS_INDEX_PREFIX = 'template:index';

  /**
   * Get Redis key for template projection
   * Format: template:projection:{tenantId}:{code}
   */
  static getRedisTemplateKey(tenantId: string, code: string): string {
    return `${this.REDIS_KEY_PREFIX}:${tenantId}:${code}`;
  }

  /**
   * Get Redis key for tenant-based template index
   * Format: template:index:by_tenant:{tenantId}
   */
  static getRedisTenantIndexKey(tenantId: string): string {
    return `${this.REDIS_INDEX_PREFIX}:by_tenant:${tenantId}`;
  }

  /**
   * Get Redis key for category-based template index
   * Format: template:index:by_category:{tenantId}:{category}
   */
  static getRedisCategoryIndexKey(tenantId: string, category: string): string {
    return `${this.REDIS_INDEX_PREFIX}:by_category:${tenantId}:${category}`;
  }

  /**
   * Get Redis key pattern for all templates in a tenant
   * Format: template:projection:{tenantId}:*
   */
  static getRedisTenantTemplatePattern(tenantId: string): string {
    return `${this.REDIS_KEY_PREFIX}:${tenantId}:*`;
  }

  /**
   * Get Redis key pattern for all template projections
   * Format: template:projection:*
   */
  static getRedisAllTemplatesPattern(): string {
    return `${this.REDIS_KEY_PREFIX}:*`;
  }
}
