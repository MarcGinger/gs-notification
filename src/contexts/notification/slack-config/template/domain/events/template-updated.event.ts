// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * Template Updated Event Payload
 * Domain-shaped payload with no PII
 * Same shape as Created event for consistent replayability
 */
export interface TemplateUpdatedEventPayload {
  code: string;
  workspaceId: string[];
  name: string;
  description?: string;
  contentBlocks: string[];
  variables?: string[];
  samplePayload?: Record<string, unknown>;
  enabled: boolean;
}

/**
 * Template Updated Domain Event
 *
 * Emitted when template information is modified.
 * Contains complete domain state (same shape as Created event) for replayability.
 */
export class TemplateUpdatedEvent {
  public readonly eventType = 'NotificationSlackConfigTemplateUpdated.v1';
  public readonly eventVersion = 'v1';

  constructor(public readonly payload: TemplateUpdatedEventPayload) {}

  // Factory method - simple domain data, no metadata in payload
  static create(data: TemplateUpdatedEventPayload): TemplateUpdatedEvent {
    return new TemplateUpdatedEvent(data);
  }

  get code(): string {
    return this.payload.code;
  }

  get workspaceId(): string[] {
    return this.payload.workspaceId;
  }

  get name(): string {
    return this.payload.name;
  }

  get description(): string | undefined {
    return this.payload.description;
  }

  get contentBlocks(): string[] {
    return this.payload.contentBlocks;
  }

  get variables(): string[] | undefined {
    return this.payload.variables;
  }

  get samplePayload(): Record<string, unknown> | undefined {
    return this.payload.samplePayload;
  }

  get enabled(): boolean {
    return this.payload.enabled;
  }
}
