// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { DomainError, Result, err, withContext, ok } from 'src/shared/errors';
import { Clock } from 'src/shared/domain/clock';
import { EventMetadata } from 'src/shared/domain/events';
import { TemplateAggregate } from '../aggregates';
import { CreateTemplateProps } from '../props';
import { TemplateDomainState } from '../state';
import {
  TemplateCreatedAt,
  TemplateUpdatedAt,
  TemplateVersion,
  TemplateCode,
  TemplateWorkspaceId,
  TemplateName,
  TemplateDescription,
  TemplateContentBlocks,
  TemplateVariables,
  TemplateSamplePayload,
  TemplateEnabled,
} from '../value-objects';

/**
 * Enhanced template entity factory with comprehensive validation and security context
 * Moved from application layer to properly separate business concerns
 */
export function createTemplateAggregateFromProps(
  props: CreateTemplateProps,
  metadata: EventMetadata,
  clock: Clock,
  // validatedEntities?: {
  //  channels?: ChannelReference[];
  // },
): Result<TemplateAggregate, DomainError> {
  // Validate each property by creating value objects
  const codeResult = TemplateCode.from(props.code);
  if (!codeResult.ok) {
    return err(
      withContext(codeResult.error, {
        ...codeResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_template',
        code: props.code,
      }),
    );
  }

  const workspaceIdResult = TemplateWorkspaceId.from(props.workspaceId);
  if (!workspaceIdResult.ok) {
    return err(
      withContext(workspaceIdResult.error, {
        ...workspaceIdResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_template',
        workspaceId: props.workspaceId,
      }),
    );
  }

  const nameResult = TemplateName.from(props.name);
  if (!nameResult.ok) {
    return err(
      withContext(nameResult.error, {
        ...nameResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_template',
        name: props.name,
      }),
    );
  }

  const descriptionResult = TemplateDescription.from(props.description);
  if (!descriptionResult.ok) {
    return err(
      withContext(descriptionResult.error, {
        ...descriptionResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_template',
        description: props.description,
      }),
    );
  }

  const contentBlocksResult = TemplateContentBlocks.from(props.contentBlocks);
  if (!contentBlocksResult.ok) {
    return err(
      withContext(contentBlocksResult.error, {
        ...contentBlocksResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_template',
        contentBlocks: props.contentBlocks,
      }),
    );
  }

  const variablesResult = TemplateVariables.from(props.variables);
  if (!variablesResult.ok) {
    return err(
      withContext(variablesResult.error, {
        ...variablesResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_template',
        variables: props.variables,
      }),
    );
  }

  const samplePayloadResult = TemplateSamplePayload.from(props.samplePayload);
  if (!samplePayloadResult.ok) {
    return err(
      withContext(samplePayloadResult.error, {
        ...samplePayloadResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_template',
        samplePayload: props.samplePayload,
      }),
    );
  }

  const enabledResult = TemplateEnabled.from(props.enabled);
  if (!enabledResult.ok) {
    return err(
      withContext(enabledResult.error, {
        ...enabledResult.error.context,
        correlationId: metadata.correlationId,
        userId: metadata.userId,
        operation: 'create_template',
        enabled: props.enabled,
      }),
    );
  }

  const createdAtResult = TemplateCreatedAt.create(clock.now());
  if (!createdAtResult.ok) {
    return err(createdAtResult.error);
  }

  const updatedAtResult = TemplateUpdatedAt.create(clock.now());
  if (!updatedAtResult.ok) {
    return err(updatedAtResult.error);
  }

  const versionResult = TemplateVersion.create(1); // Initial version is 1
  if (!versionResult.ok) {
    return err(versionResult.error);
  }

  // Create the entity properties with validated value objects
  const entityProps: TemplateDomainState = {
    code: codeResult.value,
    workspaceId: workspaceIdResult.value,
    name: nameResult.value,
    description: descriptionResult.value,
    contentBlocks: contentBlocksResult.value,
    variables: variablesResult.value,
    samplePayload: samplePayloadResult.value,
    enabled: enabledResult.value,
    createdAt: createdAtResult.value,
    updatedAt: updatedAtResult.value,
    version: versionResult.value,
  };

  // Create the entity using the constructor
  return TemplateAggregate.create(entityProps, clock, metadata);
}
