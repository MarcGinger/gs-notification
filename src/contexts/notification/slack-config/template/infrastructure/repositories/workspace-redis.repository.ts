// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Injectable, Inject } from '@nestjs/common';
import { Redis } from 'ioredis';
import { CacheMetricsCollector } from 'src/shared/infrastructure/projections/cache-optimization';
import { APP_LOGGER, Log, componentLogger, Logger } from 'src/shared/logging';
import { CorrelationUtil } from 'src/shared/utilities/correlation.util';
import { Clock, CLOCK } from 'src/shared/infrastructure/time';
import {
  RepositoryLoggingUtil,
  RepositoryLoggingConfig,
  handleRepositoryError,
  safeParseJSON,
  RepositoryOptions,
} from 'src/shared/infrastructure/repositories';
import { Result, DomainError, err, ok } from 'src/shared/errors';
import { ActorContext } from 'src/shared/application/context';
import { RepositoryErrorFactory } from 'src/shared/domain/errors/repository.error';
import { SLACK_CONFIG_DI_TOKENS } from '../../../slack-config.constants';
import {
  IWorkspaceReader,
  WorkspaceReference,
  WorkspaceValidationResult,
} from '../../application/ports';
import { Option } from 'src/shared/domain/types';

/**
 * Workspace Reader Repository - Redis Implementation
 *
 * Bounded Context: Notification/Channel
 * Handles workspace reference data lookups for FK validation in the Channel context using Redis projections
 * as the data source with cluster-safe operations.
 *
 * Benefits:
 * - High-performance Redis backend
 * - Cluster-safe operations with hash tags
 * - Version hint optimization for cache efficiency
 * - Maintains same interface as SQL-based implementation
 * - Comprehensive logging and error handling
 *
 * @domain Notification Context - Channel Workspace Reader Repository (Redis)
 * @layer Infrastructure
 * @pattern Cross-Context Reference Reader + Redis Projector
 */
@Injectable()
export class WorkspaceReaderRepository implements IWorkspaceReader {
  private readonly logger: Logger;
  private readonly loggingConfig: RepositoryLoggingConfig;
  private readonly metricsCollector = new CacheMetricsCollector();

  constructor(
    @Inject(APP_LOGGER) baseLogger: Logger,
    @Inject(CLOCK) private readonly clock: Clock,
    @Inject(SLACK_CONFIG_DI_TOKENS.IO_REDIS)
    private readonly redis: Redis,
  ) {
    this.loggingConfig = {
      serviceName: 'ChannelConfigService',
      component: 'WorkspaceReaderRepository',
    };
    this.logger = componentLogger(baseLogger, this.loggingConfig.component);

    Log.info(
      this.logger,
      'WorkspaceReaderRepository initialized with Redis backend',
      {
        component: this.loggingConfig.component,
        redisStatus: this.redis.status,
        clusterSafe: true,
        cacheOptimized: true,
      },
    );
  }

  /**
   * Generate cluster-safe Redis keys with hash tags for locality
   * Uses same pattern as WorkspaceProjector for consistency
   */
  private generateWorkspaceKey(tenantId: string, id: string): string {
    // âœ… Hash-tags ensure key routes to same Redis Cluster slot as projector
    return `workspace-projector:{${tenantId}}:workspace:${id}`;
  }

  /**
   * Parse Redis hash data into WorkspaceReference
   */
  private parseRedisHashToWorkspace(
    hashData: Record<string, string>,
  ): WorkspaceReference | null {
    try {
      if (!hashData || Object.keys(hashData).length === 0) {
        return null;
      }

      // Check for soft deletion
      if (hashData.deletedAt) {
        return null;
      }

      // Parse JSON fields using safeParseJSON utility (following product-query.repository.ts pattern)
      // Extract fields directly from hash data (following product-query.repository.ts pattern)
      return {
        id: hashData.id,
        name: hashData.name,
        botToken: hashData.botToken || undefined,
        signingSecret: hashData.signingSecret || undefined,
        appId: hashData.appId || undefined,
        botUserId: hashData.botUserId || undefined,
        defaultChannelId: hashData.defaultChannelId || undefined,
        enabled: hashData.enabled === 'true',
      };
    } catch (error) {
      Log.error(
        this.logger,
        'Failed to parse Redis hash data to WorkspaceReference',
        {
          method: 'parseRedisHashToWorkspace',
          error: (error as Error).message,
          id: hashData?.id,
        },
      );
      return null;
    }
  }

  /**
   * Helper to create consistent logging context using shared utilities
   */
  private createLogContext(
    operation: string,
    correlationId: string,
    actor: ActorContext,
    additionalContext?: Record<string, unknown>,
  ): Record<string, unknown> {
    return RepositoryLoggingUtil.createLogContext(
      this.loggingConfig,
      this.clock,
      operation,
      correlationId,
      actor,
      additionalContext,
    );
  }

  /**
   * Helper to assess operation risk level using shared utilities
   */
  private assessOperationRisk(operation: string): 'LOW' | 'MEDIUM' | 'HIGH' {
    return RepositoryLoggingUtil.assessOperationRisk(operation);
  }

  /**
   * Find valid Workspace Ids for Workspace configuration
   * @param actor - The authenticated user context
   * @param options - Optional repository options (correlation ID, timeout, etc.)
   * @returns Result containing available Workspace Ids
   */
  async findValidWorkspaceIds(
    actor: ActorContext,
    options?: RepositoryOptions,
  ): Promise<Result<string[], DomainError>> {
    const operation = 'findValidWorkspaceIds';
    const riskLevel = this.assessOperationRisk(operation);
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('workspace-list-ids');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      riskLevel,
      customCorrelationId: !!options?.correlationId,
      source: options?.source,
      requestId: options?.requestId,
      dataSource: 'redis-projector',
    });

    // Validate actor context with enhanced security logging
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) return err(validation.error);

    // Guard tenant explicitly
    if (!actor.tenantId) {
      return err(
        RepositoryErrorFactory.validationError('tenantId', 'Missing tenant id'),
      );
    }

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      { queryType: 'reference_lookup', scope: 'redis_projection' },
    );

    try {
      Log.debug(this.logger, 'Finding valid workspace ids in Redis', {
        ...logContext,
        queryDetails: {
          scope: 'redis_keys',
          method: 'redis.scan',
          pattern: `workspace-projector:{${actor.tenantId}}:workspace:*`,
          clusterSafe: true,
        },
      });

      // Use Redis SCAN to find all workspace keys for the tenant
      const pattern = `workspace-projector:{${actor.tenantId}}:workspace:*`;
      const ids: string[] = [];
      const scanIterator = this.redis.scanStream({
        match: pattern,
        count: 100,
      });

      for await (const keys of scanIterator) {
        for (const key of keys as string[]) {
          // Extract id from key pattern: workspace-projector:{tenantId}:workspace:{ id }
          const keyParts = key.split(':');
          if (keyParts.length === 4) {
            const id = keyParts[3];
            // Check if channel is not soft-deleted
            const deletedAt = await this.redis.hget(key, 'deletedAt');
            if (!deletedAt) {
              ids.push(id);
            }
          }
        }
      }

      // Sort the codes for consistent ordering
      ids.sort((a, b) => a.localeCompare(b));
      // Log query metrics using shared utility
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: ids.length,
          dataQuality: ids.length > 0 ? 'good' : 'empty',
          sampleData: ids.slice(0, 5),
        },
      );

      return ok(ids);
    } catch (error) {
      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'HIGH',
      );

      // Handle and return the classified error using shared utility
      return handleRepositoryError(error);
    }
  }

  /**
   * Find Workspace configuration by Workspace id
   * @param actor - The authenticated user context
   * @param id - The Workspace id to lookup
   * @param options - Optional repository options (correlation ID, timeout, caching, etc.)
   * @returns Result containing Workspace configuration or null if not found
   */
  async findWorkspaceById(
    actor: ActorContext,
    id: string,
    options?: RepositoryOptions,
  ): Promise<Result<Option<WorkspaceReference>, DomainError>> {
    const operation = 'findWorkspaceById';
    const riskLevel = this.assessOperationRisk(operation);
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('workspace-find-by-id');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      riskLevel,
      targetId: id,
      customCorrelationId: !!options?.correlationId,
      source: options?.source,
      requestId: options?.requestId,
      dataSource: 'redis-projector',
    });

    try {
      // Enhanced validation with security logging using shared utilities
      const actorValidation = RepositoryLoggingUtil.validateActorContext(
        this.logger,
        actor,
        logContext,
      );

      if (!actorValidation.ok) return err(actorValidation.error);

      // Guard tenant explicitly
      if (!actor.tenantId) {
        return err(
          RepositoryErrorFactory.validationError(
            'tenantId',
            'Missing tenant id',
          ),
        );
      }

      // Enhanced input validation
      if (!id) {
        Log.warn(this.logger, 'Invalid workspace id provided', {
          ...logContext,
          validationError: 'INVALID_WORKSPACE_ID',
          inputValidation: 'failed',
        });
        return err(
          RepositoryErrorFactory.validationError(
            'Workspace id is required',
            'INVALID_WORKSPACE_ID',
          ),
        );
      }

      RepositoryLoggingUtil.logAuthorizationSuccess(
        this.logger,
        'Workspace lookup',
        logContext,
        {
          dataAccess: 'read',
          targetId: id,
        },
      );

      // Fetch from Redis using cluster-safe key
      const redisKey = this.generateWorkspaceKey(actor.tenantId, id);
      const hashData = await this.redis.hgetall(redisKey);

      if (!hashData || Object.keys(hashData).length === 0) {
        RepositoryLoggingUtil.logQueryMetrics(
          this.logger,
          'Workspace lookup',
          logContext,
          {
            resultCount: 0,
            dataQuality: 'empty',
          },
        );
        return ok(Option.none());
      }

      const workspace = this.parseRedisHashToWorkspace(hashData);
      if (!workspace) {
        return ok(Option.none());
      }

      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        'Workspace lookup',
        logContext,
        {
          resultCount: 1,
          dataQuality: 'good',
          sampleData: {
            id: workspace.id,
            name: workspace.name,
            enabled: workspace.enabled,
          },
        },
      );

      return ok(Option.some(workspace));
    } catch (error) {
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        'Workspace lookup',
        logContext,
        error as Error,
        'HIGH',
      );

      // Handle and return the classified error using shared utility
      return handleRepositoryError(error);
    }
  }

  /**
   * Find Workspace configurations by Workspace Ids
   * @param actor - The authenticated user context
   * @param ids - The Workspace Ids to lookup
   * @param options - Optional repository options (correlation ID, timeout, caching, etc.)
   * @returns Result containing Workspace configurations or empty array if not found
   */
  async findWorkspacesByIds(
    actor: ActorContext,
    ids: string[],
    options?: RepositoryOptions,
  ): Promise<Result<WorkspaceValidationResult, DomainError>> {
    const operation = 'findWorkspacesByIds';
    const riskLevel = this.assessOperationRisk(operation);
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('workspace-validate-codes');

    // Defensive check: ensure ids is actually an array
    // Sometimes we might receive a stringified array due to serialization issues
    let normalizedIds: string[];
    if (Array.isArray(ids)) {
      normalizedIds = ids;
    } else if (typeof ids === 'string') {
      try {
        // Try to parse as JSON array
        const parsed: unknown = JSON.parse(ids);
        if (
          Array.isArray(parsed) &&
          parsed.every((item: unknown) => typeof item === 'string')
        ) {
          normalizedIds = parsed;
        } else {
          // Not a string array, treat original as single string
          normalizedIds = [ids];
        }
      } catch {
        // Not valid JSON, treat as single string
        normalizedIds = [ids];
      }
    } else {
      // Convert to array if it's not already
      normalizedIds = Array.isArray(ids) ? ids : [String(ids)];
    }

    // Early return for empty requests
    if (normalizedIds.length === 0) {
      return ok({ found: [], missing: [] });
    }

    const logContext = this.createLogContext(operation, correlationId, actor, {
      riskLevel,
      requestedCount: normalizedIds.length,
      customCorrelationId: !!options?.correlationId,
      source: options?.source,
      requestId: options?.requestId,
      dataSource: 'redis-projector',
    });

    // Validate actor context with enhanced security logging
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) {
      return validation;
    }

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      {
        queryType: 'fk_validation',
        scope: 'redis_projection',
        requestedIds:
          normalizedIds.length <= 10
            ? normalizedIds
            : normalizedIds.slice(0, 10),
      },
    );

    try {
      Log.debug(this.logger, 'Finding workspaces by ids in Redis', {
        ...logContext,
        queryDetails: {
          scope: 'redis_hash',
          method: 'redis.hmget',
          requestedIds:
            normalizedIds.length <= 5
              ? normalizedIds
              : `${normalizedIds.slice(0, 5).join(', ')}... (${normalizedIds.length} total)`,
          clusterSafe: true,
        },
      });

      const found: WorkspaceReference[] = [];

      // Fetch each workspace by its id from Redis
      for (const id of normalizedIds) {
        const redisKey = this.generateWorkspaceKey(actor.tenantId!, id);
        const hashData = await this.redis.hgetall(redisKey);

        if (hashData && Object.keys(hashData).length > 0) {
          const workspaceReference = this.parseRedisHashToWorkspace(hashData);
          if (workspaceReference) {
            found.push(workspaceReference);
          }
        }
      }

      // Calculate missing ids for FK validation
      const requestedSet = new Set(normalizedIds);
      const foundIds = new Set(found.map((f) => f.id));
      const missing = [...requestedSet].filter((c) => !foundIds.has(c));

      // Log query metrics using shared utility
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: found.length,
          dataQuality: missing.length === 0 ? 'good' : 'partial',
          sampleData: {
            found: found.slice(0, 3).map((c) => c.id),
            missing: missing.slice(0, 3),
            validationStatus:
              missing.length === 0 ? 'all_valid' : 'some_invalid',
          },
        },
      );

      return ok({ found, missing });
    } catch (error) {
      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'HIGH',
      );

      // Handle and return the classified error using shared utility
      return handleRepositoryError(error);
    }
  }
}
