// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Injectable, Inject } from '@nestjs/common';
import { APP_LOGGER, Log, componentLogger, Logger } from 'src/shared/logging';
import { CorrelationUtil } from 'src/shared/utilities/correlation.util';
import { Clock, CLOCK } from 'src/shared/infrastructure/time';
import {
  RepositoryLoggingUtil,
  RepositoryLoggingConfig,
  RepositoryOptions,
} from 'src/shared/infrastructure/repositories';
import { Result, DomainError, err, ok } from 'src/shared/errors';
import { ActorContext } from 'src/shared/application/context';
import { RepositoryErrorFactory } from 'src/shared/domain/errors/repository.error';

import {
  IWorkspaceReader,
  WorkspaceReference,
  WorkspaceValidationResult,
} from '../../application/ports';
import { Option } from 'src/shared/domain/types';
import { workspaceStore } from '../stores/workspace.store';

/**
 * Workspace Reader Repository - Cross-Context Reference Implementation
 *
 * Bounded Context: Notification/Channel
 * Handles workspace reference data lookups for FK validation in the Channel context.
 * Reads from the workspace projection tables to validate workspace references.
 *
 * @domain Notification Context - Channel Workspace Reader Repository
 * @layer Infrastructure
 * @pattern Cross-Context Reference Reader
 */
@Injectable()
export class WorkspaceReaderRepository implements IWorkspaceReader {
  private readonly logger: Logger;
  private readonly loggingConfig: RepositoryLoggingConfig;

  constructor(
    @Inject(APP_LOGGER) baseLogger: Logger,
    @Inject(CLOCK) private readonly clock: Clock,
  ) {
    this.loggingConfig = {
      serviceName: 'ChannelConfigService',
      component: 'WorkspaceReaderRepository',
    };
    this.logger = componentLogger(baseLogger, this.loggingConfig.component);
  }

  /**
   * Helper to create consistent logging context using shared utilities
   */
  private createLogContext(
    operation: string,
    correlationId: string,
    actor: ActorContext,
    additionalContext?: Record<string, unknown>,
  ): Record<string, unknown> {
    return RepositoryLoggingUtil.createLogContext(
      this.loggingConfig,
      this.clock,
      operation,
      correlationId,
      actor,
      additionalContext,
    );
  }

  /**
   * Helper to assess operation risk level using shared utilities
   */
  private assessOperationRisk(operation: string): 'LOW' | 'MEDIUM' | 'HIGH' {
    return RepositoryLoggingUtil.assessOperationRisk(operation);
  }

  /**
   * Find valid Workspace Ids for Workspace configuration
   * @param actor - The authenticated user context
   * @param options - Optional repository options (correlation ID, timeout, etc.)
   * @returns Result containing available Workspace Ids
   */
  async findValidWorkspaceIds(
    actor: ActorContext,
    options?: RepositoryOptions,
  ): Promise<Result<string[], DomainError>> {
    const operation = 'findValidWorkspaceIds';
    const riskLevel = this.assessOperationRisk(operation);
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('workspace-list-ids');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      riskLevel,
      customCorrelationId: !!options?.correlationId,
      source: options?.source,
      requestId: options?.requestId,
      dataSource: 'in-memory-projector',
    });

    // Validate actor context with enhanced security logging
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) return Promise.resolve(err(validation.error));

    // Guard tenant explicitly
    if (!actor.tenantId) {
      return Promise.resolve(
        err(
          RepositoryErrorFactory.validationError(
            'tenantId',
            'Missing tenant id',
          ),
        ),
      );
    }

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      { queryType: 'reference_lookup' },
    );

    try {
      Log.debug(this.logger, 'Finding valid workspace ids in shared store', {
        ...logContext,
        queryDetails: {
          scope: 'shared_workspace_store',
          method: 'workspaceStore.getAllValues',
        },
      });

      // Get all workspace projections from shared workspace store
      const allEntries = workspaceStore.getAll();

      // Filter entries for this tenant and extract id values from workspaces
      const ids: string[] = allEntries
        .filter(([key]) => key.startsWith(`${actor.tenantId}:`))
        .map(([, workspace]) => workspace)
        .map((workspace) => workspace.id)
        .sort((a, b) => a.localeCompare(b));

      // Log query metrics using shared utility
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: ids.length,
          dataQuality: ids.length > 0 ? 'good' : 'empty',
          sampleData: ids.slice(0, 5),
        },
      );

      return Promise.resolve(ok(ids));
    } catch (error) {
      const e = error as Error;

      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        e,
        'HIGH',
      );

      return Promise.resolve(
        err(RepositoryErrorFactory.connectionError(e.message)),
      );
    }
  }

  /**
   * Find Workspace configuration by Workspace id
   * @param actor - The authenticated user context
   * @param id - The Workspace id to lookup
   * @param options - Optional repository options (correlation ID, timeout, caching, etc.)
   * @returns Result containing Workspace configuration or null if not found
   */
  async findWorkspaceById(
    actor: ActorContext,
    id: string,
    options?: RepositoryOptions,
  ): Promise<Result<Option<WorkspaceReference>, DomainError>> {
    const operation = 'findWorkspaceById';
    const riskLevel = this.assessOperationRisk(operation);
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('workspace-find-by-id');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      riskLevel,
      targetId: id,
      customCorrelationId: !!options?.correlationId,
      source: options?.source,
      requestId: options?.requestId,
      dataSource: 'in-memory-projector',
    });

    try {
      // Enhanced validation with security logging using shared utilities
      const actorValidation = RepositoryLoggingUtil.validateActorContext(
        this.logger,
        actor,
        logContext,
      );

      if (!actorValidation.ok)
        return Promise.resolve(err(actorValidation.error));

      // Guard tenant explicitly
      if (!actor.tenantId) {
        return Promise.resolve(
          err(
            RepositoryErrorFactory.validationError(
              'tenantId',
              'Missing tenant id',
            ),
          ),
        );
      }

      // Enhanced input validation
      if (!id) {
        Log.warn(this.logger, 'Invalid workspace id provided', {
          ...logContext,
          validationError: 'INVALID_WORKSPACE_ID',
          inputValidation: 'failed',
        });
        return Promise.resolve(
          err(
            RepositoryErrorFactory.validationError(
              'Workspace id is required',
              'INVALID_WORKSPACE_ID',
            ),
          ),
        );
      }

      RepositoryLoggingUtil.logAuthorizationSuccess(
        this.logger,
        'Workspace lookup',
        logContext,
        {
          dataAccess: 'read',
          targetId: id,
        },
      );

      // Fetch from in-memory store using tenant and identifier
      const projection = workspaceStore.get(actor.tenantId, id.toString());

      if (!projection) {
        RepositoryLoggingUtil.logQueryMetrics(
          this.logger,
          'Workspace lookup',
          logContext,
          {
            resultCount: 0,
            dataQuality: 'empty',
          },
        );
        return Promise.resolve(ok(Option.none()));
      }

      // Map projection to WorkspaceReference
      const workspace: WorkspaceReference = {
        id: projection.id,
        name: projection.name,
        botToken: projection.botToken,
        signingSecret: projection.signingSecret,
        appId: projection.appId,
        botUserId: projection.botUserId,
        defaultChannelId: projection.defaultChannelId,
        enabled: projection.enabled,
      };

      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        'Workspace lookup',
        logContext,
        {
          resultCount: 1,
          dataQuality: 'good',
          sampleData: {
            id: workspace.id,
            name: workspace.name,
            enabled: workspace.enabled,
          },
        },
      );

      return Promise.resolve(ok(Option.some(workspace)));
    } catch (error) {
      const e = error as Error;

      RepositoryLoggingUtil.logOperationError(
        this.logger,
        'Workspace lookup',
        logContext,
        e,
        'HIGH',
      );

      return Promise.resolve(
        err(RepositoryErrorFactory.connectionError(e.message)),
      );
    }
  }

  /**
   * Find Workspace configurations by Workspace Ids
   * @param actor - The authenticated user context
   * @param ids - The Workspace Ids to lookup
   * @param options - Optional repository options (correlation ID, timeout, caching, etc.)
   * @returns Result containing Workspace configurations or empty array if not found
   */
  async findWorkspacesByIds(
    actor: ActorContext,
    ids: string[],
    options?: RepositoryOptions,
  ): Promise<Result<WorkspaceValidationResult, DomainError>> {
    const operation = 'findWorkspacesByIds';
    const riskLevel = this.assessOperationRisk(operation);
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('workspace-validate-codes');

    // Early return for empty requests
    if (ids.length === 0) {
      return Promise.resolve(ok({ found: [], missing: [] }));
    }

    const logContext = this.createLogContext(operation, correlationId, actor, {
      riskLevel,
      requestedCount: ids.length,
      customCorrelationId: !!options?.correlationId,
      source: options?.source,
      requestId: options?.requestId,
      dataSource: 'in-memory-projector',
    });

    // Validate actor context with enhanced security logging
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) {
      return Promise.resolve(validation);
    }

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      {
        queryType: 'fk_validation',
        scope: 'workspace_references',
        requestedIds: ids.length <= 10 ? ids : ids.slice(0, 10),
      },
    );

    try {
      Log.debug(this.logger, 'Finding workspaces by ids in shared store', {
        ...logContext,
        queryDetails: {
          scope: 'shared_workspace_store',
          method: 'workspaceStore.get',
          requestedIds:
            ids.length <= 5
              ? ids
              : `${ids.slice(0, 5).join(', ')}... (${ids.length} total)`,
        },
      });

      // Get workspace projections from shared workspace store by individual id lookups
      const found: WorkspaceReference[] = [];
      for (const id of ids) {
        const projection = workspaceStore.get(actor.tenantId!, id.toString());
        if (projection) {
          // Map projection to WorkspaceReference
          const workspaceReference: WorkspaceReference = {
            id: projection.id,
            name: projection.name,
            botToken: projection.botToken,
            signingSecret: projection.signingSecret,
            appId: projection.appId,
            botUserId: projection.botUserId,
            defaultChannelId: projection.defaultChannelId,
            enabled: projection.enabled,
          };
          found.push(workspaceReference);
        }
      }

      // Calculate missing ids for FK validation
      const requestedSet = new Set(ids);
      const foundIds = new Set(found.map((f) => f.id));
      const missing = [...requestedSet].filter((c) => !foundIds.has(c));

      // Log query metrics using shared utility
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: found.length,
          dataQuality: missing.length === 0 ? 'good' : 'partial',
          sampleData: {
            found: found.slice(0, 3).map((c) => c.id),
            missing: missing.slice(0, 3),
            validationStatus:
              missing.length === 0 ? 'all_valid' : 'some_invalid',
          },
        },
      );

      return Promise.resolve(ok({ found, missing }));
    } catch (error) {
      const e = error as Error;

      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        e,
        'HIGH',
      );

      return Promise.resolve(
        err(RepositoryErrorFactory.connectionError(e.message)),
      );
    }
  }
}
