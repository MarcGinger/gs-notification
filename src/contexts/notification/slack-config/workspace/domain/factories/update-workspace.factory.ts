// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { DomainError, Result, err, ok, withContext } from 'src/shared/errors';
import { Clock } from 'src/shared/domain/clock';
import { EventMetadata } from 'src/shared/domain/events';
import { WorkspaceAggregate } from '../aggregates';
import { WorkspaceEntity } from '../entities';
import { UpdateWorkspaceProps, WorkspaceSnapshotProps } from '../props';
import { ValidatedWorkspaceUpdateFields } from '../types';

/**
 * Update Workspace Aggregate Factory
 *
 * Handles the complete update flow for Workspace aggregates:
 * 1. Loads existing aggregate from snapshot
 * 2. Validates update properties and creates value objects
 * 3. Applies updates with proper business rule enforcement
 * 4. Returns updated aggregate ready for persistence
 *
 * This factory provides:
 * - Consistent update pattern matching create operations
 * - Centralized validation and business logic
 * - Efficient batch updates vs field-by-field
 * - Proper error context and logging integration
 */
export function updateWorkspaceAggregateFromSnapshot(
  existingSnapshot: WorkspaceSnapshotProps,
  updateProps: UpdateWorkspaceProps,
  metadata: EventMetadata,
  clock: Clock,
): Result<WorkspaceAggregate, DomainError> {
  // 1. Reconstitute existing aggregate
  const entityResult = WorkspaceEntity.fromSnapshot(existingSnapshot);
  if (!entityResult.ok) {
    return err(
      withContext(entityResult.error, {
        operation: 'update_workspace_reconstitute',
        correlationId: metadata.correlationId,
        userId: metadata.actor?.userId,
      }),
    );
  }

  const existingAggregate = WorkspaceAggregate.reconstitute(
    entityResult.value,
    clock,
    metadata,
  );

  // 2. Validate and apply updates for each provided field
  const validatedFields: ValidatedWorkspaceUpdateFields = {};

  // 3. Apply all validated changes in single atomic operation
  const batchUpdateResult = existingAggregate.updateBatch(validatedFields);
  if (!batchUpdateResult.ok) {
    return err(
      withContext(batchUpdateResult.error, {
        operation: 'update_product_batch_application',
        correlationId: metadata.correlationId,
        userId: metadata.actor?.userId,
        fieldsUpdated: Object.keys(validatedFields),
      }),
    );
  }

  return ok(existingAggregate);
}
