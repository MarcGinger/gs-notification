// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { EntityIdBase } from 'src/shared/domain/entities';
import { Result, ok, err, DomainError } from 'src/shared/errors';
import { WorkspaceSnapshotProps } from '../props';
import { WorkspaceDomainState } from '../state';
import { WorkspaceErrors } from '../errors/workspace.errors';
import {
  WorkspaceAppId,
  WorkspaceBotToken,
  WorkspaceBotUserId,
  WorkspaceCode,
  WorkspaceCreatedAt,
  WorkspaceUpdatedAt,
  WorkspaceVersion,
  WorkspaceDefaultChannelId,
  WorkspaceEnabled,
  WorkspaceName,
  WorkspaceSigningSecret,
} from '../value-objects';

/**
 * Domain Entity: Workspace
 *
 * Represents the core Workspace entity in the notification domain.
 * Encapsulates workspace data, identity, and basic entity behavior.
 *
 * This entity follows DDD principles:
 * - Identity: Code as unique identifier
 * - Immutability: Changes create new instances
 * - Encapsulation: Private state with controlled access
 * - Business validation: Domain rules enforced
 *
 * @domain Notification Context - Workspace Entity
 * @layer Domain Entities
 */

/**
 * Workspace Entity
 *
 * Core domain entity representing a workspace in the notification.
 * Handles workspace identity, validation, and state management.
 */
export class WorkspaceEntity extends EntityIdBase<
  WorkspaceDomainState,
  WorkspaceCode
> {
  private static clock: { now: () => Date } = { now: () => new Date() };

  public static setClock(c: { now: () => Date }) {
    this.clock = c;
  }

  /**
   * Helper method to create updatedAt VO from date
   */
  private static createUpdatedAt(
    date?: Date,
  ): Result<WorkspaceUpdatedAt, DomainError> {
    const targetDate = date || WorkspaceEntity.clock.now();
    const result = WorkspaceUpdatedAt.from(targetDate);
    if (!result.ok) {
      return err(result.error);
    }
    return ok(result.value);
  }

  /**
   * Helper method to create version VO from number
   */
  private static createVersion(
    versionNumber?: number,
    currentVersion?: WorkspaceVersion,
  ): Result<WorkspaceVersion, DomainError> {
    const targetVersion = versionNumber ?? currentVersion?.value ?? 1;
    const result = WorkspaceVersion.from(targetVersion);
    if (!result.ok) {
      return err(result.error);
    }
    return ok(result.value);
  }

  /**
   * Helper method to create updated entity with common logic
   */
  private createUpdatedEntity(
    fieldUpdates: Partial<WorkspaceDomainState>,
    updatedAt?: Date,
    version?: number,
  ): Result<WorkspaceEntity, DomainError> {
    const updatedAtResult = WorkspaceEntity.createUpdatedAt(updatedAt);
    if (!updatedAtResult.ok) {
      return err(updatedAtResult.error);
    }

    const versionResult = WorkspaceEntity.createVersion(
      version,
      this.props.version,
    );
    if (!versionResult.ok) {
      return err(versionResult.error);
    }

    const updatedProps: WorkspaceDomainState = {
      ...this.props,
      ...fieldUpdates,
      updatedAt: updatedAtResult.value,
      version: versionResult.value,
    };

    return WorkspaceEntity.create(updatedProps);
  }

  private constructor(props: WorkspaceDomainState) {
    super(props, props.code);
  }

  /**
   * Factory method to create a new workspace entity
   *
   * @param props - Workspace properties
   * @returns Result containing WorkspaceEntity or DomainError
   */
  public static create(
    props: WorkspaceDomainState,
  ): Result<WorkspaceEntity, DomainError> {
    // Validate required properties
    const validationResult = WorkspaceEntity.validate(props);
    if (validationResult.ok === false) {
      return err(validationResult.error);
    }

    return ok(new WorkspaceEntity(props));
  }

  /**
   * Factory method to reconstitute a workspace entity from persistence
   *
   * @param props - Workspace properties from database
   * @returns WorkspaceEntity instance
   */
  public static reconstitute(props: WorkspaceDomainState): WorkspaceEntity {
    return new WorkspaceEntity(props);
  }

  /**
   * Factory method to reconstitute entity from snapshot
   *
   * @param snapshot - Workspace snapshot properties
   * @returns Result containing WorkspaceEntity or DomainError
   */
  public static fromSnapshot(
    snapshot: WorkspaceSnapshotProps,
  ): Result<WorkspaceEntity, DomainError> {
    const codeResult = WorkspaceCode.from(snapshot.code);
    if (!codeResult.ok) {
      return err(codeResult.error);
    }
    const nameResult = WorkspaceName.from(snapshot.name);
    if (!nameResult.ok) {
      return err(nameResult.error);
    }
    const botTokenResult = WorkspaceBotToken.from(snapshot.botToken);
    if (!botTokenResult.ok) {
      return err(botTokenResult.error);
    }
    const signingSecretResult = WorkspaceSigningSecret.from(
      snapshot.signingSecret,
    );
    if (!signingSecretResult.ok) {
      return err(signingSecretResult.error);
    }
    const appIdResult = WorkspaceAppId.from(snapshot.appId);
    if (!appIdResult.ok) {
      return err(appIdResult.error);
    }
    const botUserIdResult = WorkspaceBotUserId.from(snapshot.botUserId);
    if (!botUserIdResult.ok) {
      return err(botUserIdResult.error);
    }
    const defaultChannelIdResult = WorkspaceDefaultChannelId.from(
      snapshot.defaultChannelId,
    );
    if (!defaultChannelIdResult.ok) {
      return err(defaultChannelIdResult.error);
    }
    const enabledResult = WorkspaceEnabled.from(snapshot.enabled);
    if (!enabledResult.ok) {
      return err(enabledResult.error);
    }
    const createdAtResult = WorkspaceCreatedAt.from(snapshot.createdAt);
    if (!createdAtResult.ok) {
      return err(createdAtResult.error);
    }

    const updatedAtResult = WorkspaceUpdatedAt.from(snapshot.updatedAt);
    if (!updatedAtResult.ok) {
      return err(updatedAtResult.error);
    }

    const versionResult = WorkspaceVersion.from(snapshot.version);
    if (!versionResult.ok) {
      return err(versionResult.error);
    }

    const props: WorkspaceDomainState = {
      code: codeResult.value,
      name: nameResult.value,
      botToken: botTokenResult.value,
      signingSecret: signingSecretResult.value,
      appId: appIdResult.value,
      botUserId: botUserIdResult.value,
      defaultChannelId: defaultChannelIdResult.value,
      enabled: enabledResult.value,
      createdAt: createdAtResult.value,
      updatedAt: updatedAtResult.value,
      version: versionResult.value,
    };

    return WorkspaceEntity.create(props);
  }

  /**
   * Validates workspace entity properties
   *
   * @param props - Properties to validate
   * @returns Validation result
   */
  private static validate(
    props: WorkspaceDomainState,
  ): Result<void, DomainError> {
    // Basic validation
    if (!props.code) {
      return err(WorkspaceErrors.INVALID_CODE_DATA);
    }
    if (!props.name) {
      return err(WorkspaceErrors.INVALID_NAME_DATA);
    }
    if (!props.enabled) {
      return err(WorkspaceErrors.INVALID_ENABLED_DATA);
    }

    return ok(undefined);
  }

  // ======================
  // Getters (Public API)
  // ======================

  public get code(): WorkspaceCode {
    return this.props.code;
  }

  public get name(): WorkspaceName {
    return this.props.name;
  }

  public get botToken(): WorkspaceBotToken | undefined {
    return this.props.botToken;
  }

  public get signingSecret(): WorkspaceSigningSecret | undefined {
    return this.props.signingSecret;
  }

  public get appId(): WorkspaceAppId | undefined {
    return this.props.appId;
  }

  public get botUserId(): WorkspaceBotUserId | undefined {
    return this.props.botUserId;
  }

  public get defaultChannelId(): WorkspaceDefaultChannelId | undefined {
    return this.props.defaultChannelId;
  }

  public get enabled(): WorkspaceEnabled {
    return this.props.enabled;
  }

  public get createdAt(): WorkspaceCreatedAt {
    return this.props.createdAt;
  }

  public get updatedAt(): WorkspaceUpdatedAt {
    return this.props.updatedAt;
  }

  public get version(): WorkspaceVersion {
    return this.props.version;
  }

  // ======================
  // Simple Update Methods (No Business Logic)
  // ======================

  /**
   * Creates a new entity with updated name (pure state transition)
   *
   * @param name - New name value
   * @param updatedAt - Optional timestamp (uses clock if not provided)
   * @returns Result<WorkspaceEntity, DomainError>
   */
  public withName(
    name: WorkspaceName,
    updatedAt?: Date,
    version?: number,
  ): Result<WorkspaceEntity, DomainError> {
    return this.createUpdatedEntity({ name }, updatedAt, version);
  }

  /**
   * Creates a new entity with updated botToken (pure state transition)
   *
   * @param botToken - New bot_token value
   * @param updatedAt - Optional timestamp (uses clock if not provided)
   * @returns Result<WorkspaceEntity, DomainError>
   */
  public withBotToken(
    botToken: WorkspaceBotToken,
    updatedAt?: Date,
    version?: number,
  ): Result<WorkspaceEntity, DomainError> {
    return this.createUpdatedEntity({ botToken }, updatedAt, version);
  }

  /**
   * Creates a new entity with updated signingSecret (pure state transition)
   *
   * @param signingSecret - New signing_secret value
   * @param updatedAt - Optional timestamp (uses clock if not provided)
   * @returns Result<WorkspaceEntity, DomainError>
   */
  public withSigningSecret(
    signingSecret: WorkspaceSigningSecret,
    updatedAt?: Date,
    version?: number,
  ): Result<WorkspaceEntity, DomainError> {
    return this.createUpdatedEntity({ signingSecret }, updatedAt, version);
  }

  /**
   * Creates a new entity with updated appId (pure state transition)
   *
   * @param appId - New app_id value
   * @param updatedAt - Optional timestamp (uses clock if not provided)
   * @returns Result<WorkspaceEntity, DomainError>
   */
  public withAppId(
    appId: WorkspaceAppId,
    updatedAt?: Date,
    version?: number,
  ): Result<WorkspaceEntity, DomainError> {
    return this.createUpdatedEntity({ appId }, updatedAt, version);
  }

  /**
   * Creates a new entity with updated botUserId (pure state transition)
   *
   * @param botUserId - New bot_user_id value
   * @param updatedAt - Optional timestamp (uses clock if not provided)
   * @returns Result<WorkspaceEntity, DomainError>
   */
  public withBotUserId(
    botUserId: WorkspaceBotUserId,
    updatedAt?: Date,
    version?: number,
  ): Result<WorkspaceEntity, DomainError> {
    return this.createUpdatedEntity({ botUserId }, updatedAt, version);
  }

  /**
   * Creates a new entity with updated defaultChannelId (pure state transition)
   *
   * @param defaultChannelId - New default_channel_id value
   * @param updatedAt - Optional timestamp (uses clock if not provided)
   * @returns Result<WorkspaceEntity, DomainError>
   */
  public withDefaultChannelId(
    defaultChannelId: WorkspaceDefaultChannelId,
    updatedAt?: Date,
    version?: number,
  ): Result<WorkspaceEntity, DomainError> {
    return this.createUpdatedEntity({ defaultChannelId }, updatedAt, version);
  }

  /**
   * Creates a new entity with updated enabled (pure state transition)
   *
   * @param enabled - New enabled value
   * @param updatedAt - Optional timestamp (uses clock if not provided)
   * @returns Result<WorkspaceEntity, DomainError>
   */
  public withEnabled(
    enabled: WorkspaceEnabled,
    updatedAt?: Date,
    version?: number,
  ): Result<WorkspaceEntity, DomainError> {
    return this.createUpdatedEntity({ enabled }, updatedAt, version);
  }

  // ======================
  // Query Methods
  // ======================

  /**
   * Checks if two workspaces are the same entity
   *
   * @param other - Other workspace to compare
   */
  public sameAs(other: WorkspaceEntity): boolean {
    return this.props.code.equals(other.props.code);
  }

  /**
   * Gets a snapshot of current entity state for serialization
   */
  public toSnapshot(): WorkspaceSnapshotProps {
    return {
      code: this.props.code.value,
      name: this.props.name.value,
      botToken: this.props.botToken?.value,
      signingSecret: this.props.signingSecret?.value,
      appId: this.props.appId?.value,
      botUserId: this.props.botUserId?.value,
      defaultChannelId: this.props.defaultChannelId?.value,
      enabled: this.props.enabled.value,
      createdAt: this.props.createdAt.value,
      updatedAt: this.props.updatedAt.value,
      version: this.props.version.value,
    };
  }

  /**
   * Gets the current domain state with value objects
   *
   * Provides access to the rich domain state for application layer
   * without requiring infrastructure mappers. Maintains clean architecture.
   *
   * @returns Current domain state with value objects
   */
  public getDomainState(): WorkspaceDomainState {
    return this.props;
  }
}
