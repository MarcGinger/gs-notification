// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { EntityIdBase } from 'src/shared/domain/entities';
import { Result, ok, err, DomainError } from 'src/shared/errors';
import { WorkspaceSnapshotProps } from '../props';
import { WorkspaceDomainState } from '../state';
import { WorkspaceErrors } from '../errors/workspace.errors';
import {
  WorkspaceCreatedAt,
  WorkspaceUpdatedAt,
  WorkspaceVersion,
  WorkspaceId,
} from '../value-objects';

/**
 * Domain Entity: Workspace
 *
 * Represents the core Workspace entity in the notification domain.
 * Encapsulates workspace data, identity, and basic entity behavior.
 *
 * This entity follows DDD principles:
 * - Identity: Id as unique identifier
 * - Immutability: Changes create new instances
 * - Encapsulation: Private state with controlled access
 * - Business validation: Domain rules enforced
 *
 * @domain Notification Context - Workspace Entity
 * @layer Domain Entities
 */

/**
 * Workspace Entity
 *
 * Core domain entity representing a workspace in the notification.
 * Handles workspace identity, validation, and state management.
 */
export class WorkspaceEntity extends EntityIdBase<
  WorkspaceDomainState,
  WorkspaceId
> {
  private static clock: { now: () => Date } = { now: () => new Date() };

  public static setClock(c: { now: () => Date }) {
    this.clock = c;
  }

  /**
   * Helper method to create updatedAt VO from date
   */
  private static createUpdatedAt(
    date?: Date,
  ): Result<WorkspaceUpdatedAt, DomainError> {
    const targetDate = date || WorkspaceEntity.clock.now();
    const result = WorkspaceUpdatedAt.from(targetDate);
    if (!result.ok) {
      return err(result.error);
    }
    return ok(result.value);
  }

  /**
   * Helper method to create version VO from number
   */
  private static createVersion(
    versionNumber?: number,
    currentVersion?: WorkspaceVersion,
  ): Result<WorkspaceVersion, DomainError> {
    const targetVersion = versionNumber ?? currentVersion?.value ?? 1;
    const result = WorkspaceVersion.from(targetVersion);
    if (!result.ok) {
      return err(result.error);
    }
    return ok(result.value);
  }

  /**
   * Helper method to create updated entity with common logic
   */
  private createUpdatedEntity(
    fieldUpdates: Partial<WorkspaceDomainState>,
    updatedAt?: Date,
    version?: number,
  ): Result<WorkspaceEntity, DomainError> {
    const updatedAtResult = WorkspaceEntity.createUpdatedAt(updatedAt);
    if (!updatedAtResult.ok) {
      return err(updatedAtResult.error);
    }

    const versionResult = WorkspaceEntity.createVersion(
      version,
      this.props.version,
    );
    if (!versionResult.ok) {
      return err(versionResult.error);
    }

    const updatedProps: WorkspaceDomainState = {
      ...this.props,
      ...fieldUpdates,
      updatedAt: updatedAtResult.value,
      version: versionResult.value,
    };

    return WorkspaceEntity.create(updatedProps);
  }

  private constructor(props: WorkspaceDomainState) {
    super(props, props.id);
  }

  /**
   * Factory method to create a new workspace entity
   *
   * @param props - Workspace properties
   * @returns Result containing WorkspaceEntity or DomainError
   */
  public static create(
    props: WorkspaceDomainState,
  ): Result<WorkspaceEntity, DomainError> {
    // Validate required properties
    const validationResult = WorkspaceEntity.validate(props);
    if (validationResult.ok === false) {
      return err(validationResult.error);
    }

    return ok(new WorkspaceEntity(props));
  }

  /**
   * Factory method to reconstitute a workspace entity from persistence
   *
   * @param props - Workspace properties from database
   * @returns WorkspaceEntity instance
   */
  public static reconstitute(props: WorkspaceDomainState): WorkspaceEntity {
    return new WorkspaceEntity(props);
  }

  /**
   * Factory method to reconstitute entity from snapshot
   *
   * @param snapshot - Workspace snapshot properties
   * @returns Result containing WorkspaceEntity or DomainError
   */
  public static fromSnapshot(
    snapshot: WorkspaceSnapshotProps,
  ): Result<WorkspaceEntity, DomainError> {
    const idResult = WorkspaceId.from(snapshot.id);
    if (!idResult.ok) {
      return err(idResult.error);
    }
    const createdAtResult = WorkspaceCreatedAt.from(snapshot.createdAt);
    if (!createdAtResult.ok) {
      return err(createdAtResult.error);
    }

    const updatedAtResult = WorkspaceUpdatedAt.from(snapshot.updatedAt);
    if (!updatedAtResult.ok) {
      return err(updatedAtResult.error);
    }

    const versionResult = WorkspaceVersion.from(snapshot.version);
    if (!versionResult.ok) {
      return err(versionResult.error);
    }

    const props: WorkspaceDomainState = {
      id: idResult.value,
      createdAt: createdAtResult.value,
      updatedAt: updatedAtResult.value,
      version: versionResult.value,
    };

    return WorkspaceEntity.create(props);
  }

  /**
   * Validates workspace entity properties
   *
   * @param props - Properties to validate
   * @returns Validation result
   */
  private static validate(
    props: WorkspaceDomainState,
  ): Result<void, DomainError> {
    // Basic validation
    if (!props.id) {
      return err(WorkspaceErrors.INVALID_ID_DATA);
    }

    return ok(undefined);
  }

  // ======================
  // Getters (Public API)
  // ======================

  public get id(): WorkspaceId {
    return this.props.id;
  }

  public get createdAt(): WorkspaceCreatedAt {
    return this.props.createdAt;
  }

  public get updatedAt(): WorkspaceUpdatedAt {
    return this.props.updatedAt;
  }

  public get version(): WorkspaceVersion {
    return this.props.version;
  }

  // ======================
  // Simple Update Methods (No Business Logic)
  // ======================

  // ======================
  // Query Methods
  // ======================

  /**
   * Checks if two workspaces are the same entity
   *
   * @param other - Other workspace to compare
   */
  public sameAs(other: WorkspaceEntity): boolean {
    return this.props.id.equals(other.props.id);
  }

  /**
   * Gets a snapshot of current entity state for serialization
   */
  public toSnapshot(): WorkspaceSnapshotProps {
    return {
      id: this.props.id.value,
      createdAt: this.props.createdAt.value,
      updatedAt: this.props.updatedAt.value,
      version: this.props.version.value,
    };
  }

  /**
   * Gets the current domain state with value objects
   *
   * Provides access to the rich domain state for application layer
   * without requiring infrastructure mappers. Maintains clean architecture.
   *
   * @returns Current domain state with value objects
   */
  public getDomainState(): WorkspaceDomainState {
    return this.props;
  }
}
