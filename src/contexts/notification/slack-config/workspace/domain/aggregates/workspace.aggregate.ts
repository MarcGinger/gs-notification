// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import {
  AggregateRootBase,
  compareField,
  compareComplexField,
} from 'src/shared/domain/aggregates';
import { DomainEvent, EventMetadata } from 'src/shared/domain/events';
import { DomainError, Result, ok, err } from 'src/shared/errors';
import { Clock } from 'src/shared/domain/clock';
import { WorkspaceEntity } from '../entities';
import { WorkspaceSnapshotProps } from '../props';
import { ValidatedWorkspaceUpdateFields } from '../types';
import {
  WorkspaceId,
  createWorkspaceCreatedAt,
  createWorkspaceUpdatedAt,
  createdAtNow,
  updatedAtNow,
  validateMonotonicTime,
  bumpVersion,
  initialVersion,
  createWorkspaceVersion,
  WorkspaceVersion,
} from '../value-objects';
import {
  WorkspaceCreatedEvent,
  WorkspaceUpdatedEvent,
  WorkspaceChangeSet,
} from '../events';
import { WorkspaceErrors } from '../errors';
import { WorkspaceDomainState } from '../state';
/**
 * Domain Aggregate Root: Workspace
 *
 * Represents the Workspace aggregate root in the notification domain.
 * Encapsulates workspace business logic, state management, and domain invariants.
 *
 * This aggregate follows DDD principles:
 * - Aggregate Root: Central entity that controls access to the aggregate
 * - Consistency Boundary: Ensures all business rules are enforced
 * - Domain Events: Publishes events for state changes
 * - Encapsulation: Private state with controlled access through behavior
 *
 * @domain Notification Context - Workspace Aggregate
 * @layer Domain Aggregates
 */

/**
 * Workspace Aggregate Root
 *
 * Central aggregate root that coordinates workspace business operations.
 * Manages consistency across the aggregate boundary and publishes domain events.
 */
export class WorkspaceAggregate extends AggregateRootBase {
  private _entity: WorkspaceEntity;
  private readonly clock: Clock;
  private readonly eventMetadata: EventMetadata;

  private constructor(
    entity: WorkspaceEntity,
    clock: Clock,
    eventMetadata: EventMetadata,
  ) {
    super();
    this._entity = entity;
    this.clock = clock;
    this.eventMetadata = eventMetadata;
  }

  /**
   * Factory method to create a new Workspace aggregate
   *
   * @param props - Workspace entity properties (should include createdAt, version)
   * @param clock - Clock instance for time operations
   * @param eventMetadata - Event metadata for domain events
   * @returns Result containing WorkspaceAggregate or DomainError
   */
  public static create(
    props: WorkspaceDomainState,
    clock: Clock,
    eventMetadata: EventMetadata,
  ): Result<WorkspaceAggregate, DomainError> {
    // Create timestamp VOs for lifecycle fields using Clock injection
    const createdAtResult = props.createdAt
      ? createWorkspaceCreatedAt(props.createdAt.value) // Extract Date from existing VO
      : createdAtNow(clock);

    if (!createdAtResult.ok) {
      return err(createdAtResult.error);
    }

    const updatedAtResult = props.updatedAt
      ? createWorkspaceUpdatedAt(props.updatedAt.value) // Extract Date from existing VO
      : updatedAtNow(clock);

    if (!updatedAtResult.ok) {
      return err(updatedAtResult.error);
    }

    // Validate monotonic time constraint
    const monotonicTimeResult = validateMonotonicTime(
      createdAtResult.value,
      updatedAtResult.value,
    );
    if (!monotonicTimeResult.ok) {
      return err(monotonicTimeResult.error);
    }

    // Create version VO for lifecycle management
    const versionResult =
      props.version !== undefined
        ? WorkspaceVersion.create(props.version.value) // Extract number from existing VO
        : initialVersion();

    if (!versionResult.ok) {
      return err(versionResult.error);
    }

    // Ensure props have required lifecycle fields with VOs for proper domain state
    const entityProps: WorkspaceDomainState = {
      ...props,
      createdAt: createdAtResult.value, // Keep as VO
      updatedAt: updatedAtResult.value, // Keep as VO
      version: versionResult.value, // Keep as VO
    };

    // Create the entity first
    const entityResult = WorkspaceEntity.create(entityProps);
    if (!entityResult.ok) {
      return err(entityResult.error);
    }

    // Create the aggregate
    const aggregate = new WorkspaceAggregate(
      entityResult.value,
      clock,
      eventMetadata,
    );

    // Create typed WorkspaceCreatedEvent with only business data
    const createdEvent = WorkspaceCreatedEvent.create({
      id: entityProps.id.value,
    });

    // Apply as domain event with clean business data
    const domainEvent: DomainEvent = {
      type: createdEvent.eventType,
      version: Number(createdEvent.eventVersion),
      occurredAt: clock.now(),
      aggregateId: entityProps.id.value,
      aggregateType: 'Workspace',
      data: createdEvent.payload,
      metadata: eventMetadata,
    };

    aggregate.apply(domainEvent);

    return ok(aggregate);
  }

  /**
   * Factory method to reconstitute aggregate from persistence
   *
   * @param entity - Reconstituted entity
   * @param clock - Clock instance
   * @param eventMetadata - Event metadata for domain events
   * @returns WorkspaceAggregate
   */
  public static reconstitute(
    entity: WorkspaceEntity,
    clock: Clock,
    eventMetadata: EventMetadata,
  ): WorkspaceAggregate {
    const aggregate = new WorkspaceAggregate(entity, clock, eventMetadata);
    // Set version based on entity state for proper aggregate versioning
    aggregate._version = entity.version.value;
    return aggregate;
  }
  /**
   * Event handler for domain events
   * Updates aggregate state based on events for proper rehydration
   */
  protected when(event: DomainEvent): void {
    switch (event.type) {
      case 'WorkspaceCreated.v1': {
        const d = event.data as {
          id: string;
        };

        const entityResult = WorkspaceEntity.fromSnapshot({
          id: d.id,
          createdAt: event.occurredAt, // Use envelope timestamp
          updatedAt: event.occurredAt, // Use envelope timestamp
          version: 1, // First version
        });
        if (entityResult.ok) {
          this._entity = entityResult.value;
        }
        break;
      }
      case 'WorkspaceUpdated': {
        const d = event.data as {
          after: WorkspaceSnapshotProps;
          updatedAt: Date;
          version: number;
        };
        const entityResult = WorkspaceEntity.fromSnapshot(d.after);
        if (entityResult.ok) {
          this._entity = entityResult.value;
        }
        break;
      }
      case 'WorkspaceDeleted': {
        // Optional: add a flag to track deletion state
        // this._isDeleted = true;
        break;
      }
      default:
        // Unknown event type - log or handle gracefully
        break;
    }
  }

  /**
   * Apply snapshot to restore aggregate state
   */
  protected applySnapshot(
    snapshot: WorkspaceSnapshotProps,
  ): Result<void, DomainError> {
    // Use the entity's fromSnapshot method to handle all VO creation and validation
    const entityResult = WorkspaceEntity.fromSnapshot(snapshot);

    if (!entityResult.ok) {
      return err({
        code: 'WORKSPACE.SNAPSHOT_APPLICATION_FAILED',
        title: 'Snapshot Application Failed',
        detail: 'Failed to apply snapshot due to invalid data',
        category: 'domain',
        retryable: false,
        context: {
          originalError: entityResult.error,
          snapshotCode: snapshot.id,
        },
      });
    }

    // Entity is valid and fully reconstituted
    this._entity = entityResult.value;
    return ok(undefined);
  }

  /**
   * Create snapshot of current aggregate state
   */
  public createSnapshot(): WorkspaceSnapshotProps {
    return this._entity.toSnapshot();
  }

  /**
   * Get current domain state for application layer
   *
   * This method provides access to the rich domain state without
   * requiring the application layer to depend on infrastructure mappers.
   * Maintains clean architecture by keeping dependencies pointing inward.
   *
   * @returns Current domain state with value objects
   */
  public toDomainState(): WorkspaceDomainState {
    return this._entity.getDomainState();
  }

  // ======================
  // Entity Access
  // ======================

  /**
   * Get the aggregate ID (required for aggregate identity)
   */
  public get id(): WorkspaceId {
    return this._entity.id;
  }

  /**
   * Get the underlying entity for data access
   * Use this for all data queries and getter access
   */
  public get entity(): WorkspaceEntity {
    return this._entity;
  }

  // ======================
  // Private Helpers
  // ======================

  /**
   * Build change set by comparing before and after snapshots
   */
  private buildChangeSet(
    before: WorkspaceSnapshotProps,
    after: WorkspaceSnapshotProps,
  ): WorkspaceChangeSet {
    const cs: WorkspaceChangeSet = {};

    // Simple field comparisons

    return cs;
  }

  // ======================
  // Business Operations (Event Publishing)
  // ======================

  /**
   * Batch update multiple properties atomically
   *
   * This method eliminates the logic overlap between factory and individual update methods:
   * - Single optimistic concurrency check
   * - Single version bump
   * - Single domain event published
   * - Atomic transaction for all field changes
   *
   * @param validatedFields - Pre-validated field values (factory responsibility)
   * @param expectedVersion - Optional version for optimistic concurrency control
   * @returns Result indicating success or failure
   */
  public updateBatch(
    validatedFields: ValidatedWorkspaceUpdateFields,
    expectedVersion?: number,
  ): Result<void, DomainError> {
    // Single optimistic concurrency check (not per field like individual methods)
    if (
      expectedVersion != null &&
      expectedVersion !== this._entity.version.value
    ) {
      return err({
        ...WorkspaceErrors.CONCURRENCY_CONFLICT,
        context: {
          expected: expectedVersion,
          actual: this._entity.version.value,
          aggregateId: this._entity.id.value,
        },
      });
    }

    const before = this._entity.toSnapshot();

    // Single version bump for entire batch (not per field)
    const currentVersionResult = createWorkspaceVersion(before.version);
    if (!currentVersionResult.ok) {
      return err(currentVersionResult.error);
    }

    const nextVersionResult = bumpVersion(currentVersionResult.value);
    if (!nextVersionResult.ok) {
      return err(nextVersionResult.error);
    }

    const nextVersion = nextVersionResult.value.value;

    // Single timestamp for entire batch operation
    const updatedAtResult = updatedAtNow(this.clock);
    if (!updatedAtResult.ok) {
      return err(updatedAtResult.error);
    }

    const updatedAt = updatedAtResult.value.value;

    // Apply all field changes atomically through entity
    let currentEntity = this._entity;

    // Apply each validated field change with type safety
    // Commit the batched changes
    this._entity = currentEntity;
    const after = this._entity.toSnapshot();

    // Build comprehensive change set for all modified fields
    const changeSet = this.buildChangeSet(before, after);

    // Publish single update event for entire batch operation
    this.publishUpdateEvent(before, after, changeSet);

    return ok(undefined);
  }

  /**
   * Helper method to publish WorkspaceUpdatedEvent with consistent structure
   *
   * @param before - Snapshot before the update
   * @param after - Snapshot after the update
   * @param changeSet - Change set describing what changed
   */
  private publishUpdateEvent(
    before: WorkspaceSnapshotProps,
    after: WorkspaceSnapshotProps,
    changeSet: WorkspaceChangeSet,
  ): void {
    // Create typed WorkspaceUpdatedEvent with full payload
    const updatedEvent = WorkspaceUpdatedEvent.create(
      {
        id: this._entity.id.value,
        before: before,
        after: after,
        changes: changeSet,
        version: after.version,
        updatedAt: after.updatedAt,
      },
      this.eventMetadata,
    );

    // Apply as domain event with full payload for replay
    const domainEvent: DomainEvent = {
      type: updatedEvent.eventType,
      version: Number(updatedEvent.eventVersion),
      occurredAt: updatedEvent.updatedAt,
      aggregateId: this._entity.id.value,
      aggregateType: 'Workspace',
      data: {
        id: this._entity.id.value,
        before: before,
        after: after,
        changes: changeSet,
        updatedAt: after.updatedAt,
        version: after.version,
      },
      metadata: this.eventMetadata,
    };

    this.apply(domainEvent);
  }

  /**
   * Delete the workspace entity (business operation with event publishing)
   *
   * @returns Result indicating success or failure
   */
  public delete(): Result<void, DomainError> {
    // Create timestamp VO for delete operation using injected clock
    const deletedAtResult = updatedAtNow(this.clock);
    if (!deletedAtResult.ok) {
      return err(deletedAtResult.error);
    }

    // Create and apply domain event for deletion
    const domainEvent: DomainEvent = {
      type: 'WorkspaceDeleted',
      version: 1,
      occurredAt: deletedAtResult.value.value, // Extract Date from VO
      aggregateId: this._entity.id.value,
      aggregateType: 'Workspace',
    };

    this.apply(domainEvent);

    return ok(undefined);
  }

  // ======================
  // Query Methods (Delegate to Entity)
  // ======================

  /**
   * Check if this aggregate represents the same entity as another
   */
  public sameAs(other: WorkspaceAggregate): boolean {
    return this._entity.sameAs(other._entity);
  }
}
