// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { SlackConfigServiceConstants } from '../service-constants';
/**
 * Domain value object for Workspace projection keys
 * Centralizes all key patterns to prevent duplication and ensure consistency
 * Follows DDD principle of explicit domain concepts
 */
export class WorkspaceProjectionKeys {
  // EventStore DB patterns
  static readonly ESDB_BOUNDED_CONTEXT =
    SlackConfigServiceConstants.MODULE_NAMESPACE;
  static readonly ESDB_AGGREGATE_NAME = 'workspace';
  static readonly ESDB_VERSION = 'v1';

  /**
   * Get EventStore stream prefix for individual streams
   * Format: <serviceName>.<aggregate>.<version>
   * Example: slack-config.workspace.v1
   */
  static getEventStoreStreamPrefix(): string {
    return `${this.ESDB_BOUNDED_CONTEXT}.${this.ESDB_AGGREGATE_NAME}.${this.ESDB_VERSION}`;
  }

  /**
   * Get EventStore category projection pattern for catchup
   * Format: $ce-<boundedContext>.<aggregate>.<version>
   * Example: $ce-slack-config.workspace.v1
   */
  static getEventStoreCategoryPattern(): string {
    return `$ce-${this.getEventStoreStreamPrefix()}`;
  }

  /**
   * Get individual EventStore stream name for specific tenant and code
   * Format: <boundedContext>.<aggregate>.<version>-{tenant}-{code}
   * Example: slack-config.workspace.v1-tenant-12345
   */
  static getEventStoreStreamName(tenant: string, code: string): string {
    return `${this.getEventStoreStreamPrefix()}-${tenant}-${code}`;
  }

  /**
   * Extract tenant and code from EventStore stream name
   * Validates format: <boundedContext>.<aggregate>.<version>-{tenant}-{code}
   */
  static extractFromStreamName(
    streamName: string,
  ): { tenant: string; code: string } | null {
    const prefix = this.getEventStoreStreamPrefix();
    const pattern = new RegExp(
      `^${prefix.replace(/\./g, '\\.')}-([^-]+)-(.+)$`,
    );
    const match = streamName.match(pattern);
    if (!match) return null;

    const [, tenant, code] = match;
    return { tenant, code };
  }

  /**
   * Validate if stream name matches workspace pattern
   */
  static isWorkspaceStream(streamName: string): boolean {
    return this.extractFromStreamName(streamName) !== null;
  }

  /**
   * Get stream pattern for tenant-specific catchup
   * Format: <boundedContext>.<aggregate>.<version>-{tenant}-*
   */
  static getTenantStreamPattern(tenant: string): string {
    return `${this.getEventStoreStreamPrefix()}-${tenant}-*`;
  }

  /**
   * Get global stream pattern for all tenants
   * Format: <boundedContext>.<aggregate>.<version>-*
   */
  static getGlobalStreamPattern(): string {
    return `${this.getEventStoreStreamPrefix()}-*`;
  }

  // Redis projection key patterns
  static readonly REDIS_KEY_PREFIX =
    SlackConfigServiceConstants.MODULE_NAMESPACE;
  static readonly REDIS_VERSION = SlackConfigServiceConstants.SERVICE_VERSION;
  static readonly PROJECTOR_NAME = 'workspace-projector';
  static readonly SUBSCRIPTION_GROUP = 'workspace-projection';

  // ⚠️ IMPORTANT: Cache optimization keys use different format
  // The CacheOptimizationUtils class uses notification.slack:pp:ver:{tenant}:workspace:{workspaceId}
  // for version hints. These are NOT migrated and serve different purposes:
  // - Business keys (this class): Human-readable, descriptive, versioned
  // - Cache keys (CacheOptimizationUtils): Compact, performance-optimized, module-namespaced
  // See docs/REDIS_KEY_ARCHITECTURE.md for complete explanation

  /**
   * Get Redis key for workspace projection with cluster-safe hash tags
   * Format: notification.slack:v1:{tenant}:workspace:{workspaceId}
   */
  static getRedisWorkspaceKey(tenant: string, workspaceId: string): string {
    return `${this.REDIS_KEY_PREFIX}:${this.REDIS_VERSION}:{${tenant}}:workspace:${workspaceId}`;
  }

  /**
   * Get Redis key for workspace index with cluster-safe hash tags
   * Format: notification.slack:v1:{tenant}:idx:workspace:list
   */
  static getRedisWorkspaceIndexKey(tenant: string): string {
    return `${this.REDIS_KEY_PREFIX}:${this.REDIS_VERSION}:{${tenant}}:idx:workspace:list`;
  }

  /**
   * Get Redis key for category-based workspace index with cluster-safe hash tags
   * Format: notification.slack:v1:{tenant}:idx:workspace:by-category:{category}
   */
  static getRedisCategoryIndexKey(tenant: string, category: string): string {
    return `${this.REDIS_KEY_PREFIX}:${this.REDIS_VERSION}:{${tenant}}:idx:workspace:by-category:${category}`;
  }

  /**
   * Get Redis key pattern for all workspaces in a tenant
   * Format: notification.slack:v1:{tenant}:workspace:*
   */
  static getRedisTenantWorkspacePattern(tenant: string): string {
    return `${this.REDIS_KEY_PREFIX}:${this.REDIS_VERSION}:{${tenant}}:workspace:*`;
  }

  /**
   * Get Redis key pattern for all workspace projections
   * Format: notification.slack:v1:*:workspace:*
   */
  static getRedisAllWorkspacesPattern(): string {
    return `${this.REDIS_KEY_PREFIX}:${this.REDIS_VERSION}:*:workspace:*`;
  }

  /**
   * Get Redis key pattern for all projections in a specific tenant
   * Format: notification.slack:v1:{tenant}:*
   */
  static getRedisTenantPattern(tenant: string): string {
    return `${this.REDIS_KEY_PREFIX}:${this.REDIS_VERSION}:{${tenant}}:*`;
  }

  /**
   * Get Redis key pattern for all slack-config projections
   * Format: notification.slack:*
   */
  static getRedisSlackConfigPattern(): string {
    return `${this.REDIS_KEY_PREFIX}:*`;
  }

  /**
   * Get new namespaced cache key format (current format)
   * Format: notification.slack:pp:ver:{tenant}:workspace:{workspaceId}
   */
  static getNamespacedVersionHintKey(
    tenant: string,
    workspaceId: string,
  ): string {
    return `notification.slack:pp:ver:{${tenant}}:workspace:${workspaceId}`;
  }

  /**
   * Get current namespaced key patterns (should not be cleaned up)
   */
  static getCurrentKeyPatterns(): string[] {
    return [
      'notification.slack:v1:*:workspace:*', // Business data keys
      'notification.slack:pp:ver:*:workspace:*', // Namespaced version hints
      'notification.slack:pd:dup:*', // Namespaced dedup keys
    ];
  }
}
