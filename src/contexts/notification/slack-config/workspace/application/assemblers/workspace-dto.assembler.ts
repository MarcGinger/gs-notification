// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { WorkspaceDomainState } from '../../domain/state';
import { DetailWorkspaceResponse, ListWorkspaceResponse } from '../dtos';

/**
 * Workspace DTO Assembler
 *
 * Converts WorkspaceDomainState (pure VOs) to transport DTOs.
 * Bridges the gap between rich domain objects and API response format.
 * Uses existing generated DTOs and follows established patterns.
 */

/**
 * Assembles DTOs from WorkspaceDomainState for API transport
 */
export class WorkspaceDtoAssembler {
  /**
   * Convert WorkspaceDomainState to detailed response DTO
   *
   * @param domainState - Rich domain state with VOs
   * @returns Clean DTO for API response
   */
  static toDetailResponse(
    domainState: WorkspaceDomainState,
  ): DetailWorkspaceResponse {
    const dto = new DetailWorkspaceResponse();

    // Extract primitive values from VOs
    dto.id = domainState.id.value;
    dto.name = domainState.name.value;
    dto.botToken = domainState.botToken?.value;
    dto.signingSecret = domainState.signingSecret?.value;
    dto.appId = domainState.appId?.value;
    dto.botUserId = domainState.botUserId?.value;
    dto.defaultChannelId = domainState.defaultChannelId?.value;
    dto.enabled = domainState.enabled.value;

    return dto;
  }

  /**
   * Convert WorkspaceDomainState to list response DTO
   *
   * @param domainState - Rich domain state with VOs
   * @returns Clean DTO for list API response
   */
  static toListResponse(
    domainState: WorkspaceDomainState,
  ): ListWorkspaceResponse {
    const dto = new ListWorkspaceResponse();

    // Extract primitive values from VOs
    dto.id = domainState.id.value;
    dto.name = domainState.name.value;
    dto.botToken = domainState.botToken?.value;
    dto.signingSecret = domainState.signingSecret?.value;
    dto.appId = domainState.appId?.value;
    dto.botUserId = domainState.botUserId?.value;
    dto.defaultChannelId = domainState.defaultChannelId?.value;
    dto.enabled = domainState.enabled.value;

    return dto;
  }

  /**
   * Convert array of WorkspaceDomainState to array of list DTOs
   *
   * @param domainStates - Array of rich domain states
   * @returns Array of clean DTOs for list API response
   */
  static toListResponseArray(
    domainStates: WorkspaceDomainState[],
  ): ListWorkspaceResponse[] {
    return domainStates.map((domainState) => this.toListResponse(domainState));
  }

  /**
   * Convert array of WorkspaceDomainState to array of detail DTOs
   *
   * @param domainStates - Array of rich domain states
   * @returns Array of clean DTOs for detail API response
   */
  static toDetailResponseArray(
    domainStates: WorkspaceDomainState[],
  ): DetailWorkspaceResponse[] {
    return domainStates.map((domainState) =>
      this.toDetailResponse(domainState),
    );
  }
}
