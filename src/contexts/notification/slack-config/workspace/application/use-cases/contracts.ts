// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

/**
 * Abstract Use Case Contracts for Workspace Operations
 *
 * These abstract classes are used instead of interfaces to work with NestJS DI.
 * TypeScript interfaces are erased at runtime and cannot be injected.
 */

import { Result, DomainError } from 'src/shared/errors';
import type { IUserToken } from 'src/shared/security';
import type {
  CreateWorkspaceProps,
  UpdateWorkspaceProps,
  UpsertWorkspaceProps,
} from '../../domain/props';
import type { DetailWorkspaceResponse } from '../dtos';

export abstract class ICreateWorkspaceUseCase {
  abstract execute(params: {
    user: IUserToken;
    props: CreateWorkspaceProps;
    correlationId: string;
    authorizationReason: string;
  }): Promise<Result<DetailWorkspaceResponse, DomainError>>;
}

export abstract class IUpdateWorkspaceUseCase {
  abstract execute(params: {
    user: IUserToken;
    id: string;
    props: UpdateWorkspaceProps;
    correlationId: string;
    authorizationReason: string;
  }): Promise<Result<DetailWorkspaceResponse, DomainError>>;
}

export abstract class IUpsertWorkspaceUseCase {
  abstract execute(params: {
    user: IUserToken;
    id: string;
    props: UpsertWorkspaceProps;
    correlationId: string;
    authorizationReason: string;
  }): Promise<Result<DetailWorkspaceResponse, DomainError>>;
}

export abstract class IDeleteWorkspaceUseCase {
  abstract execute(params: {
    user: IUserToken;
    id: string;
    correlationId: string;
    authorizationReason: string;
  }): Promise<Result<void, DomainError>>;
}

export abstract class IGetWorkspaceUseCase {
  abstract execute(params: {
    user: IUserToken;
    id: string;
    correlationId: string;
  }): Promise<Result<DetailWorkspaceResponse | null, DomainError>>;
}
