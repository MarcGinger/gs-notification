// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import {
  safeParseJSON,
  safeParseJSONArray,
} from 'src/shared/infrastructure/repositories';
import { DetailWorkspaceResponse } from '../../application/dtos';

/**
 * Workspace Field Validator Utility
 *
 * Centralized utility for parsing and validating Workspace aggregate data from EventStore events.
 * Provides consistent field validation patterns that can be reused across repositories
 * and projectors for Workspace domain operations.
 *
 * @domain Notification Context - Workspace Field Validation Utility
 * @layer Infrastructure
 * @pattern Utility Pattern + Field Validation
 */
export class WorkspaceFieldValidatorUtil {
  /**
   * Create a validated DetailWorkspaceResponse from raw EventStore event data
   *
   * Uses modern safeParseJSON utilities and DTOs to maintain CQRS compliance.
   * This creates read model data for projections, not domain props.
   *
   * @param aggregateData - Raw event data from EventStore
   * @returns Validated DetailWorkspaceResponse DTO with all required fields
   * @throws Error if required fields are missing or invalid
   */
  static createWorkspaceSnapshotFromEventData(
    aggregateData: Record<string, any>,
  ): DetailWorkspaceResponse & {
    version: number;
    createdAt: Date;
    updatedAt: Date;
  } {
    // Parse array fields using safeParseJSONArray utility
    // Extract simple fields directly from event data
    const id = aggregateData.id as string;
    const name = aggregateData.name as string;
    const botToken = aggregateData.botToken as string;
    const signingSecret = aggregateData.signingSecret as string;
    const appId = aggregateData.appId as string;
    const botUserId = aggregateData.botUserId as string;
    const defaultChannelId = aggregateData.defaultChannelId as string;
    const enabled =
      aggregateData.enabled === 'true' || aggregateData.enabled === true;

    // Extract version and timestamps with proper type conversion
    const version =
      typeof aggregateData.version === 'string'
        ? parseInt(aggregateData.version, 10)
        : (aggregateData.version as number);
    const createdAt =
      typeof aggregateData.createdAt === 'string'
        ? new Date(aggregateData.createdAt)
        : (aggregateData.createdAt as Date);
    const updatedAt =
      typeof aggregateData.updatedAt === 'string'
        ? new Date(aggregateData.updatedAt)
        : (aggregateData.updatedAt as Date);

    // safeParseJSON utilities provide error handling for invalid JSON,
    // direct field access provides type safety and truthful representation
    return {
      id,
      name,
      botToken,
      signingSecret,
      appId,
      botUserId,
      defaultChannelId,
      enabled,
      version,
      createdAt,
      updatedAt,
    };
  }
}
