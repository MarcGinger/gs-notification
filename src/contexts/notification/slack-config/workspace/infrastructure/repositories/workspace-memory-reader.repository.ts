// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Injectable, Inject } from '@nestjs/common';
import { APP_LOGGER, Log, componentLogger, Logger } from 'src/shared/logging';
import { CorrelationUtil } from 'src/shared/utilities/correlation.util';
import { Clock, CLOCK } from 'src/shared/infrastructure/time';
import {
  RepositoryLoggingUtil,
  RepositoryLoggingConfig,
  handleRepositoryError,
  RepositoryOptions,
} from 'src/shared/infrastructure/repositories';
import { Result, DomainError, err, ok } from 'src/shared/errors';
import { Option } from 'src/shared/domain/types';
import { ActorContext } from 'src/shared/application/context';
import { RepositoryErrorFactory } from 'src/shared/domain/errors/repository.error';
import { WorkspaceSnapshotProps } from '../../domain/props';
import { WorkspaceId } from '../../domain/value-objects';
import { IWorkspaceReader } from '../../application/ports';
import { workspaceStore } from '../stores/workspace.store';

/**
 * Workspace Reader Repository - In-Memory Implementation
 *
 * Bounded Context: Notification/Workspace
 * Handles basic read operations for Workspace aggregates using in-memory projector
 * as the data source instead of SQL queries.
 *
 * Benefits:
 * - Zero external database dependencies
 * - Ultra-fast read operations (LRU cache)
 * - Perfect for testing, prototyping, and shadow validation
 * - Maintains same interface as SQL-based implementation
 * - Comprehensive logging and error handling
 *
 * @domain Notification Context - Workspace Reader Repository (In-Memory)
 * @layer Infrastructure
 * @pattern Repository Pattern + In-Memory Projector
 */
@Injectable()
export class WorkspaceReaderRepository implements IWorkspaceReader {
  private readonly logger: Logger;
  private readonly loggingConfig: RepositoryLoggingConfig;

  constructor(
    @Inject(APP_LOGGER) baseLogger: Logger,
    @Inject(CLOCK) private readonly clock: Clock,
  ) {
    this.loggingConfig = {
      serviceName: 'SlackConfigService',
      component: 'WorkspaceReaderRepository',
    };
    this.logger = componentLogger(baseLogger, this.loggingConfig.component);
  }

  /**
   * Helper to create consistent logging context using shared utilities
   */
  private createLogContext(
    operation: string,
    correlationId: string,
    actor: ActorContext,
    additionalContext?: Record<string, unknown>,
  ): Record<string, unknown> {
    return RepositoryLoggingUtil.createLogContext(
      this.loggingConfig,
      this.clock,
      operation,
      correlationId,
      actor,
      additionalContext,
    );
  }

  /**
   * Helper to assess operation risk level using shared utilities
   */
  private assessOperationRisk(operation: string): 'LOW' | 'MEDIUM' | 'HIGH' {
    return RepositoryLoggingUtil.assessOperationRisk(operation);
  }

  /**
   * Find a Workspace by its unique identifier
   * @param actor - The authenticated user context
   * @param id - The unique identifier of the Workspace
   * @param options - Optional repository options
   * @returns Result containing the Workspace snapshot or null if not found
   */
  async findById(
    actor: ActorContext,
    id: WorkspaceId,
    options?: RepositoryOptions,
  ): Promise<Result<Option<WorkspaceSnapshotProps>, DomainError>> {
    const operation = 'findById';
    const riskLevel = this.assessOperationRisk(operation);
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('workspace-find-by-id');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      riskLevel,
      targetId: id.value,
      customCorrelationId: !!options?.correlationId,
      source: options?.source,
      requestId: options?.requestId,
      dataSource: 'in-memory-projector',
    });

    // Validate actor context with enhanced security logging
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) return Promise.resolve(err(validation.error));

    // Guard tenant explicitly
    if (!actor.tenantId) {
      return Promise.resolve(
        err(
          RepositoryErrorFactory.validationError(
            'tenantId',
            'Missing tenant id',
          ),
        ),
      );
    }

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      { queryType: 'workspace_lookup', scope: 'in_memory_projection' },
    );

    try {
      Log.debug(this.logger, 'Finding workspace by ID in shared store', {
        ...logContext,
        queryDetails: {
          scope: 'shared_workspace_store',
          method: 'workspaceStore.get',
        },
      });

      // Get projection from shared workspace store
      const projection = workspaceStore.get(actor.tenantId, id.value);

      if (!projection) {
        RepositoryLoggingUtil.logQueryMetrics(
          this.logger,
          operation,
          logContext,
          {
            resultCount: 0,
            dataQuality: 'empty',
          },
        );
        return Promise.resolve(ok(Option.none()));
      }

      // Map projection to WorkspaceSnapshot
      const workspaceSnapshot: WorkspaceSnapshotProps = {
        id: projection.id,
        version: projection.version,
        createdAt: projection.createdAt,
        updatedAt: projection.updatedAt,
      };

      // Log query metrics using shared utility
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: 1,
          dataQuality: 'good',
          sampleData: {
            id: workspaceSnapshot.id,
            version: workspaceSnapshot.version,
          },
        },
      );

      return Promise.resolve(ok(Option.some(workspaceSnapshot)));
    } catch (error) {
      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'HIGH',
      );

      // Handle and return the classified error using shared utility
      return Promise.resolve(handleRepositoryError(error));
    }
  }

  /**
   * Check if a workspace exists by ID (for write-path validation)
   * @param actor - The authenticated user context
   * @param id - The unique identifier of the Workspace
   * @param options - Optional repository options
   * @returns Result containing boolean indicating existence
   */
  async exists(
    actor: ActorContext,
    id: WorkspaceId,
    options?: RepositoryOptions,
  ): Promise<Result<boolean, DomainError>> {
    const operation = 'exists';
    const riskLevel = this.assessOperationRisk(operation);
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('workspace-exists-check');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      riskLevel,
      targetId: id.value,
      customCorrelationId: !!options?.correlationId,
      source: options?.source,
      requestId: options?.requestId,
      dataSource: 'in-memory-projector',
    });

    // Validate actor context
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) return Promise.resolve(err(validation.error));

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      { queryType: 'existence_check', scope: 'in_memory_projection' },
    );

    try {
      Log.debug(this.logger, 'Checking workspace existence in shared store', {
        ...logContext,
        queryDetails: {
          scope: 'shared_workspace_store',
          method: 'workspaceStore.has',
          optimized: true,
        },
      });

      // Check existence in shared workspace store
      const exists = workspaceStore.has(actor.tenantId!, id.value);

      // Log query metrics using shared utility
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: exists ? 1 : 0,
          dataQuality: 'good',
          sampleData: { exists, id: id.value },
        },
      );

      return Promise.resolve(ok(exists));
    } catch (error) {
      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'HIGH',
      );

      // Handle and return the classified error using shared utility
      return Promise.resolve(handleRepositoryError(error));
    }
  }

  /**
   * Get workspace version for optimistic concurrency control
   * @param actor - The authenticated user context
   * @param id - The unique identifier of the Workspace
   * @param options - Optional repository options
   * @returns Result containing version number or null if not found
   */
  async getVersion(
    actor: ActorContext,
    id: WorkspaceId,
    options?: RepositoryOptions,
  ): Promise<Result<Option<number>, DomainError>> {
    const operation = 'getVersion';
    const riskLevel = this.assessOperationRisk(operation);
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('workspace-get-version');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      riskLevel,
      targetId: id.value,
      customCorrelationId: !!options?.correlationId,
      source: options?.source,
      requestId: options?.requestId,
      dataSource: 'in-memory-projector',
    });

    // Validate actor context
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) return Promise.resolve(err(validation.error));

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      { queryType: 'version_lookup', scope: 'in_memory_projection' },
    );

    try {
      Log.debug(this.logger, 'Getting workspace version from shared store', {
        ...logContext,
        queryDetails: {
          scope: 'shared_workspace_store',
          method: 'workspaceStore.get',
          optimized: true,
        },
      });

      // Get projection from shared workspace store
      const projection = workspaceStore.get(actor.tenantId!, id.value);

      if (!projection || projection.deletedAt) {
        RepositoryLoggingUtil.logQueryMetrics(
          this.logger,
          operation,
          logContext,
          {
            resultCount: 0,
            dataQuality: 'empty',
          },
        );
        return Promise.resolve(ok(Option.none()));
      }

      const version = projection.version;

      // Log query metrics using shared utility
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: 1,
          dataQuality: 'good',
          sampleData: { id: id.value, version },
        },
      );

      return Promise.resolve(ok(Option.some(version)));
    } catch (error) {
      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'HIGH',
      );

      // Handle and return the classified error using shared utility
      return Promise.resolve(handleRepositoryError(error));
    }
  }

  /**
   * Get minimal workspace data for write-path operations
   * @param actor - The authenticated user context
   * @param id - The unique identifier of the Workspace
   * @param options - Optional repository options
   * @returns Result containing minimal workspace data or null if not found
   */
  async getMinimal(
    actor: ActorContext,
    id: WorkspaceId,
    options?: RepositoryOptions,
  ): Promise<Result<Option<{ id: string; version: number }>, DomainError>> {
    const operation = 'getMinimal';
    const riskLevel = this.assessOperationRisk(operation);
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('workspace-get-minimal');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      riskLevel,
      targetId: id.value,
      customCorrelationId: !!options?.correlationId,
      source: options?.source,
      requestId: options?.requestId,
      dataSource: 'in-memory-projector',
    });

    // Validate actor context
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) return Promise.resolve(err(validation.error));

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      { queryType: 'minimal_lookup', scope: 'in_memory_projection' },
    );

    try {
      Log.debug(
        this.logger,
        'Getting minimal workspace data from shared store',
        {
          ...logContext,
          queryDetails: {
            scope: 'shared_workspace_store',
            method: 'workspaceStore.get',
            optimized: true,
          },
        },
      );

      // Get projection from shared workspace store
      const projection = workspaceStore.get(actor.tenantId!, id.value);

      if (!projection || projection.deletedAt) {
        RepositoryLoggingUtil.logQueryMetrics(
          this.logger,
          operation,
          logContext,
          {
            resultCount: 0,
            dataQuality: 'empty',
          },
        );
        return ok(Option.none());
      }

      const minimal = {
        id: projection.id,
        version: projection.version,
      };

      // Log query metrics using shared utility
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: 1,
          dataQuality: 'good',
          sampleData: { ...minimal },
        },
      );

      return Promise.resolve(ok(Option.some(minimal)));
    } catch (error) {
      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'HIGH',
      );

      // Handle and return the classified error using shared utility
      return Promise.resolve(handleRepositoryError(error));
    }
  }
}
