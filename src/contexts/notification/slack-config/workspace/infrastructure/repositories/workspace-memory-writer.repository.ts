// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Injectable, Inject } from '@nestjs/common';
import { Result, DomainError, err, ok } from 'src/shared/errors';
import { ActorContext } from 'src/shared/application/context';
import {
  SaveReceipt,
  handleRepositoryError,
} from 'src/shared/infrastructure/repositories';
import { RepositoryErrorFactory } from 'src/shared/domain/errors/repository.error';
import { APP_LOGGER, Log, componentLogger, Logger } from 'src/shared/logging';
import { Clock, CLOCK } from 'src/shared/infrastructure/time';
import { CorrelationUtil } from 'src/shared/utilities/correlation.util';
import {
  RepositoryLoggingUtil,
  RepositoryLoggingConfig,
} from 'src/shared/infrastructure/repositories';
import { WorkspaceAggregate } from '../../domain/aggregates';
import { WorkspaceId } from '../../domain/value-objects';
import { IWorkspaceWriter } from '../../application/ports';
import { workspaceStore, WorkspaceProjection } from '../stores/workspace.store';

/**
 * Workspace Writer Repository - In-Memory Implementation
 *
 * Handles write operations (create, update, delete) for Workspace aggregates using in-memory projector
 * as the data store instead of EventStore DB.
 *
 * Benefits:
 * - Zero external database dependencies
 * - Ultra-fast write operations (LRU cache)
 * - Perfect for testing, prototyping, and shadow validation
 * - Maintains same interface as EventStore-based implementation
 * - Comprehensive logging and error handling
 *
 * ISP Benefits:
 * - Clients that only need to write data don't depend on read methods
 * - Easier to implement write-only scenarios
 * - Can be secured separately from read operations
 * - Supports command-only patterns in CQRS architectures
 *
 * @domain Notification Context - Workspace Writer Repository (In-Memory)
 * @layer Infrastructure
 * @pattern Repository Pattern + Interface Segregation Principle + In-Memory Store
 */
@Injectable()
export class WorkspaceWriterRepository implements IWorkspaceWriter {
  private readonly logger: Logger;
  private readonly loggingConfig: RepositoryLoggingConfig;

  constructor(
    @Inject(APP_LOGGER) baseLogger: Logger,
    @Inject(CLOCK) private readonly clock: Clock,
  ) {
    this.loggingConfig = {
      serviceName: 'NotificationSlackConfigService',
      component: 'WorkspaceWriterRepository',
    };
    this.logger = componentLogger(baseLogger, this.loggingConfig.component);
  }

  /**
   * Helper to create consistent logging context using shared utilities
   */
  private createLogContext(
    operation: string,
    correlationId: string,
    actor: ActorContext,
    additionalContext?: Record<string, unknown>,
  ): Record<string, unknown> {
    return RepositoryLoggingUtil.createLogContext(
      this.loggingConfig,
      this.clock,
      operation,
      correlationId,
      actor,
      additionalContext,
    );
  }

  /**
   * Helper to assess operation risk level using shared utilities
   */
  private assessOperationRisk(operation: string): 'LOW' | 'MEDIUM' | 'HIGH' {
    return RepositoryLoggingUtil.assessOperationRisk(operation);
  }

  /**
   * Save a Workspace aggregate (create or update) using In-Memory store approach
   * @param actor - The authenticated user context
   * @param workspace - The Workspace aggregate to save
   * @param expectedVersionFromCaller - Optional version for optimistic locking
   * @returns Result with SaveReceipt containing revision tracking or domain error
   */
  async save(
    actor: ActorContext,
    workspace: WorkspaceAggregate,
    expectedVersionFromCaller?: number,
  ): Promise<Result<SaveReceipt, DomainError>> {
    const operation = 'save';
    const riskLevel = this.assessOperationRisk(operation);
    const correlationId =
      CorrelationUtil.generateForOperation('workspace-save');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      riskLevel,
      aggregateId: workspace.id.value,
      currentVersion: workspace.version,
      eventCount: workspace.uncommittedEvents?.length ?? 0,
      customCorrelationId: false,
      dataSource: 'in-memory-projector',
    });

    // Validate actor context with enhanced security logging
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) {
      return Promise.resolve(validation);
    }

    // Guard tenant explicitly
    if (!actor.tenantId) {
      return Promise.resolve(
        err(
          RepositoryErrorFactory.validationError(
            'tenantId',
            'Missing tenant id',
          ),
        ),
      );
    }

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      {
        operationType: 'aggregate_save',
        scope: 'in_memory_projection',
        aggregateId: workspace.id.value,
      },
    );

    const events = workspace.uncommittedEvents ?? [];

    // No-op save: return ok receipt (many apps "save" unchanged aggregates)
    if (events.length === 0) {
      Log.debug(this.logger, 'No uncommitted events; no-op save', {
        ...logContext,
        operationResult: 'no_op',
        queryDetails: {
          scope: 'shared_workspace_store',
          method: 'no_operation',
        },
      });

      const receipt: SaveReceipt = {
        stream: `workspace-${workspace.id.value}`,
        aggregateId: workspace.id.value,
        tenantId: actor.tenantId,
        eventCount: 0,
        newVersion: workspace.version,
        streamRevision: BigInt(workspace.version),
        timestampIso: this.clock.nowIso(),
        correlationId,
      };

      // Log no-op metrics
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: 0,
          dataQuality: 'empty',
          sampleData: {
            operationType: 'no_op',
            reason: 'no_uncommitted_events',
          },
        },
      );

      return Promise.resolve(ok(receipt));
    }

    // prevVersion = version BEFORE current batch
    const prevVersion = workspace.version - events.length;

    // Optional optimistic lock from caller
    if (
      expectedVersionFromCaller !== undefined &&
      expectedVersionFromCaller !== prevVersion
    ) {
      Log.warn(this.logger, 'Pre-check optimistic lock failed', {
        ...logContext,
        expectedVersionFromCaller,
        prevVersion,
        concurrencyError: 'optimistic_lock_failure',
      });

      return Promise.resolve(
        err(
          RepositoryErrorFactory.concurrencyConflict(
            expectedVersionFromCaller,
            prevVersion,
          ),
        ),
      );
    }

    try {
      Log.debug(this.logger, 'Saving workspace to shared store', {
        ...logContext,
        eventCount: events.length,
        prevVersion,
        queryDetails: {
          scope: 'shared_workspace_store',
          method: 'workspaceStore.set',
        },
      });

      // Check if workspace already exists for version conflict detection
      const existingProjection = workspaceStore.get(
        actor.tenantId,
        workspace.id.value,
      );
      if (existingProjection && expectedVersionFromCaller !== undefined) {
        if (existingProjection.version !== expectedVersionFromCaller) {
          return Promise.resolve(
            err(
              RepositoryErrorFactory.concurrencyConflict(
                expectedVersionFromCaller,
                existingProjection.version,
              ),
            ),
          );
        }
      }

      // Create projection from aggregate properties for store
      const projection: WorkspaceProjection = {
        // WorkspaceProps fields
        id: workspace.entity.id.value,
        // BaseProjection fields
        tenantId: actor.tenantId,
        version: workspace.version,
        createdAt: workspace.entity.createdAt.value,
        updatedAt: this.clock.now(),
        deletedAt: undefined,
        lastStreamRevision: workspace.version.toString(),
      };

      // Save to in-memory store
      workspaceStore.set(actor.tenantId, workspace.id.value, projection);

      // Mark committed after successful store save
      workspace.markEventsAsCommitted();

      const receipt: SaveReceipt = {
        stream: `workspace-${workspace.id.value}`,
        aggregateId: workspace.id.value,
        tenantId: actor.tenantId,
        eventCount: events.length,
        newVersion: workspace.version,
        streamRevision: BigInt(workspace.version),
        timestampIso: this.clock.nowIso(),
        correlationId,
      };

      // Log successful save metrics using shared utility
      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: events.length,
          dataQuality: 'good',
          sampleData: {
            eventsProcessed: events.length,
            newVersion: receipt.newVersion,
            id: workspace.id.value,
          },
        },
      );

      return Promise.resolve(ok(receipt));
    } catch (error) {
      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'HIGH',
      );

      // Handle and return the classified error using shared utility
      return Promise.resolve(handleRepositoryError(error));
    }
  }

  /**
   * Delete a Workspace by its unique identifier using In-Memory store approach
   * @param actor - The authenticated user context
   * @param id - The unique identifier of the Workspace to delete
   * @returns Result with SaveReceipt containing revision tracking or domain error
   */
  async delete(
    actor: ActorContext,
    id: WorkspaceId,
  ): Promise<Result<SaveReceipt, DomainError>> {
    const operation = 'delete';
    const correlationId =
      CorrelationUtil.generateForOperation('workspace-delete');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      workspaceId: id.value,
    });

    // Authorization success logging
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
    );

    try {
      // Check if workspace exists
      if (!workspaceStore.has(actor.tenantId || 'default-tenant', id.value)) {
        const notFoundError = RepositoryErrorFactory.notFound(
          'Workspace',
          id.value,
        );

        RepositoryLoggingUtil.logOperationError(
          this.logger,
          operation,
          logContext,
          new Error(`Workspace not found: ${id.value}`),
          'MEDIUM',
        );

        return err(notFoundError);
      }

      // Remove from In-Memory store
      workspaceStore.delete(actor.tenantId || 'default-tenant', id.value);

      const receipt: SaveReceipt = {
        stream: `workspace-${id.value}`,
        aggregateId: id.value,
        tenantId: actor.tenantId || 'default-tenant',
        eventCount: 1,
        newVersion: 1, // Simple versioning for In-Memory
        streamRevision: BigInt(1),
        timestampIso: this.clock.nowIso(),
        correlationId,
      };

      RepositoryLoggingUtil.logQueryMetrics(
        this.logger,
        operation,
        logContext,
        {
          resultCount: 1,
          dataQuality: 'good',
        },
      );

      return ok(receipt);
    } catch (error) {
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'HIGH',
      );

      return handleRepositoryError(error);
    }
  }
}
