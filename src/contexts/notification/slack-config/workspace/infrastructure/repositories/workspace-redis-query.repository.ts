// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { Injectable, Inject } from '@nestjs/common';
import { Redis } from 'ioredis';
import { APP_LOGGER, Log, componentLogger, Logger } from 'src/shared/logging';
import { CorrelationUtil } from 'src/shared/utilities/correlation.util';
import { Clock, CLOCK } from 'src/shared/infrastructure/time';
import {
  RepositoryLoggingUtil,
  RepositoryLoggingConfig,
  handleRepositoryError,
  safeParseJSON,
  safeParseJSONArray,
  RepositoryOptions,
} from 'src/shared/infrastructure/repositories';
import { Result, DomainError, err, ok } from 'src/shared/errors';
import { Option } from 'src/shared/domain/types';
import { ActorContext } from 'src/shared/application/context';
import { RepositoryErrorFactory } from 'src/shared/domain/errors/repository.error';
import { CacheMetricsCollector } from 'src/shared/infrastructure/projections/cache-optimization';
import { SLACK_CONFIG_DI_TOKENS } from '../../../slack-config.constants';
import { DetailWorkspaceResponse } from '../../application/dtos';
import { IWorkspaceQuery } from '../../application/ports';
import { WorkspaceProjectionKeys } from '../../workspace-projection-keys';

/**
 * Internal workspace data structure for Redis operations
 * Extends DetailWorkspaceResponse with additional fields needed for caching and versioning
 */
interface WorkspaceCacheData extends DetailWorkspaceResponse {
  version: number;
  createdAt: Date;
  updatedAt: Date;
}

/**
 * Workspace Query Repository - Interface Segregation Principle Implementation
 *
 * Bounded Context: Notification/Workspace
 * Handles complex query operations including pagination, filtering, and search.
 * This repository focuses solely on advanced data retrieval operations using Redis projections.
 *
 * ISP Benefits:
 * - Clients that need simple reads don't depend on complex query methods
 * - Can be optimized independently using Redis indexing strategies
 * - Easier to implement caching strategies for query operations
 * - Supports analytical and reporting use cases with Redis sorted sets
 *
 * Redis Features Used:
 * - Hash-based workspace storage with cluster-safe keys
 * - Sorted set indexing for efficient pagination and sorting
 * - Pattern matching for id and name filtering
 * - SCAN operations for tenant isolation
 * - Production-ready caching with metrics collection
 *
 * @domain Notification Context - Workspace Query Repository (Redis)
 * @layer Infrastructure
 * @pattern Repository Pattern + Interface Segregation Principle + Redis Projector
 */
@Injectable()
export class WorkspaceQueryRepository implements IWorkspaceQuery {
  private readonly logger: Logger;
  private readonly loggingConfig: RepositoryLoggingConfig;
  private readonly metricsCollector = new CacheMetricsCollector();

  constructor(
    @Inject(APP_LOGGER) baseLogger: Logger,
    @Inject(CLOCK) private readonly clock: Clock,
    @Inject(SLACK_CONFIG_DI_TOKENS.IO_REDIS)
    private readonly redis: Redis,
  ) {
    this.loggingConfig = {
      serviceName: 'WorkspaceConfigService',
      component: 'WorkspaceQueryRepository',
    };
    this.logger = componentLogger(baseLogger, this.loggingConfig.component);

    Log.info(
      this.logger,
      'WorkspaceQueryRepository initialized with Redis backend',
      {
        component: this.loggingConfig.component,
        redisStatus: this.redis.status,
        clusterSafe: true,
        cacheOptimized: true,
      },
    );
  }

  /**
   * Find a single workspace by id using Redis hash lookup
   *
   * Leverages the established Redis patterns from WorkspaceProjector
   * with cluster-safe keys and production-ready caching.
   *
   * Features:
   * - Cluster-safe Redis keys with hash tags for co-location
   * - Direct hash lookup for optimal performance (O(1))
   * - Tenant isolation using Redis key patterns
   * - Comprehensive logging and error handling
   * - Production-ready metrics collection
   * - Soft delete awareness
   *
   * @param actor - The actor context containing authentication and request metadata.
   * @param id - The workspace id to search for.
   * @param options - Optional repository options (e.g., timeout, correlation).
   * @returns A promise resolving to a Result containing the Workspace response or a DomainError.
   */
  async findById(
    actor: ActorContext,
    id: string,
    options?: RepositoryOptions,
  ): Promise<Result<Option<DetailWorkspaceResponse>, DomainError>> {
    const operation = 'findById';
    const correlationId =
      options?.correlationId ??
      CorrelationUtil.generateForOperation('workspace-query-findById');

    const logContext = this.createLogContext(operation, correlationId, actor, {
      workspaceId: id,
      dataSource: 'redis-projector',
    });

    // Validate actor context with enhanced security logging
    const validation = RepositoryLoggingUtil.validateActorContext(
      this.logger,
      actor,
      logContext,
    );
    if (!validation.ok) return err(validation.error);

    // Guard tenant explicitly
    if (!actor.tenantId) {
      return err(
        RepositoryErrorFactory.validationError('tenantId', 'Missing tenant id'),
      );
    }

    // Log successful authorization
    RepositoryLoggingUtil.logAuthorizationSuccess(
      this.logger,
      operation,
      logContext,
      {
        operationType: 'workspace_query_findById',
        scope: 'redis_single_lookup',
        tenantId: actor.tenantId,
      },
    );

    try {
      // Generate cluster-safe Redis key
      const workspaceKey = this.generateWorkspaceKey(actor.tenantId, id);

      Log.debug(this.logger, 'Executing Redis hash lookup', {
        ...logContext,
        queryDetails: {
          scope: 'redis_hgetall',
          method: 'redis.hgetall',
          key: workspaceKey,
          clusterSafe: true,
        },
      });

      // Fetch workspace hash from Redis
      const hashData = await this.redis.hgetall(workspaceKey);

      if (!hashData || Object.keys(hashData).length === 0) {
        Log.debug(this.logger, 'Workspace not found in Redis', logContext);
        return ok(Option.none());
      }

      // Parse Redis hash to workspace data
      const workspace = this.parseRedisHashToWorkspace(hashData);

      if (!workspace) {
        // Workspace exists but is soft deleted or malformed
        Log.debug(
          this.logger,
          'Workspace exists but is soft deleted or malformed',
          {
            ...logContext,
            softDeleted: !!hashData.deletedAt,
          },
        );
        return ok(Option.none());
      }

      // Transform to DetailWorkspaceResponse DTO (excluding internal fields)
      const detailResponse: DetailWorkspaceResponse = {
        id: workspace.id,
        name: workspace.name,
        botToken: workspace.botToken,
        signingSecret: workspace.signingSecret,
        appId: workspace.appId,
        botUserId: workspace.botUserId,
        defaultChannelId: workspace.defaultChannelId,
        enabled: workspace.enabled,
      };

      Log.debug(this.logger, 'Workspace found successfully in Redis', {
        ...logContext,
        resultData: {
          workspaceId: detailResponse.id,
          workspaceName: detailResponse.name,
          cacheHit: true,
        },
      });

      return ok(Option.some(detailResponse));
    } catch (error) {
      // Log operation error using shared utility
      RepositoryLoggingUtil.logOperationError(
        this.logger,
        operation,
        logContext,
        error as Error,
        'MEDIUM',
      );

      // Handle and return the classified error using shared utility
      return handleRepositoryError(error);
    }
  }

  /**
   * Generate cluster-safe Redis keys using centralized WorkspaceProjectionKeys
   * Ensures consistency with projector key patterns
   */
  private generateWorkspaceKey(tenantId: string, id: string): string {
    // âœ… Use centralized key generation for consistency
    return WorkspaceProjectionKeys.getRedisWorkspaceKey(tenantId, id);
  }

  /**
   * Generate tenant index key for pagination and sorting using centralized keys
   */
  private generateTenantIndexKey(tenantId: string): string {
    return WorkspaceProjectionKeys.getRedisTenantIndexKey(tenantId);
  }

  /**
   * Parse Redis hash data into DetailWorkspaceResponse DTO
   * Uses DTO instead of domain props for CQRS compliance
   */
  private parseRedisHashToWorkspace(
    hashData: Record<string, string>,
  ): WorkspaceCacheData | null {
    try {
      if (!hashData || Object.keys(hashData).length === 0) {
        return null;
      }

      // Check for soft deletion
      if (hashData.deletedAt) {
        return null;
      }

      // Parse array fields using safeParseJSONArray utility

      return {
        id: hashData.id,
        name: hashData.name,
        botToken: hashData.botToken || undefined,
        signingSecret: hashData.signingSecret || undefined,
        appId: hashData.appId || undefined,
        botUserId: hashData.botUserId || undefined,
        defaultChannelId: hashData.defaultChannelId || undefined,
        enabled: hashData.enabled === 'true',
        version: parseInt(hashData.version, 10),
        createdAt: new Date(hashData.createdAt),
        updatedAt: new Date(hashData.updatedAt),
      };
    } catch (error) {
      Log.error(
        this.logger,
        'Failed to parse Redis hash data to WorkspaceSnapshot',
        {
          method: 'parseRedisHashToWorkspace',
          error: (error as Error).message,
          id: hashData?.id,
        },
      );
      return null;
    }
  }
  /**
   * Helper to create consistent logging context using shared utilities
   */
  private createLogContext(
    operation: string,
    correlationId: string,
    actor: ActorContext,
    additionalContext?: Record<string, unknown>,
  ): Record<string, unknown> {
    return RepositoryLoggingUtil.createLogContext(
      this.loggingConfig,
      this.clock,
      operation,
      correlationId,
      actor,
      additionalContext,
    );
  }
}
