// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import {
  PermissionRiskLevel,
  PermissionTenantScope,
  PermissionOperationType,
  BasePermissionMeta,
} from 'src/shared/domain/permissions';
import {
  createPermissionRegistry,
  createRoleHierarchy,
  assertRegistryComplete,
} from 'src/shared/domain/permissions/utils';
import { createDomainPermissionHelpers } from 'src/shared/domain/permissions/domain-permission-helpers.factory';

export enum ChannelPermission {
  DOMAIN_CHANNEL_CREATE = 'DOMAIN_CHANNEL_CREATE',
  DOMAIN_CHANNEL_READ = 'DOMAIN_CHANNEL_READ',
  DOMAIN_CHANNEL_UPDATE = 'DOMAIN_CHANNEL_UPDATE',
  DOMAIN_CHANNEL_DELETE = 'DOMAIN_CHANNEL_DELETE',
  DOMAIN_CHANNEL_ADMIN = 'DOMAIN_CHANNEL_ADMIN',
  DOMAIN_CHANNEL_BULK_IMPORT = 'DOMAIN_CHANNEL_BULK_IMPORT',
  DOMAIN_CHANNEL_BULK_EXPORT = 'DOMAIN_CHANNEL_BULK_EXPORT',
  DOMAIN_CHANNEL_AUDIT_LOG = 'DOMAIN_CHANNEL_AUDIT_LOG',
}

// Permission registry using shared utilities
export const ChannelPermissionRegistry = createPermissionRegistry<
  string,
  Record<string, BasePermissionMeta>
>({
  [ChannelPermission.DOMAIN_CHANNEL_CREATE]: {
    description: 'Create channel records',
    riskLevel: PermissionRiskLevel.MEDIUM,
    requiresJustification: false,
    relatedPermissions: [],
    policyPath: 'TENANT.channel.channel_create',
    category: 'Core Operations',
    auditRequired: true,
    name: 'DOMAIN_CHANNEL_CREATE',
    action: 'channel_create',
    tags: ['crud', 'create'],
    operationType: PermissionOperationType.CRUD,
    policyRuleId: 'channel_channel_create',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.channel.channel_create',
  },
  [ChannelPermission.DOMAIN_CHANNEL_READ]: {
    description: 'Read channel records',
    riskLevel: PermissionRiskLevel.LOW,
    requiresJustification: false,
    relatedPermissions: [],
    policyPath: 'TENANT.channel.channel_read',
    category: 'Core Operations',
    auditRequired: false,
    name: 'DOMAIN_CHANNEL_READ',
    action: 'channel_read',
    tags: ['crud', 'read'],
    operationType: PermissionOperationType.CRUD,
    policyRuleId: 'channel_channel_read',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.channel.channel_read',
  },
  [ChannelPermission.DOMAIN_CHANNEL_UPDATE]: {
    description: 'Update channel records',
    riskLevel: PermissionRiskLevel.MEDIUM,
    requiresJustification: false,
    relatedPermissions: [ChannelPermission.DOMAIN_CHANNEL_READ],
    policyPath: 'TENANT.channel.channel_update',
    category: 'Core Operations',
    auditRequired: true,
    name: 'DOMAIN_CHANNEL_UPDATE',
    action: 'channel_update',
    tags: ['crud', 'update'],
    operationType: PermissionOperationType.CRUD,
    policyRuleId: 'channel_channel_update',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.channel.channel_update',
  },
  [ChannelPermission.DOMAIN_CHANNEL_DELETE]: {
    description: 'Delete channel records',
    riskLevel: PermissionRiskLevel.HIGH,
    requiresJustification: true,
    relatedPermissions: [
      ChannelPermission.DOMAIN_CHANNEL_READ,
      ChannelPermission.DOMAIN_CHANNEL_UPDATE,
    ],
    policyPath: 'TENANT.channel.channel_delete',
    category: 'Core Operations',
    auditRequired: true,
    name: 'DOMAIN_CHANNEL_DELETE',
    action: 'channel_delete',
    tags: ['crud', 'delete'],
    operationType: PermissionOperationType.CRUD,
    policyRuleId: 'channel_channel_delete',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.channel.channel_delete',
  },
  [ChannelPermission.DOMAIN_CHANNEL_ADMIN]: {
    description: 'Full administrative access to channel',
    riskLevel: PermissionRiskLevel.CRITICAL,
    requiresJustification: true,
    relatedPermissions: [
      ChannelPermission.DOMAIN_CHANNEL_CREATE,
      ChannelPermission.DOMAIN_CHANNEL_READ,
      ChannelPermission.DOMAIN_CHANNEL_UPDATE,
      ChannelPermission.DOMAIN_CHANNEL_DELETE,
    ],
    policyPath: 'TENANT.channel.channel_admin',
    category: 'Administrative',
    auditRequired: true,
    name: 'DOMAIN_CHANNEL_ADMIN',
    action: 'channel_admin',
    tags: ['admin', 'full-access'],
    operationType: PermissionOperationType.ADMIN,
    policyRuleId: 'channel_channel_admin',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.channel.channel_admin',
  },
  [ChannelPermission.DOMAIN_CHANNEL_BULK_IMPORT]: {
    description: 'Bulk import channel records',
    riskLevel: PermissionRiskLevel.HIGH,
    requiresJustification: true,
    relatedPermissions: [],
    policyPath: 'TENANT.channel.channel_bulk_import',
    category: 'Bulk Operations',
    auditRequired: true,
    name: 'DOMAIN_CHANNEL_BULK_IMPORT',
    action: 'channel_bulk_import',
    tags: ['bulk', 'import'],
    operationType: PermissionOperationType.BULK,
    policyRuleId: 'channel_channel_bulk_import',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.channel.channel_bulk_import',
  },
  [ChannelPermission.DOMAIN_CHANNEL_BULK_EXPORT]: {
    description: 'Bulk export channel records',
    riskLevel: PermissionRiskLevel.HIGH,
    requiresJustification: true,
    relatedPermissions: [],
    policyPath: 'TENANT.channel.channel_bulk_export',
    category: 'Bulk Operations',
    auditRequired: true,
    name: 'DOMAIN_CHANNEL_BULK_EXPORT',
    action: 'channel_bulk_export',
    tags: ['bulk', 'export'],
    operationType: PermissionOperationType.BULK,
    policyRuleId: 'channel_channel_bulk_export',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.channel.channel_bulk_export',
  },
  [ChannelPermission.DOMAIN_CHANNEL_AUDIT_LOG]: {
    description: 'Access channel audit logs',
    riskLevel: PermissionRiskLevel.HIGH,
    requiresJustification: true,
    relatedPermissions: [],
    policyPath: 'TENANT.channel.channel_audit_log',
    category: 'Audit & Compliance',
    auditRequired: true,
    name: 'DOMAIN_CHANNEL_AUDIT_LOG',
    action: 'channel_audit_log',
    tags: ['audit', 'logs'],
    operationType: PermissionOperationType.SENSITIVE,
    policyRuleId: 'channel_channel_audit_log',
    tenantScope: PermissionTenantScope.TENANT,
    i18nKey: 'permissions.channel.channel_audit_log',
  },
});

// Role hierarchy using shared utilities
export const ChannelPermissionHierarchy = createRoleHierarchy<
  string,
  Record<string, readonly string[]>
>({
  ChannelViewer: [ChannelPermission.DOMAIN_CHANNEL_READ],
  ChannelEditor: [
    ChannelPermission.DOMAIN_CHANNEL_CREATE,
    ChannelPermission.DOMAIN_CHANNEL_READ,
    ChannelPermission.DOMAIN_CHANNEL_UPDATE,
  ],
  ChannelManager: [
    ChannelPermission.DOMAIN_CHANNEL_CREATE,
    ChannelPermission.DOMAIN_CHANNEL_READ,
    ChannelPermission.DOMAIN_CHANNEL_UPDATE,
    ChannelPermission.DOMAIN_CHANNEL_DELETE,
    ChannelPermission.DOMAIN_CHANNEL_BULK_IMPORT,
    ChannelPermission.DOMAIN_CHANNEL_BULK_EXPORT,
    ChannelPermission.DOMAIN_CHANNEL_AUDIT_LOG,
  ],
  ChannelAdmin: [
    ChannelPermission.DOMAIN_CHANNEL_CREATE,
    ChannelPermission.DOMAIN_CHANNEL_READ,
    ChannelPermission.DOMAIN_CHANNEL_UPDATE,
    ChannelPermission.DOMAIN_CHANNEL_DELETE,
    ChannelPermission.DOMAIN_CHANNEL_ADMIN,
    ChannelPermission.DOMAIN_CHANNEL_BULK_IMPORT,
    ChannelPermission.DOMAIN_CHANNEL_BULK_EXPORT,
    ChannelPermission.DOMAIN_CHANNEL_AUDIT_LOG,
  ],
});

// Runtime completeness validation
const ALL_CHANNEL_PERMISSIONS = Object.values(ChannelPermission);
assertRegistryComplete(ALL_CHANNEL_PERMISSIONS, ChannelPermissionRegistry);

/**
 * Channel-specific field permission matrix for field-level security
 */
const CHANNEL_FIELD_PERMISSION_MATRIX = {
  metadata: [ChannelPermission.DOMAIN_CHANNEL_ADMIN],
  bulkImport: [ChannelPermission.DOMAIN_CHANNEL_BULK_IMPORT],
  bulkExport: [ChannelPermission.DOMAIN_CHANNEL_BULK_EXPORT],
} as const;

/**
 * Factory-generated ChannelPermissionHelpers with full functionality
 * This includes all methods needed by the authorization system:
 * - getRiskLevel, requiresJustification, isHighRisk
 * - getPolicyPath, requiresAudit (needed by channel.resource.ts)
 * - getByRiskLevel, expandWithRelated, etc.
 * - Field-level permission logic with FIELD_PERMISSION_MATRIX
 */
export const ChannelPermissionHelpers = createDomainPermissionHelpers({
  domain: 'channel',
  permissions: ChannelPermission,
  registry: ChannelPermissionRegistry,
  fieldMatrix: CHANNEL_FIELD_PERMISSION_MATRIX,
});

// Add domain-specific convenience methods
export const ChannelPermissionUtils = {
  /**
   * Get minimum permissions for basic channel management
   */
  getBasicManagementPermissions(): ChannelPermission[] {
    return [
      ChannelPermission.DOMAIN_CHANNEL_READ,
      ChannelPermission.DOMAIN_CHANNEL_CREATE,
      ChannelPermission.DOMAIN_CHANNEL_UPDATE,
    ];
  },

  /**
   * Check if user can perform bulk operations
   */
  canPerformBulkOperations(userPermissions: ChannelPermission[]): boolean {
    return [
      ChannelPermission.DOMAIN_CHANNEL_BULK_IMPORT,
      ChannelPermission.DOMAIN_CHANNEL_BULK_EXPORT,
    ].some((perm) => userPermissions.includes(perm));
  },
} as const;
