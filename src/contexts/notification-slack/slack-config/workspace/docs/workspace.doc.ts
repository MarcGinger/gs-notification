// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { INestApplication } from '@nestjs/common';
import { SwaggerConfigUtil } from 'src/docs/swagger-config.util';
import { WorkspaceModule } from '../workspace.module';
/**
 * Workspace documentation endpoints interface
 */
export interface WorkspaceDocumentationUrls {
  workspace: string;
}

/**
 * Workspace Documentation
 * This module handles the Swagger documentation for workspaces
 *
 */
export class WorkspaceDocumentation {
  static setup(app: INestApplication, port: string | number): void {
    const config = new DocumentBuilder()
      .addBearerAuth(
        { type: 'http', scheme: 'bearer', bearerFormat: 'JWT' },
        'bearer',
      )
      .setTitle('üì± Workspace Management API')
      .setDescription(
        `
## bounded context: notification-slack
[‚Üê Back to documentation](/api/docs/notification-slack)

### application: slack-config
[‚Üê Back to documentation](/api/docs/notification-slack/slack-config)
## üß† SlackWorkspace

### **Purpose**

The \`SlackWorkspace\` aggregate represents the tenant‚Äôs connection to their Slack workspace. It acts as the foundational configuration point that defines the link between the system and the tenant‚Äôs Slack organization.

This aggregate holds sensitive integration credentials ‚Äî including OAuth tokens, signing secrets, and app identifiers ‚Äî and ensures they are securely managed and rotated when necessary. It also tracks which workspace belongs to which tenant and whether the connection is currently active.

### **Responsibilities**

* Maintain the tenant-to-Slack workspace mapping.
* Securely store and reference OAuth credentials (e.g., \`botToken\`, \`signingSecret\`).
* Enable or disable the Slack integration per tenant.
* Manage the default posting channel for system notifications.
* Emit events that notify other services when configuration changes occur.

### **Why It Matters**

Without the \`SlackWorkspace\` aggregate, the platform wouldn‚Äôt know **where** to send Slack messages or which tokens to use for authentication. It ensures tenant isolation and provides a secure boundary for Slack API interactions.
`,
      )
      .setVersion('1.0.0')
      .addTag('Workspaces', `Configuration for workspace table`);

    // Add dynamic server configuration
    SwaggerConfigUtil.addServers(config, port);

    const document = SwaggerModule.createDocument(app, config.build(), {
      include: [WorkspaceModule],
      extraModels: [],
    });

    SwaggerModule.setup(
      'api/docs/notification-slack/slack-config/workspace',
      app,
      document,
    );
  }

  /**
   * Setup all workspace-related documentation endpoints
   * This method centralizes the setup of all workspace module documentation
   */
  static setupAll(
    app: INestApplication,
    port: string | number,
  ): WorkspaceDocumentationUrls {
    // Setup main workspace documentation
    WorkspaceDocumentation.setup(app, port);

    // Setup sub-module documentation

    // Return all endpoint URLs
    return {
      workspace: WorkspaceDocumentation.getEndpoint(port),
    };
  }

  static getEndpoint(port: string | number): string {
    return `${SwaggerConfigUtil.getServerUrl(port)}/api/docs/notification-slack/slack-config/workspace`;
  }
}
