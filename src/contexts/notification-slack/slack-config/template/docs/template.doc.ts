// @generated by gen v1.0.0 hash:regen
// REMOVE THIS COMMENT TO STOP AUTOMATIC UPDATES TO THIS BLOCK

import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { INestApplication } from '@nestjs/common';
import { SwaggerConfigUtil } from 'src/docs/swagger-config.util';
import { TemplateModule } from '../template.module';
/**
 * Template documentation endpoints interface
 */
export interface TemplateDocumentationUrls {
  template: string;
}

/**
 * Template Documentation
 * This module handles the Swagger documentation for templates
 *
 */
export class TemplateDocumentation {
  static setup(app: INestApplication, port: string | number): void {
    const config = new DocumentBuilder()
      .addBearerAuth(
        { type: 'http', scheme: 'bearer', bearerFormat: 'JWT' },
        'bearer',
      )
      .setTitle('üì± Template Management API')
      .setDescription(
        `
## bounded context: notification-slack
[‚Üê Back to documentation](/api/docs/notification-slack)

### application: slack-config
[‚Üê Back to documentation](/api/docs/notification-slack/slack-config)
## üß© SlackTemplate

### **Purpose**

The \`SlackTemplate\` aggregate defines reusable message templates that standardize the look and feel of Slack notifications. Templates are typically built using **Slack Block Kit** ‚Äî Slack‚Äôs rich formatting system for interactive and visually appealing messages.

These templates can include placeholders (variables) for dynamic data, making them ideal for structured messages like approvals, alerts, and workflow completions.

### **Responsibilities**

* Define message layouts and content using Block Kit JSON.
* Manage template metadata (e.g., name, description, version, and tenant).
* Store variable definitions and validation rules.
* Enable/disable templates per tenant for staged rollouts.
* Emit events when templates are created, updated, or retired.

### **Why It Matters**

\`SlackTemplate\` enables **message consistency** and branding. Instead of ad-hoc message construction, all Slack notifications use predefined, validated templates ‚Äî ensuring compliance, clarity, and maintainability.

`,
      )
      .setVersion('1.0.0')
      .addTag('Templates', `Configuration for template table`);

    // Add dynamic server configuration
    SwaggerConfigUtil.addServers(config, port);

    const document = SwaggerModule.createDocument(app, config.build(), {
      include: [TemplateModule],
      extraModels: [],
    });

    SwaggerModule.setup(
      'api/docs/notification-slack/slack-config/template',
      app,
      document,
    );
  }

  /**
   * Setup all template-related documentation endpoints
   * This method centralizes the setup of all template module documentation
   */
  static setupAll(
    app: INestApplication,
    port: string | number,
  ): TemplateDocumentationUrls {
    // Setup main template documentation
    TemplateDocumentation.setup(app, port);

    // Setup sub-module documentation

    // Return all endpoint URLs
    return {
      template: TemplateDocumentation.getEndpoint(port),
    };
  }

  static getEndpoint(port: string | number): string {
    return `${SwaggerConfigUtil.getServerUrl(port)}/api/docs/notification-slack/slack-config/template`;
  }
}
